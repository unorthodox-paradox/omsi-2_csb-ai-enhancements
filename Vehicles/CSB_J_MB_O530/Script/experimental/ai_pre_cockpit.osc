'==============================================================================
'
' Cockpit subsystem supplement for AI-controlled CSB vehicles
'
'==============================================================================
'
' Compatibility
' -------------
'
' OMSI version                                    : 2.2.032 ~ 2.3.004
' Supported CSB modules                           : MB O530 - 1.30
' Supported CSB vehicles                          : CVAG 72
' CSB AI enhancements version                     : 1.5.1
'
'==============================================================================
'
' Overview
' --------
'
' This script provides the AI with usage and decision making logic related to
' the following functions/subsystems:
' - Door stop workflow: Opening, closing, and wing-locking, based on passenger
'   flow and subjective (per-vehicle) environmental perception and preference.
' - Subjective stop departure delay based on the kind of stop (terminal or
'   initial, otherwise prolonged (whenever OMSI requests that the engine be
'   turned off), or regular), and number of passengers.
' - Preference-based unscheduled (standstill) stop brake engagement and
'   disengagement.
' - Engine, transmission ("D" engagement - disengagement), and handbrake state
'   inversion at prolonged, typically terminal stops.
' - Preference-based usage of indicators, windows, hatches, heating and
'   cooling, sun blinds, and wipers.
' Lighting-related functionality instead resides in the separate lights_ai.osc
' script, out of reasons of complexity.
'
' The name "pre_cockpit" means that, at least conceptually, this script
' reflects the reasoning within simulated drivers' heads for performing
' cockpit-related actions ("is the windshield wet enough to activate the
' wipers?"), rather than the actual performing of such actions ("flip the wiper
' switch"), which, to the extent practically feasible, are directly or
' implicitly delegated to the apposite subsystem (cockpit, engine, etc.) as
' usual.
'
'==============================================================================
'
' Dependencies
' ------------
'
' This script requires access to variables declared and maintained by the
' following scripts:
' - cockpit   : State of door, stop brake, handbrake, ignition key,
'               transmission, hatch, passenger window, and heating / cooling
'               controls; also driver window, sun blind, and ramp position
'               variables.*
' - elec      : Electrics state.*
' - engine    : Engine rotation frequency and "master" status.*
' - antrieb   : Transmission mode ("D" / "N" / "R").*
' - bremse    : Stop- and handbrake engagement status.*
' - door      : Door opening status; configuration for a) automatic stop brake
'               engagement upon front door opening, and maximum velocity of
'               b) stop brake engagement, and c) door opening.
' - VDV       : "Master" status and display mode.*
' - uchill    : State of heating / cooling functions.
' - lights_ai : AI-perceived environmental brightness and target lighting
'               state, for synchronization purposes.
' - IBIS,
'   ticket    : Display mode.*
'   printer
'
' *foreign variable(s) written to by this script
'
' The following scripts depend on the state or functionality of this script:
' - cockpit:
'   - Non-instant adjustment of cockpit controls (e.g. sun blind dragging or
'     retracting) typically occurs in collaboration between this script and
'     that of the cockpit.
'   - The cockpit script overrides brake and throttle pedal settings based on
'     the stop workflow maintained by this script.
' - cockpit, lights:
'   - This script's stop workflow is likewise observed by these scripts to
'     override the indicator lever setting.
' - cockpit, lights_ai:
'   - Lighting adjustment based on this script's stop and passenger
'     window adjustment workflows.
'
'==============================================================================
'
' Contributors
' ------------
'
' - Unorthodox Paradox (2018 ~ 2019):
'   Initial version. Fragments reused verbatim from the original cockpit script
'   are the work of Marcel Kuhnt, Rüdiger Hülsmann, et al. (2009 ~ 2014),
'   and/or alTerr, wizard (2012 ~ 2014), Morphi (2012 ~ 2018), et al..
'
'==============================================================================
'==============================================================================


'------------------------------------------------------------------------------
' 0. Main script callbacks
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_init}
    (M.L.ai_pre_cockpit_stop_state_reset)
    (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) !
    {if}
'       // Mark as initial AI spawn so that certain actions are carried out instantly, as opposed to regular operation,
'       // where almost everything gets randomly delayed.
        1 (S.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle)
    {endif}
{end}

{macro:ai_pre_cockpit_frame}
'   // Handle update of passenger window state through nearby-seated passenger (groups). This always takes place,
'   // whether the vehicle is user- or AI-controlled -- provided it is _user-focused_.
    (L.S.Timegap) (S.L.ai_pre_cockpit_ai_timegap)
    (M.L.ai_pre_cockpit_passengers)

    (L.L.AI)
    {if}
'       // Failsafe: If any of the following abnormal conditions hold true, it is pointless to do anything (force user
'       // to hit repair button instead):
'       // - Electrics down.
'       // - Engine down.
'       // - Transmission down.
'       // - Fuel depleted.
'       // - Battery depleted.
'       // Note that none of these should normally be possible in a bus that was initially spawned in AI mode; it is
'       // nevertheless possible that the user hand a damaged vehicle over to the AI, and it is then that this failsafe
'       // should trigger.
'       // XXX: The edge case where a user crashes into an AI bus, causing damage of the aforementioned kinds, is
'       //      currently not addressed. This means that such a crashed-into AI bus would fail to become functional
'       //      again on its own, i.e., without user intervention. Fixing this would entail a) heuristically detecting
'       //      the crash (OMSI conveys hazard indicator mode activation), b) heuristically detecting that the user
'       //      called the police (OMSI conveys hazard indicator mode deactivation), and c) auto-repairing the vehicle
'       //      at the time it gets re-spawned next.
        (L.L.elec_failure_general) (L.L.engine_failure_general) || (L.L.antrieb_failure_general) ||
            (L.L.engine_tank_content) ! || (L.L.elec_battery_load) 0.01 <= || (S.L.ai_pre_cockpit_master_failsafe) !
        {if}
'           // Initialization sequence: OMSI defers initialization of certain weather-related variables, as well as,
'           // apparently, setvar-induced variable mutations, until the second post-spawn frame. This script defers
'           // initialization for 4 frames -- 2 out of the aforementioned reason, plus 2 extra to allow other scripts
'           // it depends on (namely cockpit* and lights_ai*), but running after it, the "buffer time" they need to
'           // initialize themselves first. Initialization of this script concludes at (init +5) and stable operational
'           // state is entered at (init +6).
'           // * Specifically, cockpit takes 2 frames and lights_ai 3, so this script must wait at least 4 frames (due
'           //   to running first) for both dependencies to have entered a stable state.
            (L.L.ai_pre_cockpit_initialized) 0 =
            {if}
'               // First initialization frame: Wipe any state, cockpit- or timetable-wise, potentially left over from
'               // previous usage.
                (L.S.Timegap) (S.L.ai_pre_cockpit_ai_timegap)
                (M.L.ai_pre_cockpit_stop_state_reset)
                (M.L.ai_pre_cockpit_cockpit_state_reset)
                1 (S.L.ai_pre_cockpit_initialized)
            {else}
                (L.L.ai_pre_cockpit_initialized) d 4 < &&
                {if}
'                   // Second to fourth initialization frame: Nothing to do (wait for dependencies to init)
                    (L.S.Timegap) (S.L.ai_pre_cockpit_ai_timegap)
                    (L.L.ai_pre_cockpit_initialized) 1 =
                    {if}
'                       // Second post-initialization frame: Generate vehicle profile.
                        (M.L.ai_pre_cockpit_profile_init)
                    {endif}
                    (L.L.ai_pre_cockpit_initialized) 1 + (S.L.ai_pre_cockpit_initialized)
                {else}
                    (L.L.ai_pre_cockpit_initialized) 4 =
                    {if}
'                       // Fifth initialization frame: Continue initialization (dependencies themselves should have
'                       // finished initializing by now)

                        (L.S.Timegap) (S.L.ai_pre_cockpit_ai_timegap)
                        (M.L.ai_pre_cockpit_env)
                        (M.L.ai_pre_cockpit_refresh_tt_context)

                        (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 =
                        {if}
'                           // Freshly-spawned AI vehicle

'                           // Those are normally assigned in ai_pre_cockpit_stop, but since we're not calling that
'                           // macro until next frame, we must repeat this bit here...
                            (L.L.ai_pre_cockpit_stop_last_run_bus_stop_index)
                                (S.L.ai_pre_cockpit_stop_last_arrival_bus_stop_index)
                            (L.L.ai_pre_cockpit_stop_last_run_bus_stop_count)
                                (S.L.ai_pre_cockpit_stop_last_arrival_bus_stop_count)
'                           // ...so as to discern between spawning with closed or open front doors.
                            (M.L.ai_pre_cockpit_evaluate_open_front_door_departure_primitives)
                                (M.L.ai_pre_cockpit_evaluate_open_front_door_departure)
                                (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed)
                            {if}
                                1 (S.L.door_0) (S.L.door_1) (S.L.doorTarget_0) (S.L.doorTarget_1)
                            {endif}

'                           // Likewise, inform the ai_pre_cockpit_stop macro, when it first gets executed the next
'                           // frame, that we want the newly-spawned AI bus to depart immediately, no questions asked,
'                           // rather than stay "stuck" at its spawned location (which might be in the middle of a
'                           // busy road), even if only for a few seconds.
                            (L.L.AI_Scheduled_AtStation)
                            {if}
                                4 (S.L.ai_pre_cockpit_stop_phase)
                                1 (S.L.ai_pre_cockpit_stop_phase_init_override)
                            {endif}

'                           // Set the tachometer-integrated board-computer's mode to the driver's liking. Only
'                           // supported for freshly-spawned vehicles for the time being.
                            10000 random (M.V.NrSpecRandom) 6 * trunc (S.L.bordcomputer_mode)
                        {else}
'                           // Former user vehicle that has now been assigned to the AI; reset/deactivate certain
'                           // functions that would only cause us trouble down the road.
'                           // XXX: Currently all of the following adjustments are carried out instantly. Some
'                           //      non-crucial / aesthetics-oriented of them could be randomly delayed, for added
'                           //      realism. Additionally switch toggling is currently instant, which is likewise
'                           //      suboptimal.

'                            // Steering wheel should always be visible.
                            1 (S.L.cp_lenkrad_visible)

'                           // If an emergency door valve is or was previously opened by user, then "drag" attached
'                           // door wings open manually, then close the valve if open, so that door is anew in a state
'                           // that the ai_pre_cockpit_stop macro can subsequently handle as usual (via the cockpit
'                           // door buttons).
                            (L.L.door_01_nothahn_sw) d ! (L.L.door_0) 0.2 >= (L.L.door_0) 0.8 <= &&
                                (L.L.doorSpeed_0) ! && (L.L.door_1) 0.2 >= (L.L.door_1) 0.8 <= &&
                                (L.L.doorSpeed_1) ! && || && ||
                            {if}
                                0 (S.L.door_01_nothahn_sw)
                                (T.L.ev_nothahn01_zu)
                                1 (S.L.door_0_soll) (S.L.door_1_soll)
                                    (S.L.ai_pre_cockpit_door_01_sw_target_init_override)
                            {endif}
                            (L.L.door_23_nothahn_sw) d ! (L.L.door_2) 0.2 >= (L.L.door_2) 0.8 <= &&
                                (L.L.doorSpeed_2) ! && (L.L.door_3) 0.2 >= (L.L.door_3) 0.8 <= &&
                                (L.L.doorSpeed_3) ! && || && ||
                            {if}
                                0 (S.L.door_23_nothahn_sw)
                                (T.L.ev_nothahn23_zu)
                                1 (S.L.door_2_soll) (S.L.door_3_soll)
                                    (S.L.ai_pre_cockpit_door_23_sw_target_init_override)
                            {endif}

'                           // Currently unsupported heating / cooling functions

'                           // Air recirculation
                            (L.L.cp_taster_internal_air_target)
                            {if}
                                0 (S.L.cp_taster_internal_air_target)
                                (T.L.ev_VDV_toggle_on)
                                (T.L.ev_VDV_toggle_off)
                            {endif}

'                           // Auxiliary heating
                            (L.L.cp_taster_standheizung_target)
                            {if}
                                0 (S.L.cp_taster_standheizung_target)
                                (T.L.ev_VDV_toggle_on)
                                (T.L.ev_VDV_toggle_off)
                            {endif}

'                           // Humidity ((de-)humidification) management
                            (L.L.cp_taster_heat_or_frost_target)
                            {if}
                                0 (S.L.cp_taster_heat_or_frost_target)
                                (T.L.ev_VDV_toggle_on)
                                (T.L.ev_VDV_toggle_off)
                            {endif}

'                           // Mirror defrost
                            (L.L.cp_dummy_sw06)
                            {if}
                                0 (S.L.cp_dummy_sw06)
                                (T.L.ev_VDV_off)
                            {endif}

'                            // High beam
                            (L.L.lights_sw_fern)
                            {if}
                                0 (S.L.lights_sw_fern)
                                (T.L.ev_wischerhebel)
                            {endif}

'                           // Driver / cockpit light
                            (L.L.cp_fahrerlicht_sw)
                            {if}
                                0 (S.L.cp_fahrerlicht_sw)
                                (T.L.ev_VDV_off)
                            {endif}

'                           // ASR override
                            (L.L.cp_ASR_off)
                            {if}
                                0 (S.L.cp_ASR_off)
                                (T.L.ev_VDV_off)
                            {endif}

'                           // Retarder override
                            (L.L.cp_retarder_sw_direkt)
                            {if}
                                0 (S.L.cp_retarder_sw_direkt)
                                (T.L.ev_VDV_off)
                            {endif}

'                           // Reset VDV display to default mode
                            (L.L.obd_info_mode) (L.L.obd_system_mode) ||
                            {if}
                                0 (S.L.obd_info_mode) (S.L.obd_system_mode) (S.L.comp_button_qiut_mode)
                                (T.L.ev_VDV_toggle_on)
                                (T.L.ev_VDV_toggle_off)
                            {endif}

'                           // Stop brake override
                            (L.L.cp_not_aus_sw)
                            {if}
                                0 (S.L.cp_not_aus_sw)
                                (T.L.ev_VDV_off)
                            {endif}

'                           // Dashboard angle adjustment
                            (L.L.cp_dummy_sw10)
                            {if}
                                0 (S.L.cp_dummy_sw10)
                                (T.L.ev_VDV_off)
                            {endif}

'                           // Dummy switch at top-left of side panel
                            (L.L.cp_dummy_sw11)
                            {if}
                                0 (S.L.cp_dummy_sw11)
                                (T.L.ev_VDV_off)
                            {endif}
                        {endif}

'                       // The following macros all distinguish between first (immediate adjustment) and recurring
'                       // (delayed adjustment) AI takeover initialization, so no need to differentiate here.

'                       // Initialize engine, transmission, and handbrake
                        (M.L.ai_pre_cockpit_engine_transmission_handbrake)
'                       // Initialize front door wing lock
                        (M.L.ai_pre_cockpit_door_lock)
'                       // Initialize driver window
                        (M.L.ai_pre_cockpit_driver_window)
'                       // Initialize sun blinds
                        (M.L.ai_pre_cockpit_sun_blinds)
'                       // Initialize hatches
                        (M.L.ai_pre_cockpit_hatches)
'                       // Initialize heating / cooling
                        (M.L.ai_pre_cockpit_heating_cooling)
'                       // Initialize wipers
                        (M.L.ai_pre_cockpit_wiper)
'                       // Initialize indicators
                        (M.L.ai_pre_cockpit_indicators)
'                       // Initialize passenger windows (according to driver's perception)
                        (M.L.ai_pre_cockpit_passenger_windows)

'                       // Done; ready to commence normal operation
                        5 (S.L.ai_pre_cockpit_initialized)

                    {else}
'                       // Sixth frame since spawn, and beyond: normal operation

                        (L.L.ai_pre_cockpit_initialized) 5 =
                        {if}
                            6 (S.L.ai_pre_cockpit_initialized)
                        {endif}

'                       // Heuristic for determining abrupt changes in context that may require an immediate response,
'                       // i.e., non-delayed adjustment, by the vehicle. Following abnormal conditions are accounted
'                       // for:
'                       // - The time of day differing from the one recorded during the previous execution frame by
'                       //   over 1 second (implying the user having changed the time, in turn having possibly caused
'                       //   the vehicle to re-spawn). Note that this doesn't "catch" the case of the user opening the
'                       //   date/time adjustment dialog and hitting "OK" _without_ actually having changed the time,
'                       //   which might still cause the vehicle to re-spawn, typically when delayed or early.
'                       // - The game time differing from the one recorded during the previous execution by over 1
'                       //   second (implying that the vehicle was previously "hibernated", i.e., outside of the user's
'                       //   loaded tiles, only now resuming operation).
'                       // - The vehicle having been recorded as being at a scheduled stop the frame before, yet now
'                       //   abruptly seen moving, in violation of the protocol established by the ai_pre_cockpit_stop
'                       //   macro (suggesting, again, either of the first two root causes having brought about a
'                       //   re-spawn).
'                       // - Likewise, the vehicle's velocity differing from the one recorded during the previous
'                       //   execution by over 5 km/h.
'                       // - Likewise, the vehicle's velocity exceeding 0.5 km/h, yet transmission being "stuck" in
'                       //   neutral (indicating, yet again, a re-spawn, for the vehicle was, during last execution, at
'                       //   standstill, hence in (auto-)neutral, yet is now magically suddenly on the move).
'                       // When any of the aforementioned conditions hold, any essential pending adjustments
'                       // (reigniting the engine, closing doors, etc.) are to conclude within exactly one frame, to
'                       // allow the vehicle to continue on with as minimal disruption ("getting stuck") as possible --
'                       // inevitably at some expense of realism.
                        (L.L.ai_pre_cockpit_stop_phase) 4 =
                        {if}
                            0 (S.L.ai_pre_cockpit_stop_phase)
                        {else}
                            (L.L.ai_pre_cockpit_stop_last_run_time_of_day) s0 (L.S.Time) s1 (M.L.utils_duration) l2 1 >
                                (L.S.GetTime) (L.L.ai_pre_cockpit_stop_last_run_game_time) - 1 > (L.S.Pause) ! && ||
                                (L.L.AI_Scheduled_AtStation) -1 = (L.L.AI_Scheduled_AtStation) !
                                (L.L.ai_pre_cockpit_stop_phase) && || (L.L.velocity) 0.5 > && ||
                                (L.L.velocity) (L.L.ai_pre_cockpit_stop_last_run_velocity) - abs 5 > ||
                                (L.L.antrieb_getr_gangvorwahl) 4 = (L.L.antrieb_getr_aktugang) ! &&
                                (L.L.velocity) 0.5 > && ||
                            {if}
                                4 (S.L.ai_pre_cockpit_stop_phase)
                            {endif}
                        {endif}

'                       // Enhanced timegap for accounting for the "hibernation" factor. Otherwise, long-delayed
'                       // adjustments (e.g. switching lights off) would practically never manifest on off-focus /
'                       // "short-lived" AI vehicles.
                        (L.S.Timegap) (L.S.GetTime) (L.L.ai_pre_cockpit_stop_last_run_game_time) - 0 max max
                            (S.L.ai_pre_cockpit_ai_timegap)

'                       // Close driver cubicle's door if left open by user. This adjustment is non-instant, and that's
'                       // why, even though it only occurs once, it's not part of the initialization phase. This part
'                       // is also leveraged by the ai_pre_cockpit_passenger_windows macro for closing the driver's
'                       // door each time the window adjustment process has concluded.
'                       // XXX: Minor imperfection: If ramp or emergency door opening valves open at initialization,
'                       //      yet driver door closed, we should open the latter first for added realism. Currently it
'                       //      will be simply left closed.
                        (L.L.ai_pre_cockpit_driver_cubicle_door_closed_initially) ! (L.L.cp_fahrertuer_open) &&
                            (L.L.pandus_pos) 0.2 < &&
                        {if}
                            (L.L.cp_fahrertuer_pos) s0 0 s1 1 10000 random 10000 / + s2
                                (M.L.utils_gradual_constant_update) l0 (S.L.cp_fahrertuer_pos)
                                (S.L.cp_fahrertuer_lastpos)
                        {else}
                            (L.L.cp_fahrertuer_open) ! (L.L.ai_pre_cockpit_driver_cubicle_door_closed_initially) ! &&
                            {if}
                                1 (S.L.ai_pre_cockpit_driver_cubicle_door_closed_initially)
                            {endif}
                        {endif}

'                       // Reset IBIS / ticket printer display mode to default. Likewise, this adjustment is not part
'                       // of the initialization phase, in order to determine whether the display mode had been changed
'                       // by the user, prior to AI takeover, or automatically, due to the vehicle being spawned with
'                       // open front doors (which we cannot tell until the doors are all closed, which might not
'                       // happen until an arbitrary post-initialization point in time).
                        (L.L.IBIS_mode) (L.L.IBIS_SonderansagenMode) || (L.L.ITCS_Visible) ||
                            (L.L.printermodechanged) ! &&
                        {if}
                            0 (S.L.IBIS_mode) (S.L.IBIS_SonderansagenMode) (S.L.ITCS_Visible)
                        {endif}

'                       // Also acknowledge IBIS / ticket printer "departure clearance" message / overlay.
                        (L.L.IBIS_DepartureTime) (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
                        {if}
                            (L.L.ai_pre_cockpit_ibis_departure_clearance_acknowledgment_timer) -1 =
                            {if}
                                1.5 10000 random 10000 / 5 * +
                                    (S.L.ai_pre_cockpit_ibis_departure_clearance_acknowledgment_timer)
                            {endif}
                            (L.L.ai_pre_cockpit_ibis_departure_clearance_acknowledgment_timer)
                            {if}
                                (L.L.ai_pre_cockpit_ibis_departure_clearance_acknowledgment_timer)
                                    (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                                (S.L.ai_pre_cockpit_ibis_departure_clearance_acknowledgment_timer)
                            {endif}
                            (L.L.ai_pre_cockpit_ibis_departure_clearance_acknowledgment_timer) !
                            {if}
                                0 (S.L.IBIS_DepartureTime)
                                -1 (S.L.ai_pre_cockpit_ibis_departure_clearance_acknowledgment_timer)
                            {endif}
                        {else}
                            -1 (S.L.ai_pre_cockpit_ibis_departure_clearance_acknowledgment_timer)
                        {endif}

'                       // Query environment/weather, and actualize perception
                        (M.L.ai_pre_cockpit_env)
'                       // Actualize engine, transmission, and handbrake
                        (M.L.ai_pre_cockpit_engine_transmission_handbrake)
'                       // Actualize front door wing lock
                        (M.L.ai_pre_cockpit_door_lock)
'                       // Process stop workflow and actualize doors
                        (M.L.ai_pre_cockpit_stop)
'                       // Actualize driver window
                        (M.L.ai_pre_cockpit_driver_window)
'                       // Actualize sun blinds
                        (M.L.ai_pre_cockpit_sun_blinds)
'                       // Actualize hatches
                        (M.L.ai_pre_cockpit_hatches)
'                       // Actualize heating / cooling
                        (M.L.ai_pre_cockpit_heating_cooling)
'                       // Actualize wipers
                        (M.L.ai_pre_cockpit_wiper)
'                       // Actualize indicators
                        (M.L.ai_pre_cockpit_indicators)
'                       // Actualize passenger windows (according to driver's perception)
                        (M.L.ai_pre_cockpit_passenger_windows)
                    {endif}
                {endif}
            {endif}

'           // Edge case: Previously crashed or failsafe triggered
            (L.L.AI_Blinker_L) (L.L.AI_Blinker_R) &&
            {if}
                (L.L.lights_sw_warnblinker) !
                {if}
                    1 (S.L.lights_sw_warnblinker)
                    (T.L.ev_VDV_on)
                {endif}
            {else}
                (L.L.lights_sw_warnblinker)
                {if}
                    0 (S.L.lights_sw_warnblinker)
                    (T.L.ev_VDV_off)
                {endif}
            {endif}

        {else}
'           // Failsafe triggered: Just fail

            (L.L.ai_pre_cockpit_initialized) 5 >=
            {if}
                (L.S.Timegap) (L.S.GetTime) (S.L.ai_pre_cockpit_stop_last_run_game_time)
                    (L.L.ai_pre_cockpit_stop_last_run_game_time) - 0 max max
            {else}
                (L.S.Timegap)
            {endif}
            (S.L.ai_pre_cockpit_ai_timegap)

'           // Enable hazard indicator mode if that makes sense, i.e., if electrics functional and battery not
'           // depleted.
            (L.L.lights_sw_warnblinker) ! (L.L.elec_failure_general) ! && (L.L.elec_battery_load) 0.01 > &&
            {if}
                1 (S.L.lights_sw_warnblinker)
                (T.L.ev_VDV_on)
            {else}
'               // Otherwise, if electrics non-functional, terminate any non-instant (multi-frame) adjustment sequences
'               // that depend on power availability (failing to do so would cause perpetually toggled switches for no
'               // apparent reason).
                (L.L.elec_failure_general) (L.L.elec_battery_load) 0.01 <= ||
                {if}
                    (L.L.cockpit_tuertaster1)
                    {if}
                        0 (S.L.cockpit_tuertaster1)
                        (T.L.ev_tuertaster_aus)
                    {endif}
                    (L.L.cockpit_tuertaster2)
                    {if}
                        0 (S.L.cockpit_tuertaster2)
                        (T.L.ev_tuertaster_aus)
                    {endif}
                    (L.L.cp_dummy_sw08)
                    {if}
                        0 (S.L.cp_dummy_sw08)
                        (T.L.ev_VDV_toggle_off)
                    {endif}
                {endif}
            {endif}
'           // Engage handbrake
            (L.L.bremse_feststell_sw) !
            {if}
                1 (S.L.bremse_feststell_sw) (S.L.bremse_feststell)
                (T.L.ev_bremse_feststell_ein)
            {endif}
'           // Disengage gear
            (L.L.cockpit_gang3) (L.L.cockpit_gangR) ||
            {if}
                1 (S.L.antrieb_getr_gangvorwahl)
                0 (S.L.cockpit_gang3) (S.L.cockpit_gangR)
                (T.L.ev_gangwahltaster_N)
                (L.S.GetTime) (C.L.antrieb_gangwahlzeit) 0.1 + - (S.L.antrieb_getr_gangwahlzeitpunkt)
            {endif}
'           // Rotate ignition key back to position 1 / primary electrics on / "ACC" if at a greater position
            (L.L.key_mode) 3 >=
            {if}
                2 (S.L.key_mode)
                0.2 (S.L.cp_key_rot)
                0 (S.L.engine_injection_on)
                (T.L.ev_schluessel_dreh)
            {endif}
        {endif}

    {else}
'       // Non-AI: Wipe any leftover state from previous AI usage

        (L.S.Timegap) (S.L.ai_pre_cockpit_ai_timegap)

        -1 (S.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle)
        (L.L.ai_pre_cockpit_initialized)
        {if}
'           // The following variables participate in non-instant (multi-frame) adjustment sequences; reset them to
'           // prevent aesthetically weird occurrences (such as curiously stuck door buttons).
            (L.L.cockpit_tuertaster1)
            {if}
                0 (S.L.cockpit_tuertaster1)
                (T.L.ev_tuertaster_aus)
            {endif}
            (L.L.cockpit_tuertaster2)
            {if}
                0 (S.L.cockpit_tuertaster2)
                (T.L.ev_tuertaster_aus)
            {endif}
            (L.L.cp_dummy_sw08)
            {if}
                0 (S.L.cp_dummy_sw08)
                (T.L.ev_VDV_toggle_off)
            {endif}
            (L.L.key_mode) 4 =
            {if}
                3 (S.L.key_mode)
                0.4 (S.L.cp_key_rot)
                (T.L.ev_schluessel_dreh)
            {endif}
            0 (S.L.cp_rollo_dragged) (S.L.cp_rollo_retract) (S.L.cp_rollo1_dragged) (S.L.cp_rollo1_retract)
                (S.L.cockpit_heizregler_fussraum_adjustment) (S.L.ai_pre_cockpit_initialized)
        {endif}
    {endif}
{end}

'------------------------------------------------------------------------------
' 1. Driver profile and environmental perception
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_profile_init}
'   // ----- Generic perception primitives (see ai_pre_cockpit_env macro) -----

'   // Temperature ranges.
    0.3 10000 random (M.V.NrSpecRandom) 0.7 * + s0
    5 10 l0 * + (S.L.ai_pre_cockpit_env_cold_temperature_max) 5 l0 * - (S.L.ai_pre_cockpit_env_coldest_temperature_max)
    16 4 l0 * + (S.L.ai_pre_cockpit_env_chilly_temperature_max)
    18 8 l0 * + (S.L.ai_pre_cockpit_env_ideal_temperature_max)
    22 8 l0 * + (S.L.ai_pre_cockpit_env_warm_temperature_max) 8 l0 * + (S.L.ai_pre_cockpit_env_hot_temperature_max)

'   // "Wet/dry" dichotomy.
    10000 random (M.V.NrSpecRandom) 0.05 * (S.L.ai_pre_cockpit_env_dry_precip_rate_max)

'   // "Nighttime/daytime" dichotomy.
    -10 10000 random (M.V.NrSpecRandom) 20 * + (S.L.ai_pre_cockpit_env_nighttime_sun_alt_max)

'   // ----- Stop brake and door usage -----

'   // Door wing lock usage eagerness and preferred setting. See ai_pre_cockpit_door_lock macro.
    10000 random (M.V.NrSpecRandom) 0.7 <
    {if}
        10000 random (M.V.NrSpecRandom) 0.7 <
        {if}
            1
        {else}
            2
        {endif}
    {else}
        0
    {endif}
    (S.L.ai_pre_cockpit_door_lock_usage_scope)
    {if}
        10000 random (M.V.NrSpecRandom) 0.7 <
        {if}
            -1
        {else}
            1
        {endif}
    {else}
        0
    {endif}
    (S.L.ai_pre_cockpit_door_lock_usage_setting)

'   // Door usage "political correctness" factor. See ai_pre_cockpit_stop,
'   // ai_pre_cockpit_evaluate_open_front_door_departure_primitives, and
'   // ai_pre_cockpit_evaluate_open_front_door_departure macros.
    10000 random (M.V.NrSpecRandom) 0.6 <
    {if}
        0.6 s0 0.25 s1
    {else}
        10000 random (M.V.NrSpecRandom) 0.625 <
        {if}
            0.85 s0 0.15 s1
        {else}
            10000 random (M.V.NrSpecRandom) 0.67 <
            {if}
                0.4 s0 0.2 s1
            {else}
                0.2 s0 s1
            {endif}
        {endif}
    {endif}
    l0 10000 random (M.V.NrSpecRandom) l1 * + (S.L.ai_pre_cockpit_door_pc_factor)

'   // Door-relevant passenger count significance threshold. See ai_pre_cockpit_stop,
'   // ai_pre_cockpit_evaluate_open_front_door_departure_primitives, and
'   // ai_pre_cockpit_evaluate_open_front_door_departure macros.
    10000 random (M.V.NrSpecRandom) 0.6 <
    {if}
        10000 random (M.V.NrSpecRandom) 0.5 <
        {if}
            0 s0 s1
        {else}
            2 s0 3 s1
        {endif}
    {else}
        10000 random (M.V.NrSpecRandom) 0.625 <
        {if}
            0 s0
            10000 random (M.V.NrSpecRandom) 0.75 <
            {if}
                0
            {else}
                3
            {endif}
            s1
        {else}
            10000 random (M.V.NrSpecRandom) 0.67 <
            {if}
                5 s0 10 s1
            {else}
                10 s0 15 s1
            {endif}
        {endif}
    {endif}
    l1
    {if}
        10000 random (M.V.NrSpecRandom) l1 * trunc s1
    {endif}
    l0 l1 + (S.L.ai_pre_cockpit_significant_number_of_passengers)

'   // Eager environment-wise door opening frequencies. See ai_pre_cockpit_stop macro.
    0.2 10000 random (M.V.NrSpecRandom) 0.8 * + s0
    0.1 0.1 l0 * + (S.L.ai_pre_cockpit_opening_door_01_at_prolonged_stop_when_env_chilly_dry_daytime_probability)
    0.2 0.3 l0 * + (S.L.ai_pre_cockpit_opening_door_01_at_prolonged_stop_when_env_ideal_dry_nighttime_probability)
        0.1 * (S.L.ai_pre_cockpit_opening_door_23_at_prolonged_stop_when_env_ideal_dry_nighttime_probability)
    0.3 0.4 l0 * + (S.L.ai_pre_cockpit_opening_door_01_at_prolonged_stop_when_env_ideal_dry_daytime_probability)
        0.25 * (S.L.ai_pre_cockpit_opening_door_23_at_prolonged_stop_when_env_ideal_dry_daytime_probability)
    0.5 0.5 l0 * + (S.L.ai_pre_cockpit_opening_door_01_at_prolonged_stop_when_env_warm_nighttime_probability)
        0.5 * (S.L.ai_pre_cockpit_opening_door_23_at_prolonged_stop_when_env_warm_dry_nighttime_probability)
    0.7 0.3 l0 * + (S.L.ai_pre_cockpit_opening_door_01_at_prolonged_stop_when_env_warm_daytime_probability)
        0.75 * (S.L.ai_pre_cockpit_opening_door_23_at_prolonged_stop_when_env_warm_dry_daytime_probability)
    0.8 0.2 l0 * + (S.L.ai_pre_cockpit_opening_door_23_at_prolonged_stop_when_env_hot_dry_probability)

'   // Unscheduled stop brake engagement frequency. See ai_pre_cockpit_stop macro.
    0.3 10000 random (M.V.NrSpecRandom) 0.5 * + (S.L.ai_pre_cockpit_unscheduled_stop_brake_usage_frequency)

'   // ----- Driver window usage (see ai_pre_cockpit_driver_window macro) -----

    10000 random (M.V.NrSpecRandom) 0.05 < 0.05 10000 random (M.V.NrSpecRandom) 0.1 * + * s0
        (S.L.ai_pre_cockpit_opening_driver_window_when_env_cold_dry_daytime)
    10000 random (M.V.NrSpecRandom) 0.05 < l0 || 0.05 10000 random (M.V.NrSpecRandom) 0.1 * + l0 max * s0
        (S.L.ai_pre_cockpit_opening_driver_window_when_env_chilly_dry_nighttime)
    10000 random (M.V.NrSpecRandom) 0.2 < l0 && 0.05 10000 random (M.V.NrSpecRandom) 0.1 * + l0 min *
        (S.L.ai_pre_cockpit_opening_driver_window_when_env_chilly_wet_daytime)
    10000 random (M.V.NrSpecRandom) 0.7 < l0 || s1
    {if}
        10000 random (M.V.NrSpecRandom) 0.5 <
        {if}
            0.15 10000 random (M.V.NrSpecRandom) 0.15 * +
        {else}
            0.3 10000 random (M.V.NrSpecRandom) 0.7 * +
        {endif}
        l0 max s1
    {endif}
    l1 s0 (S.L.ai_pre_cockpit_opening_driver_window_when_env_chilly_dry_daytime)
    10000 random (M.V.NrSpecRandom) 0.5 < l0 || 0.3 10000 random (M.V.NrSpecRandom) 0.7 * + l0 max * s0
        (S.L.ai_pre_cockpit_opening_driver_window_when_env_ideal_dry_nighttime)
    10000 random (M.V.NrSpecRandom) 0.25 < l0 && 0.05 10000 random (M.V.NrSpecRandom) 0.15 * + l0 min *
        (S.L.ai_pre_cockpit_opening_driver_window_when_env_ideal_wet)
    10000 random (M.V.NrSpecRandom) 0.75 < l0 || 0.5 10000 random (M.V.NrSpecRandom) 0.5 * + l0 max * s0
        (S.L.ai_pre_cockpit_opening_driver_window_when_env_ideal_dry_daytime)
    0.5 10000 random (M.V.NrSpecRandom) 0.5 * + l0 max s0 (S.L.ai_pre_cockpit_opening_driver_window_when_env_warm_dry)
    10000 random (M.V.NrSpecRandom) 0.1 < 0.1 10000 random (M.V.NrSpecRandom) 0.2 * + *
        (S.L.ai_pre_cockpit_opening_driver_window_when_env_warm_wet)
    10000 random (M.V.NrSpecRandom) 0.25 < s0
    {if}
        10000 random (M.V.NrSpecRandom) 0.75 <
        {if}
            0.15 10000 random (M.V.NrSpecRandom) 0.15 * +
        {else}
            0.3 10000 random (M.V.NrSpecRandom) 0.7 * +
                (L.L.ai_pre_cockpit_opening_driver_window_when_env_warm_dry) min
        {endif}
        s0
    {endif}
    l0 (S.L.ai_pre_cockpit_opening_driver_window_when_env_hot_dry_daytime)
    10000 random (M.V.NrSpecRandom) 0.25 l0 || s1
    {if}
        10000 random (M.V.NrSpecRandom) 0.5 <
        {if}
            0.15 10000 random (M.V.NrSpecRandom) 0.15 * +
        {else}
            0.3 10000 random (M.V.NrSpecRandom) 0.7 * +
        {endif}
        l0 max s1
    {endif}
    l1 s0 (S.L.ai_pre_cockpit_opening_driver_window_when_env_hot_dry_nighttime)

'   // ----- Sun blind usage (see ai_pre_cockpit_sun_blinds macro) -----

    2 10000 random (M.V.NrSpecRandom) 10 * + (S.L.ai_pre_cockpit_sun_blinds_usage_morning_sun_alt_min)
    15 10000 random (M.V.NrSpecRandom) 25 * + (S.L.ai_pre_cockpit_sun_blinds_usage_morning_sun_alt_max)
    -0.5 10000 random (M.V.NrSpecRandom) 0.3 * + s1 (S.L.ai_pre_cockpit_main_sun_blind_usage_min)
    10000 random (M.V.NrSpecRandom) 0.25 < 0.1 10000 random (M.V.NrSpecRandom) 0.25 * + *
        s0 (S.L.ai_pre_cockpit_main_sun_blind_usage_midday_when_env_wet_or_brightness_low) !
    {if}
        l1 (S.L.ai_pre_cockpit_main_sun_blind_usage_midday_when_env_wet_or_brightness_low)
    {endif}
    10000 random (M.V.NrSpecRandom) 0.5 < l0 || 0.15 10000 random (M.V.NrSpecRandom) 0.35 * + l0 max *
        s0 (S.L.ai_pre_cockpit_main_sun_blind_usage_midday) !
    {if}
        l1 (S.L.ai_pre_cockpit_main_sun_blind_usage_midday)
    {endif}
    10000 random (M.V.NrSpecRandom) 0.85 < l0 || 0.25 10000 random (M.V.NrSpecRandom) 0.4 * + l0 max *
        (S.L.ai_pre_cockpit_main_sun_blind_usage_morning_or_midday_when_env_warm) !
    {if}
        l1 (S.L.ai_pre_cockpit_main_sun_blind_usage_morning_or_midday_when_env_warm)
    {endif}
    10000 random (M.V.NrSpecRandom) 0.25 < (L.L.ai_pre_cockpit_main_sun_blind_usage_midday) 0 max &&
        0.15 10000 random (M.V.NrSpecRandom) 0.3 * + * s0 (S.L.ai_pre_cockpit_side_sun_blind_usage_midday)
    10000 random (M.V.NrSpecRandom) 0.5 < l0 || 0.25 10000 random (M.V.NrSpecRandom) 0.4 * + l0 max *
        (S.L.ai_pre_cockpit_side_sun_blind_usage_morning_or_midday_when_env_warm)

'   // ----- Hatch usage (see ai_pre_cockpit_hatches macro) -----

    10000 random (M.V.NrSpecRandom) 0.2 < s0 (S.L.ai_pre_cockpit_opening_hatches_when_env_chilly_dry_daytime)
    10000 random (M.V.NrSpecRandom) 0.2 < l0 || s0 (S.L.ai_pre_cockpit_opening_hatches_when_env_ideal_dry_nighttime)
    10000 random (M.V.NrSpecRandom) 0.5 < l0 || s0 (S.L.ai_pre_cockpit_opening_hatches_when_env_ideal_dry_daytime)
    10000 random (M.V.NrSpecRandom) 0.5 < l0 || s0 (S.L.ai_pre_cockpit_opening_hatches_when_env_warm_dry_nighttime)
    10000 random (M.V.NrSpecRandom) 0.75 < l0 || s0 (S.L.ai_pre_cockpit_opening_hatches_when_env_warm_dry_daytime)
    10000 random (M.V.NrSpecRandom) 0.1 < l0 && (L.L.ai_pre_cockpit_opening_hatches_when_env_warm_dry_nighttime) &&
        s0 (S.L.ai_pre_cockpit_opening_hatches_when_env_hot_dry_nighttime)
    10000 random (M.V.NrSpecRandom) 0.2 < l0 && (S.L.ai_pre_cockpit_opening_hatches_when_env_hot_dry_daytime)

'   // ----- Passenger window usage by driver (see ai_pre_cockpit_passenger_windows macro) -----

    10000 random (M.V.NrSpecRandom) 0.7 <
    {if}
        2
    {else}
        10000 random (M.V.NrSpecRandom) 0.7 <
        {if}
            3
        {else}
            1
        {endif}
    {endif}
    (S.L.ai_pre_cockpit_passenger_window_usage_scope)

    0 s1 s2 s3 s4
    10000 random (M.V.NrSpecRandom) 0.2 < s0
    {if}
        0.2 (S.L.r10) 0.6 (S.L.r11) 0.1 (S.L.r12) 0.2 (S.L.r13)
            (M.L.ai_pre_cockpit_profile_init_choose_initial_passenger_windows)
    {endif}
    l1 (S.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_chilly_dry_daytime)
    l2 (S.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_chilly_dry_daytime)
    l3 (S.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_chilly_dry_daytime)
    l4 (S.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_chilly_dry_daytime)
    10000 random (M.V.NrSpecRandom) 0.2 < l0 || s0
    {if}
        l1 l2 || l3 || l4 ||
        {if}
            0.4 (S.L.r10) 0.25 (S.L.r11) 0.2 (S.L.r12)
                (M.L.ai_pre_cockpit_profile_init_choose_subsequent_passenger_windows)
        {else}
            0.2 (S.L.r10) 0.6 (S.L.r11) 0.25 (S.L.r12) 0.4 (S.L.r13)
                (M.L.ai_pre_cockpit_profile_init_choose_initial_passenger_windows)
        {endif}
    {endif}
    l1 (S.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_ideal_dry_nighttime)
    l2 (S.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_ideal_dry_nighttime)
    l3 (S.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_ideal_dry_nighttime)
    l4 (S.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_ideal_dry_nighttime)
    10000 random (M.V.NrSpecRandom) 0.5 < l0 || s0
    {if}
        l1 l2 || l3 || l4 ||
        {if}
            0.5 (S.L.r10) 0.5 (S.L.r11) (S.L.r12) (M.L.ai_pre_cockpit_profile_init_choose_subsequent_passenger_windows)
        {else}
            0.5 (S.L.r10) (S.L.r11) (S.L.r12) (S.L.r13)
                (M.L.ai_pre_cockpit_profile_init_choose_initial_passenger_windows)
        {endif}
    {endif}
    l1 (S.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_ideal_dry_daytime)
    l2 (S.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_ideal_dry_daytime)
    l3 (S.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_ideal_dry_daytime)
    l4 (S.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_ideal_dry_daytime)
    10000 random (M.V.NrSpecRandom) 0.5 < l0 || s0 s1
        (S.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_warm_dry_nighttime)
        (S.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_warm_dry_nighttime)
        (S.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_warm_dry_nighttime)
        (S.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_warm_dry_nighttime)
    10000 random (M.V.NrSpecRandom) 0.75 < l0 || s0
        (S.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_warm_dry_daytime)
        (S.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_warm_dry_daytime)
        (S.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_warm_dry_daytime)
        (S.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_warm_dry_daytime)
    10000 random (M.V.NrSpecRandom) 0.1 < l0 && l1 && s0
        (S.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_hot_dry_nighttime)
        (S.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_hot_dry_nighttime)
        (S.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_hot_dry_nighttime)
        (S.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_hot_dry_nighttime)
    10000 random (M.V.NrSpecRandom) 0.2 < l0 &&
        (S.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_hot_dry_daytime)
        (S.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_hot_dry_daytime)
        (S.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_hot_dry_daytime)
        (S.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_hot_dry_daytime)

'   // ----- Heating and cooling usage (see ai_pre_cockpit_heating_cooling macro) -----

    0.4 10000 random (M.V.NrSpecRandom) 0.6 * + (S.L.ai_pre_cockpit_driver_ac_heating_temperature_setting)
    10000 random (M.V.NrSpecRandom) 0.4 * (S.L.ai_pre_cockpit_driver_ac_cooling_temperature_setting)
    0.1 10000 random (M.V.NrSpecRandom) 0.5 * + (S.L.ai_pre_cockpit_driver_ac_heating_fan_setting)
    10000 random (M.V.NrSpecRandom) 0.3 <
    {if}
        0.2 10000 random (M.V.NrSpecRandom) 0.6 * +
    {else}
        0
    {endif}
    (S.L.ai_pre_cockpit_driver_ac_neutral_fan_setting)
    0.1 10000 random (M.V.NrSpecRandom) 0.5 * + (S.L.ai_pre_cockpit_driver_ac_cooling_fan_setting)
    10000 random (M.V.NrSpecRandom) 0.5 < (S.L.ai_pre_cockpit_ac_used_for_heating_when_env_chilly)

'   // ----- Wiper usage (see ai_pre_cockpit_wiper macro) -----

    0.2 10000 random (M.V.NrSpecRandom) 0.8 * + s0
    10000 random (M.V.NrSpecRandom) 0.25 <
    {if}
        l0 0.2 10000 random (M.V.NrSpecRandom) 0.8 * + + s0
    {endif}
    l0 (S.L.ai_pre_cockpit_wiper_usage_overall_precipitation_tolerance)

    0.005 10000 random (M.V.NrSpecRandom) 0.045 * l0 * + (S.L.ai_pre_cockpit_wiper_usage_very_light_precip_rate_max)
    0.05 10000 random (M.V.NrSpecRandom) 0.25 * l0 * + (S.L.ai_pre_cockpit_wiper_usage_light_precip_rate_max)
    0.2 10000 random (M.V.NrSpecRandom) 0.4 * l0 * + (S.L.ai_pre_cockpit_wiper_usage_moderate_precip_rate_max)
    -10 10000 random (M.V.NrSpecRandom) 15 * + (S.L.ai_pre_cockpit_wiper_usage_nighttime_sun_alt_max)
    1 10000 random (M.V.NrSpecRandom) 0.3 * -
        (S.L.ai_pre_cockpit_wiper_usage_nighttime_perceived_precip_rate_reduction_factor)
    10000 random (M.V.NrSpecRandom) 0.1 <
    {if}
        2
    {else}
        1
    {endif}
    (S.L.ai_pre_cockpit_wiper_usage_scope)

'   // ----- Indicator usage (see ai_pre_cockpit_indicators macro) -----

    10000 random (M.V.NrSpecRandom) 0.85 <
    {if}
        0.97 s0 0.03 s1
    {else}
        0.9 s0 0.1 s1
    {endif}
    l0 10000 random (M.V.NrSpecRandom) l1 * + 0.99 min s0 (S.L.ai_pre_cockpit_indicator_pc_factor_low)
    1 l0 - s1
    10000 random (M.V.NrSpecRandom) 0.1 <
    {if}
        l1 0.75 * s1
    {endif}
    l0 10000 random (M.V.NrSpecRandom) l1 * + 0.99 min s0 (S.L.ai_pre_cockpit_indicator_pc_factor_moderate)
    1 l0 - s1
    10000 random (M.V.NrSpecRandom) 0.05 <
    {if}
        l1 0.85 * s1
    {endif}
    l0 10000 random (M.V.NrSpecRandom) l1 * + 0.99 min (S.L.ai_pre_cockpit_indicator_pc_factor_high)
{end}

{macro:ai_pre_cockpit_profile_init_choose_initial_passenger_windows}
    10000 random (M.V.NrSpecRandom) (L.L.r10) <
    {if}
        10000 random (M.V.NrSpecRandom) (L.L.r11) <
        {if}
            1 s1
        {else}
            1 s2
        {endif}
    {else}
        10000 random (M.V.NrSpecRandom) (L.L.r11) <
        {if}
            1 s3
        {else}
            1 s4
        {endif}
    {endif}

    10000 random (M.V.NrSpecRandom) (L.L.r12) <
    {if}
        10000 random (M.V.NrSpecRandom) (L.L.r13) <
        {if}
            l1 l4 ||
            {if}
                1 s1 s4
            {else}
                1 s2 s3
            {endif}
        {else}
            l1 l2 ||
            {if}
                1 s1 s2
            {else}
                1 s3 s4
            {endif}
        {endif}
    {endif}
{end}

{macro:ai_pre_cockpit_profile_init_choose_subsequent_passenger_windows}
    10000 random (M.V.NrSpecRandom) (L.L.r10) <
    {if}
        10000 random (M.V.NrSpecRandom) (L.L.r11) < l4 || s1
        10000 random (M.V.NrSpecRandom) (L.L.r11) < l3 || s2
        10000 random (M.V.NrSpecRandom) (L.L.r11) < l2 || s3
        10000 random (M.V.NrSpecRandom) (L.L.r11) < l1 || s4
    {else}
        10000 random (M.V.NrSpecRandom) (L.L.r12) < l2 || s1
        10000 random (M.V.NrSpecRandom) (L.L.r12) < l1 || s2
        10000 random (M.V.NrSpecRandom) (L.L.r12) < l4 || s3
        10000 random (M.V.NrSpecRandom) (L.L.r12) < l3 || s4
    {endif}
{end}

{macro:ai_pre_cockpit_env}
'   // ----- Generic perception for everything _except_ sun blinds and wipers -----

'   // Determine current temperature range
    0 s1 s2 s3 s4 s5 s6 s7

    (L.S.Weather_Temperature) s0 (L.L.ai_pre_cockpit_env_coldest_temperature_max) <=
    {if}
'       // Coldest
        1 s1
    {else}
        l0 (L.L.ai_pre_cockpit_env_cold_temperature_max) <=
        {if}
'           // Cold
            1 s2
            2
        {else}
            l0 (L.L.ai_pre_cockpit_env_chilly_temperature_max) <=
            {if}
'               // Chilly
                1 s3
                3
            {else}
                l0 (L.L.ai_pre_cockpit_env_ideal_temperature_max) <=
                {if}
'                   // Ideal
                    1 s4
                    4
                {else}
                    l0 (L.L.ai_pre_cockpit_env_warm_temperature_max) <=
                    {if}
'                       // Warm
                        1 s5
                        5
                    {else}
                        l0 (L.L.ai_pre_cockpit_env_hot_temperature_max) <=
                        {if}
'                           // Hot
                            1 s6
                            6
                        {else}
'                           // Hottest
                            1 s7
                            7
                        {endif}
                    {endif}
                {endif}
            {endif}
        {endif}
    {endif}
    100 * s0

'   // Determine whether, for all purposes _besides_ wipers (for which a more granular "wetness" perception is
'   // employed), env is currently "dry" or "wet".
    (L.L.PrecipRate) 0 max (L.L.ai_pre_cockpit_env_dry_precip_rate_max) >
    {if}
'       // Wet
        l0 10 + s0
    {endif}
'   // Dry, otherwise

'   // Determine whether, for all purposes _besides_ wipers _and_ sun blinds, it is currently "day-" or "nighttime".
    (L.S.SunAlt) (L.L.ai_pre_cockpit_env_nighttime_sun_alt_max) <=
    {if}
'       // Nighttime
        l0 1 + s0
    {endif}
'   // Daytime, otherwise

    l0 (S.L.ai_pre_cockpit_env_perception_target)

    l0 100 % 10 >= (S.L.r10)
    l0 10 % 1 = (S.L.r11)

    (L.L.ai_pre_cockpit_initialized) 5 <
    {if}
'       // Initialization: Instantly adopt the new conditions
        (M.L.ai_pre_cockpit_env_refresh)
    {else}
        l0 (L.L.ai_pre_cockpit_env_perception) (S.L.r12) = !
        {if}
'           // Conditions changed post-initialization: Determine change "directionality" (whether the new conditions
'           // are better or worse than the previous ones). "Worse" transitions occur sooner than "better" ones.

'           // Criteria (assuming at least one of the temperature, wetness, and day-/nighttime factors changed):
'           // - If it was previously dry and it is now wet, then the transition is a "worse-than-before" one.
'           // - Otherwise, if the temperature before was "more comfortable than" now, then the transition is a
'           //   "worse-than-before" one.
'           //   The "more-/less-comfortable-than" operator works as follows:
'           //   * "coldest" is equivalent to "hottest", in terms of (lack of) comfort, while inferior to all other
'           //     temperature ranges.
'           //   * "cold" is equivalent to "hot"; superior to "coldest" and "hottest"; and inferior to the remainder.
'           //   * "chilly" is equivalent to "warm"; superior to "coldest", "cold", "hot", and "hottest"; and inferior
'           //     to "ideal".
'           //   * "ideal" is superior to all temperature ranges.
'           //   * ...and the same applies symmetrically for the other half of the spectrum ("warm", "hot", and
'           //     "hottest").
'           // - Otherwise, if the temperature did not change, it is the day-/nighttime factor that changed. If the
'           //   temperature is up to, and including, the "ideal" range, but not above, and it was previously "day"
'           //   and it is now "night", then the transition is a "worse-than-before" one. Otherwise, if the temperature
'           //   is above "ideal", and it was previously "night", and it is now "day", then the transition is likewise
'           //   a "worse-than-before" one.
'           // - Otherwise the transition is a "better-than-before" one.

            (L.L.ai_pre_cockpit_env_perception_wet) (L.L.r10) >=
            {if}
                l0 (L.L.r12) = (S.L.r13) !
                {if}
                    (L.L.ai_pre_cockpit_env_perception_coldest) l0 700 < && (L.L.ai_pre_cockpit_env_perception_cold)
                        l0 300 >= l0 500 < && && || (L.L.ai_pre_cockpit_env_perception_chilly)
                        (L.L.ai_pre_cockpit_env_perception_warm) || l0 400 >= l0 500 < && && ||
                        (L.L.ai_pre_cockpit_env_perception_hot) l0 400 >= l0 600 < && && ||
                        (L.L.ai_pre_cockpit_env_perception_hottest) l0 200 >= && || 2 * (S.L.r13)
                {endif}
                (L.L.r13) 2 =
                {if}
                    1
                {else}
                    (L.L.r13)
                    {if}
                        l0 500 < (L.L.ai_pre_cockpit_env_perception_nighttime) (L.L.r11) > && l0 500 >=
                            (L.L.ai_pre_cockpit_env_perception_nighttime) (L.L.r11) < && ||
                    {else}
                        0
                    {endif}
                {endif}
            {else}
                0
            {endif}
            ! {if}
                (L.L.ai_pre_cockpit_env_perception_negative_adjustment_timer)
                {if}
                    (L.L.ai_pre_cockpit_env_perception_negative_adjustment_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                        (S.L.ai_pre_cockpit_env_perception_negative_adjustment_timer)
                {endif}
                (L.L.ai_pre_cockpit_env_perception_negative_adjustment_timer) !
                {if}
                    (M.L.ai_pre_cockpit_env_refresh)
                {else}
                    (L.L.ai_pre_cockpit_env_perception_positive_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_env_perception_positive_adjustment_timer)
                {endif}
            {else}
                (L.L.ai_pre_cockpit_env_perception_positive_adjustment_timer)
                {if}
                    (L.L.ai_pre_cockpit_env_perception_positive_adjustment_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                        (S.L.ai_pre_cockpit_env_perception_positive_adjustment_timer)
                {endif}
                (L.L.ai_pre_cockpit_env_perception_positive_adjustment_timer) !
                {if}
                    (M.L.ai_pre_cockpit_env_refresh)
                {else}
                    (L.L.ai_pre_cockpit_env_perception_negative_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_env_perception_negative_adjustment_timer)
                {endif}
            {endif}
        {else}
'           // Conditions unchanged
            (M.L.ai_pre_cockpit_env_reset)
        {endif}
    {endif}

'   // ----- Perception specifically for sun blind usage -----

    (L.S.SunAlt) (L.L.ai_pre_cockpit_sun_blinds_usage_morning_sun_alt_min) >
    {if}
        (L.S.SunAlt) (L.L.ai_pre_cockpit_sun_blinds_usage_morning_sun_alt_max) >
        {if}
'           // Midday
            (L.L.r10) (L.L.lights_ai_env_brightness) 0.8 <= ||
            {if}
'               // Cloudy or wet -> "slightly-dragged" conditions
                1
            {else}
'               // Clear
                l0 500 >=
                {if}
'                   // Above-ideal temperature -> "maximally-dragged" conditions
                    3
                {else}
'                   // (Below-)ideal temperature -> "moderately-dragged" conditions
                    2
                {endif}
            {endif}
        {else}
'           // Morning
            (L.L.r10) ! (L.L.lights_ai_env_brightness) 0.8 > &&
            {if}
'               // Dry and clear -> "maximally-dragged" conditions
                3
            {else}
'               // Cloudy or wet -> "not-retracted" conditions
                0
            {endif}
        {endif}
    {else}
'       // Night -> "not-retracted" conditions
        0
    {endif}
    (S.L.ai_pre_cockpit_env_perception_sun_blinds_target) s0

    (L.L.ai_pre_cockpit_initialized) 5 <
    {if}
'       // Initialization: Instantly adopt the new conditions
        (M.L.ai_pre_cockpit_env_sun_blinds_refresh)
    {else}
        l0 (L.L.ai_pre_cockpit_env_perception_sun_blinds) s1 = !
        {if}
'           // Conditions changed post-initialization: Determine change "directionality" (whether the new conditions
'           // are better or worse than the previous ones). "Worse" transitions occur sooner than "better" ones, i.e.,
'           // conditions mandating (further) sun blind dragging are registered sooner than their complement.
            l1 l0 <
            {if}
                (L.L.ai_pre_cockpit_env_perception_sun_blinds_negative_adjustment_timer) s2
                {if}
                    l2 (L.L.ai_pre_cockpit_ai_timegap) - 0 max s2
                        (S.L.ai_pre_cockpit_env_perception_sun_blinds_negative_adjustment_timer)
                {endif}
                l2 !
                {if}
                    (M.L.ai_pre_cockpit_env_sun_blinds_refresh)
                {else}
                    (L.L.ai_pre_cockpit_env_perception_sun_blinds_positive_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_env_perception_sun_blinds_positive_adjustment_timer)
                {endif}
            {else}
                (L.L.ai_pre_cockpit_env_perception_sun_blinds_positive_adjustment_timer) s2
                {if}
                    l2 (L.L.ai_pre_cockpit_ai_timegap) - 0 max s2
                        (S.L.ai_pre_cockpit_env_perception_sun_blinds_positive_adjustment_timer)
                {endif}
                l2 !
                {if}
                    (M.L.ai_pre_cockpit_env_sun_blinds_refresh)
                {else}
                    (L.L.ai_pre_cockpit_env_perception_sun_blinds_negative_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_env_perception_sun_blinds_negative_adjustment_timer)
                {endif}
            {endif}
        {else}
'           // Conditions unchanged
            (M.L.ai_pre_cockpit_env_sun_blinds_reset)
        {endif}
    {endif}

'   // ----- Perception specifically for wiper usage -----

    (L.L.PrecipRate) 0 max s0
    (L.S.SunAlt) (L.L.ai_pre_cockpit_wiper_usage_nighttime_sun_alt_max) <=
        (L.L.lights_ai_env_brightness) 0.5 < ||
    {if}
'       // Precipitation perceived as "less intense" at times of low brightness.
        l0 (L.L.ai_pre_cockpit_wiper_usage_nighttime_perceived_precip_rate_reduction_factor) * s0
    {endif}
    l0 (L.L.ai_pre_cockpit_wiper_usage_very_light_precip_rate_max) <
    {if}
'       // "Off" or "manual-on/off" conditions (disambiguated in ai_pre_cockpit_wiper macro)
        0
    {else}
        l0 (L.L.ai_pre_cockpit_wiper_usage_light_precip_rate_max) <
        {if}
'           // "Interval" conditions
            1
        {else}
            l0 (L.L.ai_pre_cockpit_wiper_usage_moderate_precip_rate_max) <
            {if}
'               // "On" conditions
                2
            {else}
'               // "On" or "fast" conditions (depending on preference)
                3
            {endif}
        {endif}
    {endif}
    (S.L.ai_pre_cockpit_env_perception_wiper_target) s0

    (L.L.ai_pre_cockpit_initialized) 5 <
    {if}
'       // Initialization: Instantly adopt the new conditions
        (M.L.ai_pre_cockpit_env_wiper_refresh)
    {else}
        l0 (L.L.ai_pre_cockpit_env_perception_wiper) s1 = !
        {if}
'           // Conditions changed post-initialization: Determine change "directionality" (whether the new conditions
'           // are better or worse than the previous ones). "Worse" transitions occur sooner than "better" ones, i.e.,
'           // conditions mandating wiper level increase are registered sooner than their complement.
            l1 l0 <
            {if}
                (L.L.ai_pre_cockpit_env_perception_wiper_negative_adjustment_timer) s2
                {if}
                    l2 (L.L.ai_pre_cockpit_ai_timegap) - 0 max s2
                        (S.L.ai_pre_cockpit_env_perception_wiper_negative_adjustment_timer)
                {endif}
                l2 !
                {if}
                    (M.L.ai_pre_cockpit_env_wiper_refresh)
                {else}
                    (L.L.ai_pre_cockpit_env_perception_wiper_positive_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_env_perception_wiper_positive_adjustment_timer)
                {endif}
            {else}
                (L.L.ai_pre_cockpit_env_perception_wiper_positive_adjustment_timer) s2
                {if}
                    l2 (L.L.ai_pre_cockpit_ai_timegap) - 0 max s2
                        (S.L.ai_pre_cockpit_env_perception_wiper_positive_adjustment_timer)
                {endif}
                l2 !
                {if}
                    (M.L.ai_pre_cockpit_env_wiper_refresh)
                {else}
                    (L.L.ai_pre_cockpit_env_perception_wiper_negative_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_env_perception_wiper_negative_adjustment_timer)
                {endif}
            {endif}
        {else}
'           // Conditions unchanged
            (M.L.ai_pre_cockpit_env_wiper_reset)
        {endif}
    {endif}
{end}

{macro:ai_pre_cockpit_env_refresh}
    (L.L.ai_pre_cockpit_initialized) 5 >=
    {if}
        1 (S.L.ai_pre_cockpit_env_perception_changed)
        (L.L.r12) 100 / trunc l0 100 / trunc > (S.L.ai_pre_cockpit_env_perception_colder_than_before)
        (L.L.ai_pre_cockpit_env_perception_wet) (L.L.r10) < (S.L.ai_pre_cockpit_env_perception_wetter_than_before)
        (L.L.ai_pre_cockpit_env_perception_nighttime) (L.L.r11) <
            (S.L.ai_pre_cockpit_env_perception_darker_than_before)
    {else}
        0 (S.L.ai_pre_cockpit_env_perception_changed) (S.L.ai_pre_cockpit_env_perception_colder_than_before)
            (S.L.ai_pre_cockpit_env_perception_wetter_than_before)
            (S.L.ai_pre_cockpit_env_perception_darker_than_before)
    {endif}
    (L.L.ai_pre_cockpit_env_perception_target) (S.L.ai_pre_cockpit_env_perception)
    l1 (S.L.ai_pre_cockpit_env_perception_coldest)
    l2 (S.L.ai_pre_cockpit_env_perception_cold)
    l3 (S.L.ai_pre_cockpit_env_perception_chilly)
    l4 (S.L.ai_pre_cockpit_env_perception_ideal)
    l5 (S.L.ai_pre_cockpit_env_perception_warm)
    l6 (S.L.ai_pre_cockpit_env_perception_hot)
    l7 (S.L.ai_pre_cockpit_env_perception_hottest)
    (L.L.r10) (S.L.ai_pre_cockpit_env_perception_wet)
    (L.L.r11) (S.L.ai_pre_cockpit_env_perception_nighttime)
    10 10000 random 10000 / 50 * + (S.L.ai_pre_cockpit_env_perception_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_negative_adjustment_timer) 30 10000 random 10000 / 300 * + +
        (S.L.ai_pre_cockpit_env_perception_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_positive_adjustment_timer)
{end}

{macro:ai_pre_cockpit_env_reset}
    0 (S.L.ai_pre_cockpit_env_perception_changed)
    (L.L.ai_pre_cockpit_env_perception_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_negative_adjustment_timer)
    (L.L.ai_pre_cockpit_env_perception_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_positive_adjustment_timer)
    0 (S.L.ai_pre_cockpit_env_perception_colder_than_before) (S.L.ai_pre_cockpit_env_perception_wetter_than_before)
        (S.L.ai_pre_cockpit_env_perception_darker_than_before)
{end}

{macro:ai_pre_cockpit_env_sun_blinds_refresh}
    (L.L.ai_pre_cockpit_initialized) 5 >= (S.L.ai_pre_cockpit_env_perception_sun_blinds_changed)
    (L.L.ai_pre_cockpit_env_perception_sun_blinds_target) (S.L.ai_pre_cockpit_env_perception_sun_blinds)
    5 10000 random 10000 / 5 * + (S.L.ai_pre_cockpit_env_perception_sun_blinds_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_sun_blinds_negative_adjustment_timer) 30 10000 random 10000 / 300 * + +
        (S.L.ai_pre_cockpit_env_perception_sun_blinds_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_sun_blinds_positive_adjustment_timer)
{end}

{macro:ai_pre_cockpit_env_sun_blinds_reset}
    0 (S.L.ai_pre_cockpit_env_perception_sun_blinds_changed)
    (L.L.ai_pre_cockpit_env_perception_sun_blinds_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_sun_blinds_negative_adjustment_timer)
    (L.L.ai_pre_cockpit_env_perception_sun_blinds_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_sun_blinds_positive_adjustment_timer)
{end}

{macro:ai_pre_cockpit_env_wiper_refresh}
    (L.L.ai_pre_cockpit_initialized) 5 >= (S.L.ai_pre_cockpit_env_perception_wiper_changed)
    (L.L.ai_pre_cockpit_env_perception_wiper_target) (S.L.ai_pre_cockpit_env_perception_wiper)
    10000 random 10000 / 5 * (S.L.ai_pre_cockpit_env_perception_wiper_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_wiper_negative_adjustment_timer) 5 10000 random 10000 / 55 * + +
        (S.L.ai_pre_cockpit_env_perception_wiper_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_wiper_positive_adjustment_timer)
{end}

{macro:ai_pre_cockpit_env_wiper_reset}
    0 (S.L.ai_pre_cockpit_env_perception_wiper_changed)
    (L.L.ai_pre_cockpit_env_perception_wiper_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_wiper_negative_adjustment_timer)
    (L.L.ai_pre_cockpit_env_perception_wiper_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_env_perception_wiper_positive_adjustment_timer)
{end}

'------------------------------------------------------------------------------
' 2. Passenger group profile, environmental perception, and consequent actions
'    (passenger window usage)
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_passengers}
'   // A passenger group comprises one or more occupied passengercabin.cfg seats / standing positions located close to
'   // each of the folding passenger windows. The members of a group are the passengers occupying its seats. They share
'   // an agreed-upon environmental perception, established similarly to how the driver's perception is established,
'   // and rely on that perception for adjusting the state of their respective window.
'   // Initially a group is empty/nonexistent. When the first AI passenger arrives and occupies a seat, they form a
'   // group. Passengers arriving subsequently either "attach" themselves to preexisting groups, or cause the group to
'   // re-form based on the now-present individuals (that is, the members of the previous one, plus the newcomer), as
'   // explained below.
'   // When a group is formed, two noteworthy parameters are assigned to it: foundation weight and stability.
'   // The foundation weight factor depends on the group's founding member count, where each member (seat) has an
'   // individual, static weight, depending on its proximity to the window; that is, members close to the window have a
'   // greater weight. The foundation weight factor influences how "radical", i.e., "stubborn", i.e., how much against
'   // common sense or politeness the group's behavior may be.
'   // The stability factor is random and represents the group's internal consistency. Groups with high consistency are
'   // less likely to disband / re-form when some of its founding passengers disembark, and/or others join.
'   // Each group also has an effective weight, describing the same notion as the foundation weight, but on a continual
'   // basis (which and how many seats are occupied _now_); hence its value will fluctuate from the foundation weight's
'   // value, initially, to lower or greater values, as passengers come and go subsequently. The effective weight
'   // affects the group's tolerance to change -- the greater the value, the more promptly the group will adjust their
'   // window to their liking.

'   // XXX: When the vehicle is unfocused, OMSI appears not to communicate seat occupation status to scripts, hence
'   //      window adjustment by AI passengers cannot be carried out then.

'   // XXX: Currently certain standing places contribute to both opposing (windows') groups. The occupant of such a
'   //      seat, particularly when they are the sole member of both groups, might then act in a self-contradicting
'   //      manner, due to having two independent modes of perception, one per group; i.e., they might, under the
'   //      same conditions, choose to open the one window and close the other. We should somehow ensure the perception
'   //      is the same for both groups then, but figuring out how is not entirely trivial, particularly when there are
'   //      multiple memberships -- and perception ultimately depends on the group, not the individual.

'   // ----- Group 1-L -----

    1 (M.V.GetHumanCountOnSeat) 3 * (S.L.ai_pre_cockpit_passenger_group_1_l_member_1)
        2 (M.V.GetHumanCountOnSeat) 1.5 * (S.L.ai_pre_cockpit_passenger_group_1_l_member_2) +
        4 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_1_l_member_3) +
        5 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_1_l_member_4) +
        7 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_1_l_member_5) +
        8 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_1_l_member_6) +
        32 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_1_l_member_7) +
        33 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_1_l_member_8) +
        36 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_1_l_member_9) +
        (S.L.ai_pre_cockpit_passenger_group_1_l_weight_next)
    {if}
        (L.L.ai_pre_cockpit_passenger_group_1_l_weight) !
        {if}
'           // New group formation on first passenger arrival
            (M.L.ai_pre_cockpit_passenger_group_1_l_foundation)
        {else}
'           // Preexisting group - evaluate stability
            (L.L.ai_pre_cockpit_passenger_group_1_l_member_1) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_l_founder_1)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_l_member_2) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_l_founder_2)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_l_member_3) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_l_founder_3)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_l_member_4) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_l_founder_4)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_l_member_5) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_l_founder_5)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_l_member_6) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_l_founder_6)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_l_member_7) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_l_founder_7)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_l_member_8) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_l_founder_8)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_l_member_9) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_l_founder_9)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_l_founder_1) (L.L.ai_pre_cockpit_passenger_group_1_l_founder_2) +
                (L.L.ai_pre_cockpit_passenger_group_1_l_founder_3) +
                (L.L.ai_pre_cockpit_passenger_group_1_l_founder_4) +
                (L.L.ai_pre_cockpit_passenger_group_1_l_founder_5) +
                (L.L.ai_pre_cockpit_passenger_group_1_l_founder_6) +
                (L.L.ai_pre_cockpit_passenger_group_1_l_founder_7) +
                (L.L.ai_pre_cockpit_passenger_group_1_l_founder_8) +
                (L.L.ai_pre_cockpit_passenger_group_1_l_founder_9) +
                (L.L.ai_pre_cockpit_passenger_group_1_l_foundation_weight)
                (L.L.ai_pre_cockpit_passenger_group_1_l_stability_factor) / <=
                (L.L.ai_pre_cockpit_passenger_group_1_l_weight_next)
                (L.L.ai_pre_cockpit_passenger_group_1_l_foundation_weight)
                (L.L.ai_pre_cockpit_passenger_group_1_l_stability_factor) * >= ||
            {if}
'               // When too many of its founders have left, or too many newcomers have joined, the group dissolves and
'               // instantly re-forms. The perception of the new group will likely differ from its predecessor's.
                0 (S.L.ai_pre_cockpit_passenger_group_1_l_weight)
                (M.L.ai_pre_cockpit_passenger_group_1_l_foundation)
            {endif}
        {endif}
'       // Actualize group perception
        (M.L.ai_pre_cockpit_passenger_group_1_l_env)
        (L.L.ai_pre_cockpit_passenger_group_1_l_weight_next) (S.L.ai_pre_cockpit_passenger_group_1_l_weight)
        (M.L.ai_pre_cockpit_passenger_group_1_l_window)
    {else}
'       // No group because no seats occupied
        0 (S.L.ai_pre_cockpit_passenger_group_1_l_weight)
        (L.L.cp_passenger_window_1_l) (S.L.ai_pre_cockpit_passenger_group_1_l_window_target)
        -1 (S.L.ai_pre_cockpit_passenger_group_1_l_window_timer)
    {endif}

'   // ----- Group 1-R -----

    3 (M.V.GetHumanCountOnSeat) 3 * (S.L.ai_pre_cockpit_passenger_group_1_r_member_1)
        6 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_1_r_member_2) +
        9 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_1_r_member_3) +
        32 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_1_r_member_4) +
        33 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_1_r_member_5) +
        36 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_1_r_member_6) +
        (S.L.ai_pre_cockpit_passenger_group_1_r_weight_next)
    {if}
        (L.L.ai_pre_cockpit_passenger_group_1_r_weight) !
        {if}
            (M.L.ai_pre_cockpit_passenger_group_1_r_foundation)
        {else}
            (L.L.ai_pre_cockpit_passenger_group_1_r_member_1) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_r_founder_1)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_r_member_2) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_r_founder_2)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_r_member_3) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_r_founder_3)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_r_member_4) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_r_founder_4)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_r_member_5) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_r_founder_5)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_r_member_6) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_r_founder_6)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_1_r_founder_1) (L.L.ai_pre_cockpit_passenger_group_1_r_founder_2) +
                (L.L.ai_pre_cockpit_passenger_group_1_r_founder_3) +
                (L.L.ai_pre_cockpit_passenger_group_1_r_founder_4) +
                (L.L.ai_pre_cockpit_passenger_group_1_r_founder_5) +
                (L.L.ai_pre_cockpit_passenger_group_1_r_founder_6) +
                (L.L.ai_pre_cockpit_passenger_group_1_r_foundation_weight)
                (L.L.ai_pre_cockpit_passenger_group_1_r_stability_factor) / <=
                (L.L.ai_pre_cockpit_passenger_group_1_r_weight_next)
                (L.L.ai_pre_cockpit_passenger_group_1_r_foundation_weight)
                (L.L.ai_pre_cockpit_passenger_group_1_r_stability_factor) * >= ||
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_1_r_weight)
                (M.L.ai_pre_cockpit_passenger_group_1_r_foundation)
            {endif}
        {endif}
        (M.L.ai_pre_cockpit_passenger_group_1_r_env)
        (L.L.ai_pre_cockpit_passenger_group_1_r_weight_next) (S.L.ai_pre_cockpit_passenger_group_1_r_weight)
        (M.L.ai_pre_cockpit_passenger_group_1_r_window)
    {else}
        0 (S.L.ai_pre_cockpit_passenger_group_1_r_weight)
        (L.L.cp_passenger_window_1_r) (S.L.ai_pre_cockpit_passenger_group_1_r_window_target)
        -1 (S.L.ai_pre_cockpit_passenger_group_1_r_window_timer)
    {endif}

'   // ----- Group 2-L -----

    16 (M.V.GetHumanCountOnSeat) 1.5 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_1)
        17 (M.V.GetHumanCountOnSeat) 3 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_2) +
        20 (M.V.GetHumanCountOnSeat) 1.5 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_3) +
        21 (M.V.GetHumanCountOnSeat) 3 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_4) +
        26 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_2_l_member_5) +
        27 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_2_l_member_6) +
        28 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_2_l_member_7) +
        42 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_8) +
        45 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_9) +
        48 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_10) +
        50 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_11) +
        51 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_12) +
        52 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_13) +
        53 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_14) +
        54 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_l_member_15) +
        (S.L.ai_pre_cockpit_passenger_group_2_l_weight_next)
    {if}
        (L.L.ai_pre_cockpit_passenger_group_2_l_weight) !
        {if}
            (M.L.ai_pre_cockpit_passenger_group_2_l_foundation)
        {else}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_1) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_1)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_2) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_2)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_3) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_3)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_4) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_4)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_5) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_5)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_6) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_6)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_7) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_7)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_8) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_8)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_9) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_9)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_10) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_10)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_11) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_11)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_12) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_12)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_13) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_13)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_14) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_14)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_member_15) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_founder_15)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_l_founder_1) (L.L.ai_pre_cockpit_passenger_group_2_l_founder_2) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_3) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_4) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_5) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_6) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_7) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_8) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_9) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_10) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_11) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_12) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_13) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_14) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_founder_15) +
                (L.L.ai_pre_cockpit_passenger_group_2_l_foundation_weight)
                (L.L.ai_pre_cockpit_passenger_group_2_l_stability_factor) / <=
                (L.L.ai_pre_cockpit_passenger_group_2_l_weight_next)
                (L.L.ai_pre_cockpit_passenger_group_2_l_foundation_weight)
                (L.L.ai_pre_cockpit_passenger_group_2_l_stability_factor) * >= ||
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_l_weight)
                (M.L.ai_pre_cockpit_passenger_group_2_l_foundation)
            {endif}
        {endif}
        (M.L.ai_pre_cockpit_passenger_group_2_l_env)
        (L.L.ai_pre_cockpit_passenger_group_2_l_weight_next) (S.L.ai_pre_cockpit_passenger_group_2_l_weight)
        (M.L.ai_pre_cockpit_passenger_group_2_l_window)
    {else}
        0 (S.L.ai_pre_cockpit_passenger_group_2_l_weight)
        (L.L.cp_passenger_window_2_l) (S.L.ai_pre_cockpit_passenger_group_2_l_window_target)
        -1 (S.L.ai_pre_cockpit_passenger_group_2_l_window_timer)
    {endif}

'   // ----- Group 2-R -----

    14 (M.V.GetHumanCountOnSeat) 1.5 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_1)
        15 (M.V.GetHumanCountOnSeat) 3 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_2) +
        18 (M.V.GetHumanCountOnSeat) 1.5 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_3) +
        19 (M.V.GetHumanCountOnSeat) 3 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_4) +
        29 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_2_r_member_5) +
        30 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_2_r_member_6) +
        31 (M.V.GetHumanCountOnSeat) (S.L.ai_pre_cockpit_passenger_group_2_r_member_7) +
        42 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_8) +
        45 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_9) +
        48 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_10) +
        50 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_11) +
        51 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_12) +
        52 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_13) +
        53 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_14) +
        54 (M.V.GetHumanCountOnSeat) 0.5 * (S.L.ai_pre_cockpit_passenger_group_2_r_member_15) +
        (S.L.ai_pre_cockpit_passenger_group_2_r_weight_next)
    {if}
        (L.L.ai_pre_cockpit_passenger_group_2_r_weight) !
        {if}
            (M.L.ai_pre_cockpit_passenger_group_2_r_foundation)
        {else}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_1) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_1)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_2) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_2)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_3) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_3)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_4) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_4)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_5) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_5)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_6) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_6)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_7) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_7)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_8) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_8)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_9) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_9)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_10) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_10)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_11) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_11)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_12) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_12)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_13) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_13)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_14) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_14)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_member_15) !
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_founder_15)
            {endif}
            (L.L.ai_pre_cockpit_passenger_group_2_r_founder_1) (L.L.ai_pre_cockpit_passenger_group_2_r_founder_2) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_3) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_4) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_5) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_6) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_7) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_8) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_9) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_10) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_11) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_12) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_13) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_14) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_founder_15) +
                (L.L.ai_pre_cockpit_passenger_group_2_r_foundation_weight)
                (L.L.ai_pre_cockpit_passenger_group_2_r_stability_factor) / <=
                (L.L.ai_pre_cockpit_passenger_group_2_r_weight_next)
                (L.L.ai_pre_cockpit_passenger_group_2_r_foundation_weight)
                (L.L.ai_pre_cockpit_passenger_group_2_r_stability_factor) * >= ||
            {if}
                0 (S.L.ai_pre_cockpit_passenger_group_2_r_weight)
                (M.L.ai_pre_cockpit_passenger_group_2_r_foundation)
            {endif}
        {endif}
        (M.L.ai_pre_cockpit_passenger_group_2_r_env)
        (L.L.ai_pre_cockpit_passenger_group_2_r_weight_next) (S.L.ai_pre_cockpit_passenger_group_2_r_weight)
        (M.L.ai_pre_cockpit_passenger_group_2_r_window)
    {else}
        0 (S.L.ai_pre_cockpit_passenger_group_2_r_weight)
        (L.L.cp_passenger_window_2_r) (S.L.ai_pre_cockpit_passenger_group_2_r_window_target)
        -1 (S.L.ai_pre_cockpit_passenger_group_2_r_window_timer)
    {endif}
{end}

{macro:ai_pre_cockpit_passenger_group_1_l_foundation}
    (L.L.ai_pre_cockpit_passenger_group_1_l_member_1) (S.L.ai_pre_cockpit_passenger_group_1_l_founder_1)
    (L.L.ai_pre_cockpit_passenger_group_1_l_member_2) (S.L.ai_pre_cockpit_passenger_group_1_l_founder_2)
    (L.L.ai_pre_cockpit_passenger_group_1_l_member_3) (S.L.ai_pre_cockpit_passenger_group_1_l_founder_3)
    (L.L.ai_pre_cockpit_passenger_group_1_l_member_4) (S.L.ai_pre_cockpit_passenger_group_1_l_founder_4)
    (L.L.ai_pre_cockpit_passenger_group_1_l_member_5) (S.L.ai_pre_cockpit_passenger_group_1_l_founder_5)
    (L.L.ai_pre_cockpit_passenger_group_1_l_member_6) (S.L.ai_pre_cockpit_passenger_group_1_l_founder_6)
    (L.L.ai_pre_cockpit_passenger_group_1_l_member_7) (S.L.ai_pre_cockpit_passenger_group_1_l_founder_7)
    (L.L.ai_pre_cockpit_passenger_group_1_l_member_8) (S.L.ai_pre_cockpit_passenger_group_1_l_founder_8)
    (L.L.ai_pre_cockpit_passenger_group_1_l_member_9) (S.L.ai_pre_cockpit_passenger_group_1_l_founder_9)
    (L.L.ai_pre_cockpit_passenger_group_1_l_weight_next) (S.L.ai_pre_cockpit_passenger_group_1_l_foundation_weight)
    (M.L.ai_pre_cockpit_passenger_group_1_l_profile_init)
{end}

{macro:ai_pre_cockpit_passenger_group_1_l_profile_init}
    0.3 10000 random 10000 / 0.7 * + s0
    5 10 l0 * + (S.L.ai_pre_cockpit_passenger_group_1_l_env_cold_temperature_max) 5 l0 * -
        (S.L.ai_pre_cockpit_passenger_group_1_l_env_coldest_temperature_max)
    16 4 l0 * + (S.L.ai_pre_cockpit_passenger_group_1_l_env_chilly_temperature_max)
    18 8 l0 * + (S.L.ai_pre_cockpit_passenger_group_1_l_env_ideal_temperature_max)
    22 8 l0 * + (S.L.ai_pre_cockpit_passenger_group_1_l_env_warm_temperature_max) 8 l0 * +
        (S.L.ai_pre_cockpit_passenger_group_1_l_env_hot_temperature_max)

    0.005 10000 random 10000 / 0.245 * + (S.L.ai_pre_cockpit_passenger_group_1_l_env_dry_precip_rate_max)

    -5 10000 random 10000 / 25 * + (S.L.ai_pre_cockpit_passenger_group_1_l_env_nighttime_sun_alt_max)

    10000 random 10000 / 0.15 < (S.L.ai_pre_cockpit_passenger_group_1_l_usage_scope)

    10000 random 10000 / 0.2 < s0 (S.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_chilly_dry_daytime)
    10000 random 10000 / 0.3 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_ideal_dry_nighttime)
    10000 random 10000 / 0.6 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_ideal_dry_daytime)
    10000 random 10000 / 0.6 < l0 ||
        s0 s1 (S.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_warm_dry_nighttime)
    10000 random 10000 / 0.8 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_warm_dry_daytime)
    10000 random 10000 / 0.2 < l0 && l1 &&
        s0 (S.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_hot_dry_nighttime)
    10000 random 10000 / 0.3 < l0 && (S.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_hot_dry_daytime)

    1.25 10000 random 10000 / 1.75 * + (S.L.ai_pre_cockpit_passenger_group_1_l_stability_factor)
{end}

{macro:ai_pre_cockpit_passenger_group_1_l_env}
    0 s1 s2 s3 s4 s5 s6 s7

    (M.L.ai_pre_cockpit_normalize_perceived_passenger_group_temperature) l0
        (L.L.ai_pre_cockpit_passenger_group_1_l_env_coldest_temperature_max) <=
    {if}
        1 s1
    {else}
        l0 (L.L.ai_pre_cockpit_passenger_group_1_l_env_cold_temperature_max) <=
        {if}
            1 s2
            2
        {else}
            l0 (L.L.ai_pre_cockpit_passenger_group_1_l_env_chilly_temperature_max) <=
            {if}
                1 s3
                3
            {else}
                l0 (L.L.ai_pre_cockpit_passenger_group_1_l_env_ideal_temperature_max) <=
                {if}
                    1 s4
                    4
                {else}
                    l0 (L.L.ai_pre_cockpit_passenger_group_1_l_env_warm_temperature_max) <=
                    {if}
                        1 s5
                        5
                    {else}
                        l0 (L.L.ai_pre_cockpit_passenger_group_1_l_env_hot_temperature_max) <=
                        {if}
                            1 s6
                            6
                        {else}
                            1 s7
                            7
                        {endif}
                    {endif}
                {endif}
            {endif}
        {endif}
    {endif}
    100 * s0

    (L.L.PrecipRate) 0 max (L.L.ai_pre_cockpit_passenger_group_1_l_env_dry_precip_rate_max) >
    {if}
        l0 10 + s0
    {endif}

    (L.S.SunAlt) (L.L.ai_pre_cockpit_passenger_group_1_l_env_nighttime_sun_alt_max) <=
    {if}
        l0 1 + s0
    {endif}

    l0 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_target)

    l0 100 % 10 >= (S.L.r10)
    l0 10 % 1 = (S.L.r11)

    (L.L.ai_pre_cockpit_passenger_group_1_l_weight) !
    {if}
        (M.L.ai_pre_cockpit_passenger_group_1_l_env_refresh)
    {else}
        l0 (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception) (S.L.r12) = !
        {if}

            (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_wet) (L.L.r10) >=
            {if}
                l0 (L.L.r12) = (S.L.r13) !
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_coldest) l0 700 < &&
                        (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_cold) l0 300 >= l0 500 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_chilly)
                        (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_warm) || l0 400 >= l0 500 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_hot) l0 400 >= l0 600 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_hottest) l0 200 >= && || 2 * (S.L.r13)
                {endif}
                (L.L.r13) 2 =
                {if}
                    1
                {else}
                    (L.L.r13)
                    {if}
                        l0 500 < (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_nighttime) (L.L.r11) > &&
                            l0 500 >= (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_nighttime)
                            (L.L.r11) < && ||
                    {else}
                        0
                    {endif}
                {endif}
            {else}
                0
            {endif}
            ! {if}
                (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_negative_adjustment_timer)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_negative_adjustment_timer)
                        (L.L.ai_pre_cockpit_ai_timegap)
                        (L.L.ai_pre_cockpit_passenger_group_1_l_weight) 1 max 3 min * - 0 max
                        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_negative_adjustment_timer)
                {endif}
                (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_negative_adjustment_timer) !
                {if}
                    (M.L.ai_pre_cockpit_passenger_group_1_l_env_refresh)
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_positive_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_positive_adjustment_timer)
                {endif}
            {else}
                (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_positive_adjustment_timer)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_positive_adjustment_timer)
                        (L.L.ai_pre_cockpit_ai_timegap)
                        (L.L.ai_pre_cockpit_passenger_group_1_l_weight) 1 max 3 min * - 0 max
                        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_positive_adjustment_timer)
                {endif}
                (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_positive_adjustment_timer) !
                {if}
                    (M.L.ai_pre_cockpit_passenger_group_1_l_env_refresh)
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_negative_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_negative_adjustment_timer)
                {endif}
            {endif}
        {else}
            (M.L.ai_pre_cockpit_passenger_group_1_l_env_reset)
        {endif}
    {endif}
{end}

{macro:ai_pre_cockpit_passenger_group_1_l_env_refresh}
    (L.L.ai_pre_cockpit_passenger_group_1_l_weight)
    {if}
        1 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_changed)
        (L.L.r12) 100 / trunc l0 100 / trunc >
            (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_colder_than_before)
        (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_wet) (L.L.r10) <
            (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_wetter_than_before)
        (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_nighttime) (L.L.r11) <
            (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_darker_than_before)
    {else}
        0 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_changed)
            (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_colder_than_before)
            (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_wetter_than_before)
            (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_darker_than_before)
    {endif}
    (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_target)
        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception)
    l1 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_coldest)
    l2 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_cold)
    l3 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_chilly)
    l4 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_ideal)
    l5 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_warm)
    l6 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_hot)
    l7 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_hottest)
    (L.L.r10) (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_wet)
    (L.L.r11) (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_nighttime)
    10 10000 random 10000 / 50 * +
        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_negative_adjustment_timer)
        30 10000 random 10000 / 300 * + +
        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_positive_adjustment_timer)
{end}

{macro:ai_pre_cockpit_passenger_group_1_l_env_reset}
    0 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_changed)
    (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_negative_adjustment_timer)
    (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_positive_adjustment_timer)
    0 (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_colder_than_before)
        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_wetter_than_before)
        (S.L.ai_pre_cockpit_passenger_group_1_l_env_perception_darker_than_before)
{end}

{macro:ai_pre_cockpit_passenger_group_1_l_window}
    0 s0
    (L.L.ai_pre_cockpit_passenger_group_1_l_usage_scope) s1
    (L.L.ai_pre_cockpit_passenger_group_1_l_weight) 5 > s2
    (L.L.humans_count) 20 > s3
    (L.L.cp_passenger_window_1_l) s4

    (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_wet) ! (L.L.cp_cti_has_openable_passenger_windows) &&
    {if}
        (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_chilly)
            (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_nighttime) ! &&
        {if}
            (L.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_chilly_dry_daytime) s5 l1 && l2 l3 || &&
            {if}
                1
            {else}
                l5 !
                {if}
                    0
                {else}
                    l4
                {endif}
            {endif}
            s0
        {else}
            (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_ideal)
            {if}
                (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_nighttime)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_ideal_dry_nighttime) s5
                        l1 l2 || l3 || &&
                    {if}
                        1
                    {else}
                        l5 ! l1 l2 || &&
                        {if}
                            0
                        {else}
                            l4
                        {endif}
                    {endif}
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_ideal_dry_daytime)
                    {if}
                        1
                    {else}
                        l1 l2 &&
                        {if}
                            0
                        {else}
                            l4
                        {endif}
                    {endif}
                {endif}
                s0
            {else}
                (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_warm)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_nighttime)
                    {if}
                        (L.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_warm_dry_nighttime) s5
                        (L.L.cp_taster_klima)
                        {if}
                            l5 l1 l2 || l3 || &&
                            {if}
                                1
                            {else}
                                l1 !
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {else}
                            l5
                            {if}
                                1
                            {else}
                                l1 l2 &&
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {endif}
                    {else}
                        (L.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_warm_dry_daytime) s5
                        (L.L.cp_taster_klima)
                        {if}
                            l5 l1 && l2 l3 || &&
                            {if}
                                1
                            {else}
                                l1 !
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {else}
                            l5
                            {if}
                                1
                            {else}
                                l4
                            {endif}
                        {endif}
                    {endif}
                    s0
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_hot)
                    {if}
                        (L.L.ai_pre_cockpit_passenger_group_1_l_env_perception_nighttime)
                        {if}
                            (L.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_hot_dry_nighttime)
                                l1 && l2 l3 || && (L.L.cp_taster_klima) ! || (L.L.engine_on) ! ||
                        {else}
                            (L.L.ai_pre_cockpit_passenger_group_1_l_opening_window_when_env_hot_dry_daytime)
                                l1 && l2 l3 || && (L.L.cp_taster_klima) ! || (L.L.engine_on) ! ||
                        {endif}
                        s0
                    {endif}
                {endif}
            {endif}
        {endif}
    {endif}
    l0 (S.L.ai_pre_cockpit_passenger_group_1_l_window_target) (L.L.cp_passenger_window_1_l) = !
        (L.L.cp_cti_has_openable_passenger_windows) && (L.L.ai_pre_cockpit_passenger_group_1_l_window_target) 1 =
        (L.L.cp_passenger_window_1_l_locked) ! && (L.L.ai_pre_cockpit_passenger_group_1_l_window_target) ! || &&
    {if}
        (L.L.ai_pre_cockpit_passenger_group_1_l_window_timer) -1 =
        {if}
            5 10000 random 10000 / 115 * + (S.L.ai_pre_cockpit_passenger_group_1_l_window_timer)
        {endif}
        (L.L.ai_pre_cockpit_passenger_group_1_l_window_timer)
        {if}
            (L.L.ai_pre_cockpit_passenger_group_1_l_window_timer)
                (L.L.ai_pre_cockpit_ai_timegap) (L.L.ai_pre_cockpit_passenger_group_1_l_weight) 1 max 3 min * - 0 max
                (S.L.ai_pre_cockpit_passenger_group_1_l_window_timer)
        {endif}
        (L.L.ai_pre_cockpit_passenger_group_1_l_window_timer) !
        {if}
            (L.L.ai_pre_cockpit_passenger_group_1_l_window_target) (S.L.cp_passenger_window_1_l)
            {if}
                (T.L.ev_klappfenster_opn)
            {else}
                (T.L.ev_klappfenster_cls)
            {endif}
            -1 (S.L.ai_pre_cockpit_passenger_group_1_l_window_timer)
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_passenger_group_1_l_window_timer)
    {endif}
{end}

{macro:ai_pre_cockpit_passenger_group_1_r_foundation}
    (L.L.ai_pre_cockpit_passenger_group_1_r_member_1) (S.L.ai_pre_cockpit_passenger_group_1_r_founder_1)
    (L.L.ai_pre_cockpit_passenger_group_1_r_member_2) (S.L.ai_pre_cockpit_passenger_group_1_r_founder_2)
    (L.L.ai_pre_cockpit_passenger_group_1_r_member_3) (S.L.ai_pre_cockpit_passenger_group_1_r_founder_3)
    (L.L.ai_pre_cockpit_passenger_group_1_r_member_4) (S.L.ai_pre_cockpit_passenger_group_1_r_founder_4)
    (L.L.ai_pre_cockpit_passenger_group_1_r_member_5) (S.L.ai_pre_cockpit_passenger_group_1_r_founder_5)
    (L.L.ai_pre_cockpit_passenger_group_1_r_member_6) (S.L.ai_pre_cockpit_passenger_group_1_r_founder_6)
    (L.L.ai_pre_cockpit_passenger_group_1_r_weight_next) (S.L.ai_pre_cockpit_passenger_group_1_r_foundation_weight)
    (M.L.ai_pre_cockpit_passenger_group_1_r_profile_init)
{end}

{macro:ai_pre_cockpit_passenger_group_1_r_profile_init}
    0.3 10000 random 10000 / 0.7 * + s0
    5 10 l0 * + (S.L.ai_pre_cockpit_passenger_group_1_r_env_cold_temperature_max) 5 l0 * -
        (S.L.ai_pre_cockpit_passenger_group_1_r_env_coldest_temperature_max)
    16 4 l0 * + (S.L.ai_pre_cockpit_passenger_group_1_r_env_chilly_temperature_max)
    18 8 l0 * + (S.L.ai_pre_cockpit_passenger_group_1_r_env_ideal_temperature_max)
    22 8 l0 * + (S.L.ai_pre_cockpit_passenger_group_1_r_env_warm_temperature_max) 8 l0 * +
        (S.L.ai_pre_cockpit_passenger_group_1_r_env_hot_temperature_max)

    0.005 10000 random 10000 / 0.245 * + (S.L.ai_pre_cockpit_passenger_group_1_r_env_dry_precip_rate_max)

    -5 10000 random 10000 / 25 * + (S.L.ai_pre_cockpit_passenger_group_1_r_env_nighttime_sun_alt_max)

    10000 random 10000 / 0.15 < (S.L.ai_pre_cockpit_passenger_group_1_r_usage_scope)

    10000 random 10000 / 0.2 < s0 (S.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_chilly_dry_daytime)
    10000 random 10000 / 0.3 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_ideal_dry_nighttime)
    10000 random 10000 / 0.6 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_ideal_dry_daytime)
    10000 random 10000 / 0.6 < l0 ||
        s0 s1 (S.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_warm_dry_nighttime)
    10000 random 10000 / 0.8 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_warm_dry_daytime)
    10000 random 10000 / 0.2 < l0 && l1 &&
        s0 (S.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_hot_dry_nighttime)
    10000 random 10000 / 0.3 < l0 && (S.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_hot_dry_daytime)

    1.25 10000 random 10000 / 1.75 * + (S.L.ai_pre_cockpit_passenger_group_1_r_stability_factor)
{end}

{macro:ai_pre_cockpit_passenger_group_1_r_env}
    0 s1 s2 s3 s4 s5 s6 s7

    (M.L.ai_pre_cockpit_normalize_perceived_passenger_group_temperature) l0
        (L.L.ai_pre_cockpit_passenger_group_1_l_env_coldest_temperature_max) <=
    {if}
        1 s1
    {else}
        l0 (L.L.ai_pre_cockpit_passenger_group_1_r_env_cold_temperature_max) <=
        {if}
            1 s2
            2
        {else}
            l0 (L.L.ai_pre_cockpit_passenger_group_1_r_env_chilly_temperature_max) <=
            {if}
                1 s3
                3
            {else}
                l0 (L.L.ai_pre_cockpit_passenger_group_1_r_env_ideal_temperature_max) <=
                {if}
                    1 s4
                    4
                {else}
                    l0 (L.L.ai_pre_cockpit_passenger_group_1_r_env_warm_temperature_max) <=
                    {if}
                        1 s5
                        5
                    {else}
                        l0 (L.L.ai_pre_cockpit_passenger_group_1_r_env_hot_temperature_max) <=
                        {if}
                            1 s6
                            6
                        {else}
                            1 s7
                            7
                        {endif}
                    {endif}
                {endif}
            {endif}
        {endif}
    {endif}
    100 * s0

    (L.L.PrecipRate) 0 max (L.L.ai_pre_cockpit_passenger_group_1_r_env_dry_precip_rate_max) >
    {if}
        l0 10 + s0
    {endif}

    (L.S.SunAlt) (L.L.ai_pre_cockpit_passenger_group_1_r_env_nighttime_sun_alt_max) <=
    {if}
        l0 1 + s0
    {endif}

    l0 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_target)

    l0 100 % 10 >= (S.L.r10)
    l0 10 % 1 = (S.L.r11)

    (L.L.ai_pre_cockpit_passenger_group_1_r_weight) !
    {if}
        (M.L.ai_pre_cockpit_passenger_group_1_r_env_refresh)
    {else}
        l0 (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception) (S.L.r12) = !
        {if}

            (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_wet) (L.L.r10) >=
            {if}
                l0 (L.L.r12) = (S.L.r13) !
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_coldest) l0 700 < &&
                        (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_cold) l0 300 >= l0 500 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_chilly)
                        (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_warm) || l0 400 >= l0 500 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_hot) l0 400 >= l0 600 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_hottest) l0 200 >= && || 2 * (S.L.r13)
                {endif}
                (L.L.r13) 2 =
                {if}
                    1
                {else}
                    (L.L.r13)
                    {if}
                        l0 500 < (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_nighttime) (L.L.r11) > &&
                            l0 500 >= (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_nighttime)
                            (L.L.r11) < && ||
                    {else}
                        0
                    {endif}
                {endif}
            {else}
                0
            {endif}
            ! {if}
                (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_negative_adjustment_timer)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_negative_adjustment_timer)
                        (L.L.ai_pre_cockpit_ai_timegap)
                        (L.L.ai_pre_cockpit_passenger_group_1_r_weight) 1 max 3 min * - 0 max
                        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_negative_adjustment_timer)
                {endif}
                (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_negative_adjustment_timer) !
                {if}
                    (M.L.ai_pre_cockpit_passenger_group_1_r_env_refresh)
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_positive_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_positive_adjustment_timer)
                {endif}
            {else}
                (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_positive_adjustment_timer)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_positive_adjustment_timer)
                        (L.L.ai_pre_cockpit_ai_timegap)
                        (L.L.ai_pre_cockpit_passenger_group_1_r_weight) 1 max 3 min * - 0 max
                        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_positive_adjustment_timer)
                {endif}
                (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_positive_adjustment_timer) !
                {if}
                    (M.L.ai_pre_cockpit_passenger_group_1_r_env_refresh)
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_negative_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_negative_adjustment_timer)
                {endif}
            {endif}
        {else}
            (M.L.ai_pre_cockpit_passenger_group_1_r_env_reset)
        {endif}
    {endif}
{end}

{macro:ai_pre_cockpit_passenger_group_1_r_env_refresh}
    (L.L.ai_pre_cockpit_passenger_group_1_r_weight)
    {if}
        1 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_changed)
        (L.L.r12) 100 / trunc l0 100 / trunc >
            (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_colder_than_before)
        (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_wet) (L.L.r10) <
            (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_wetter_than_before)
        (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_nighttime) (L.L.r11) <
            (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_darker_than_before)
    {else}
        0 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_changed)
            (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_colder_than_before)
            (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_wetter_than_before)
            (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_darker_than_before)
    {endif}
    (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_target)
        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception)
    l1 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_coldest)
    l2 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_cold)
    l3 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_chilly)
    l4 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_ideal)
    l5 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_warm)
    l6 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_hot)
    l7 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_hottest)
    (L.L.r10) (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_wet)
    (L.L.r11) (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_nighttime)
    10 10000 random 10000 / 50 * +
        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_negative_adjustment_timer)
        30 10000 random 10000 / 300 * + +
        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_positive_adjustment_timer)
{end}

{macro:ai_pre_cockpit_passenger_group_1_r_env_reset}
    0 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_changed)
    (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_negative_adjustment_timer)
    (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_positive_adjustment_timer)
    0 (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_colder_than_before)
        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_wetter_than_before)
        (S.L.ai_pre_cockpit_passenger_group_1_r_env_perception_darker_than_before)
{end}

{macro:ai_pre_cockpit_passenger_group_1_r_window}
    0 s0
    (L.L.ai_pre_cockpit_passenger_group_1_r_usage_scope) s1
    (L.L.ai_pre_cockpit_passenger_group_1_r_weight) 5 > s2
    (L.L.humans_count) 20 > s3
    (L.L.cp_passenger_window_1_r) s4

    (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_wet) ! (L.L.cp_cti_has_openable_passenger_windows) &&
    {if}
        (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_chilly)
            (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_nighttime) ! &&
        {if}
            (L.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_chilly_dry_daytime) s5 l1 && l2 l3 || &&
            {if}
                1
            {else}
                l5 !
                {if}
                    0
                {else}
                    l4
                {endif}
            {endif}
            s0
        {else}
            (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_ideal)
            {if}
                (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_nighttime)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_ideal_dry_nighttime) s5
                        l1 l2 || l3 || &&
                    {if}
                        1
                    {else}
                        l5 ! l1 l2 || &&
                        {if}
                            0
                        {else}
                            l4
                        {endif}
                    {endif}
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_ideal_dry_daytime)
                    {if}
                        1
                    {else}
                        l1 l2 &&
                        {if}
                            0
                        {else}
                            l4
                        {endif}
                    {endif}
                {endif}
                s0
            {else}
                (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_warm)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_nighttime)
                    {if}
                        (L.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_warm_dry_nighttime) s5
                        (L.L.cp_taster_klima)
                        {if}
                            l5 l1 l2 || l3 || &&
                            {if}
                                1
                            {else}
                                l1 !
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {else}
                            l5
                            {if}
                                1
                            {else}
                                l1 l2 &&
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {endif}
                    {else}
                        (L.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_warm_dry_daytime) s5
                        (L.L.cp_taster_klima)
                        {if}
                            l5 l1 && l2 l3 || &&
                            {if}
                                1
                            {else}
                                l1 !
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {else}
                            l5
                            {if}
                                1
                            {else}
                                l4
                            {endif}
                        {endif}
                    {endif}
                    s0
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_hot)
                    {if}
                        (L.L.ai_pre_cockpit_passenger_group_1_r_env_perception_nighttime)
                        {if}
                            (L.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_hot_dry_nighttime)
                                l1 && l2 l3 || && (L.L.cp_taster_klima) ! || (L.L.engine_on) ! ||
                        {else}
                            (L.L.ai_pre_cockpit_passenger_group_1_r_opening_window_when_env_hot_dry_daytime)
                                l1 && l2 l3 || && (L.L.cp_taster_klima) ! || (L.L.engine_on) ! ||
                        {endif}
                        s0
                    {endif}
                {endif}
            {endif}
        {endif}
    {endif}
    l0 (S.L.ai_pre_cockpit_passenger_group_1_r_window_target) (L.L.cp_passenger_window_1_r) = !
        (L.L.cp_cti_has_openable_passenger_windows) && (L.L.ai_pre_cockpit_passenger_group_1_r_window_target) 1 =
        (L.L.cp_passenger_window_1_r_locked) ! && (L.L.ai_pre_cockpit_passenger_group_1_r_window_target) ! || &&
    {if}
        (L.L.ai_pre_cockpit_passenger_group_1_r_window_timer) -1 =
        {if}
            5 10000 random 10000 / 115 * + (S.L.ai_pre_cockpit_passenger_group_1_r_window_timer)
        {endif}
        (L.L.ai_pre_cockpit_passenger_group_1_r_window_timer)
        {if}
            (L.L.ai_pre_cockpit_passenger_group_1_r_window_timer)
                (L.L.ai_pre_cockpit_ai_timegap) (L.L.ai_pre_cockpit_passenger_group_1_r_weight) 1 max 3 min * - 0 max
                (S.L.ai_pre_cockpit_passenger_group_1_r_window_timer)
        {endif}
        (L.L.ai_pre_cockpit_passenger_group_1_r_window_timer) !
        {if}
            (L.L.ai_pre_cockpit_passenger_group_1_r_window_target) (S.L.cp_passenger_window_1_r)
            {if}
                (T.L.ev_klappfenster_opn)
            {else}
                (T.L.ev_klappfenster_cls)
            {endif}
            -1 (S.L.ai_pre_cockpit_passenger_group_1_r_window_timer)
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_passenger_group_1_r_window_timer)
    {endif}
{end}

{macro:ai_pre_cockpit_passenger_group_2_l_foundation}
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_1) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_1)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_2) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_2)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_3) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_3)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_4) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_4)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_5) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_5)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_6) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_6)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_7) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_7)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_8) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_8)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_9) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_9)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_10) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_10)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_11) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_11)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_12) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_12)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_13) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_13)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_14) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_14)
    (L.L.ai_pre_cockpit_passenger_group_2_l_member_15) (S.L.ai_pre_cockpit_passenger_group_2_l_founder_15)
    (L.L.ai_pre_cockpit_passenger_group_2_l_weight_next) (S.L.ai_pre_cockpit_passenger_group_2_l_foundation_weight)
    (M.L.ai_pre_cockpit_passenger_group_2_l_profile_init)
{end}

{macro:ai_pre_cockpit_passenger_group_2_l_profile_init}
    0.3 10000 random 10000 / 0.7 * + s0
    5 10 l0 * + (S.L.ai_pre_cockpit_passenger_group_2_l_env_cold_temperature_max) 5 l0 * -
        (S.L.ai_pre_cockpit_passenger_group_2_l_env_coldest_temperature_max)
    16 4 l0 * + (S.L.ai_pre_cockpit_passenger_group_2_l_env_chilly_temperature_max)
    18 8 l0 * + (S.L.ai_pre_cockpit_passenger_group_2_l_env_ideal_temperature_max)
    22 8 l0 * + (S.L.ai_pre_cockpit_passenger_group_2_l_env_warm_temperature_max) 8 l0 * +
        (S.L.ai_pre_cockpit_passenger_group_2_l_env_hot_temperature_max)

    0.005 10000 random 10000 / 0.245 * + (S.L.ai_pre_cockpit_passenger_group_2_l_env_dry_precip_rate_max)

    -5 10000 random 10000 / 25 * + (S.L.ai_pre_cockpit_passenger_group_2_l_env_nighttime_sun_alt_max)

    10000 random 10000 / 0.15 < (S.L.ai_pre_cockpit_passenger_group_2_l_usage_scope)

    10000 random 10000 / 0.2 < s0 (S.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_chilly_dry_daytime)
    10000 random 10000 / 0.3 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_ideal_dry_nighttime)
    10000 random 10000 / 0.6 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_ideal_dry_daytime)
    10000 random 10000 / 0.6 < l0 ||
        s0 s1 (S.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_warm_dry_nighttime)
    10000 random 10000 / 0.8 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_warm_dry_daytime)
    10000 random 10000 / 0.2 < l0 && l1 &&
        s0 (S.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_hot_dry_nighttime)
    10000 random 10000 / 0.3 < l0 && (S.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_hot_dry_daytime)

    1.25 10000 random 10000 / 1.75 * + (S.L.ai_pre_cockpit_passenger_group_2_l_stability_factor)
{end}

{macro:ai_pre_cockpit_passenger_group_2_l_env}
    0 s1 s2 s3 s4 s5 s6 s7

    (M.L.ai_pre_cockpit_normalize_perceived_passenger_group_temperature) l0
        (L.L.ai_pre_cockpit_passenger_group_1_l_env_coldest_temperature_max) <=
    {if}
        1 s1
    {else}
        l0 (L.L.ai_pre_cockpit_passenger_group_2_l_env_cold_temperature_max) <=
        {if}
            1 s2
            2
        {else}
            l0 (L.L.ai_pre_cockpit_passenger_group_2_l_env_chilly_temperature_max) <=
            {if}
                1 s3
                3
            {else}
                l0 (L.L.ai_pre_cockpit_passenger_group_2_l_env_ideal_temperature_max) <=
                {if}
                    1 s4
                    4
                {else}
                    l0 (L.L.ai_pre_cockpit_passenger_group_2_l_env_warm_temperature_max) <=
                    {if}
                        1 s5
                        5
                    {else}
                        l0 (L.L.ai_pre_cockpit_passenger_group_2_l_env_hot_temperature_max) <=
                        {if}
                            1 s6
                            6
                        {else}
                            1 s7
                            7
                        {endif}
                    {endif}
                {endif}
            {endif}
        {endif}
    {endif}
    100 * s0

    (L.L.PrecipRate) 0 max (L.L.ai_pre_cockpit_passenger_group_2_l_env_dry_precip_rate_max) >
    {if}
        l0 10 + s0
    {endif}

    (L.S.SunAlt) (L.L.ai_pre_cockpit_passenger_group_2_l_env_nighttime_sun_alt_max) <=
    {if}
        l0 1 + s0
    {endif}

    l0 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_target)

    l0 100 % 10 >= (S.L.r10)
    l0 10 % 1 = (S.L.r11)

    (L.L.ai_pre_cockpit_passenger_group_2_l_weight) !
    {if}
        (M.L.ai_pre_cockpit_passenger_group_2_l_env_refresh)
    {else}
        l0 (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception) (S.L.r12) = !
        {if}

            (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_wet) (L.L.r10) >=
            {if}
                l0 (L.L.r12) = (S.L.r13) !
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_coldest) l0 700 < &&
                        (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_cold) l0 300 >= l0 500 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_chilly)
                        (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_warm) || l0 400 >= l0 500 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_hot) l0 400 >= l0 600 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_hottest) l0 200 >= && || 2 * (S.L.r13)
                {endif}
                (L.L.r13) 2 =
                {if}
                    1
                {else}
                    (L.L.r13)
                    {if}
                        l0 500 < (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_nighttime) (L.L.r11) > &&
                            l0 500 >= (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_nighttime)
                            (L.L.r11) < && ||
                    {else}
                        0
                    {endif}
                {endif}
            {else}
                0
            {endif}
            ! {if}
                (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_negative_adjustment_timer)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_negative_adjustment_timer)
                        (L.L.ai_pre_cockpit_ai_timegap)
                        (L.L.ai_pre_cockpit_passenger_group_2_l_weight) 1 max 3 min * - 0 max
                        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_negative_adjustment_timer)
                {endif}
                (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_negative_adjustment_timer) !
                {if}
                    (M.L.ai_pre_cockpit_passenger_group_2_l_env_refresh)
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_positive_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_positive_adjustment_timer)
                {endif}
            {else}
                (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_positive_adjustment_timer)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_positive_adjustment_timer)
                        (L.L.ai_pre_cockpit_ai_timegap)
                        (L.L.ai_pre_cockpit_passenger_group_2_l_weight) 1 max 3 min * - 0 max
                        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_positive_adjustment_timer)
                {endif}
                (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_positive_adjustment_timer) !
                {if}
                    (M.L.ai_pre_cockpit_passenger_group_2_l_env_refresh)
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_negative_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_negative_adjustment_timer)
                {endif}
            {endif}
        {else}
            (M.L.ai_pre_cockpit_passenger_group_2_l_env_reset)
        {endif}
    {endif}
{end}

{macro:ai_pre_cockpit_passenger_group_2_l_env_refresh}
    (L.L.ai_pre_cockpit_passenger_group_2_l_weight)
    {if}
        1 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_changed)
        (L.L.r12) 100 / trunc l0 100 / trunc >
            (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_colder_than_before)
        (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_wet) (L.L.r10) <
            (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_wetter_than_before)
        (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_nighttime) (L.L.r11) <
            (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_darker_than_before)
    {else}
        0 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_changed)
            (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_colder_than_before)
            (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_wetter_than_before)
            (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_darker_than_before)
    {endif}
    (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_target)
        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception)
    l1 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_coldest)
    l2 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_cold)
    l3 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_chilly)
    l4 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_ideal)
    l5 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_warm)
    l6 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_hot)
    l7 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_hottest)
    (L.L.r10) (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_wet)
    (L.L.r11) (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_nighttime)
    10 10000 random 10000 / 50 * +
        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_negative_adjustment_timer)
        30 10000 random 10000 / 300 * + +
        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_positive_adjustment_timer)
{end}

{macro:ai_pre_cockpit_passenger_group_2_l_env_reset}
    0 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_changed)
    (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_negative_adjustment_timer)
    (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_positive_adjustment_timer)
    0 (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_colder_than_before)
        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_wetter_than_before)
        (S.L.ai_pre_cockpit_passenger_group_2_l_env_perception_darker_than_before)
{end}

{macro:ai_pre_cockpit_passenger_group_2_l_window}
    0 s0
    (L.L.ai_pre_cockpit_passenger_group_2_l_usage_scope) s1
    (L.L.ai_pre_cockpit_passenger_group_2_l_weight) 5 > s2
    (L.L.humans_count) 20 > s3
    (L.L.cp_passenger_window_2_l) s4

    (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_wet) ! (L.L.cp_cti_has_openable_passenger_windows) &&
    {if}
        (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_chilly)
            (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_nighttime) ! &&
        {if}
            (L.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_chilly_dry_daytime) s5 l1 && l2 l3 || &&
            {if}
                1
            {else}
                l5 !
                {if}
                    0
                {else}
                    l4
                {endif}
            {endif}
            s0
        {else}
            (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_ideal)
            {if}
                (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_nighttime)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_ideal_dry_nighttime) s5
                        l1 l2 || l3 || &&
                    {if}
                        1
                    {else}
                        l5 ! l1 l2 || &&
                        {if}
                            0
                        {else}
                            l4
                        {endif}
                    {endif}
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_ideal_dry_daytime)
                    {if}
                        1
                    {else}
                        l1 l2 &&
                        {if}
                            0
                        {else}
                            l4
                        {endif}
                    {endif}
                {endif}
                s0
            {else}
                (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_warm)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_nighttime)
                    {if}
                        (L.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_warm_dry_nighttime) s5
                        (L.L.cp_taster_klima)
                        {if}
                            l5 l1 l2 || l3 || &&
                            {if}
                                1
                            {else}
                                l1 !
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {else}
                            l5
                            {if}
                                1
                            {else}
                                l1 l2 &&
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {endif}
                    {else}
                        (L.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_warm_dry_daytime) s5
                        (L.L.cp_taster_klima)
                        {if}
                            l5 l1 && l2 l3 || &&
                            {if}
                                1
                            {else}
                                l1 !
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {else}
                            l5
                            {if}
                                1
                            {else}
                                l4
                            {endif}
                        {endif}
                    {endif}
                    s0
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_hot)
                    {if}
                        (L.L.ai_pre_cockpit_passenger_group_2_l_env_perception_nighttime)
                        {if}
                            (L.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_hot_dry_nighttime)
                                l1 && l2 l3 || && (L.L.cp_taster_klima) ! || (L.L.engine_on) ! ||
                        {else}
                            (L.L.ai_pre_cockpit_passenger_group_2_l_opening_window_when_env_hot_dry_daytime)
                                l1 && l2 l3 || && (L.L.cp_taster_klima) ! || (L.L.engine_on) ! ||
                        {endif}
                        s0
                    {endif}
                {endif}
            {endif}
        {endif}
    {endif}
    l0 (S.L.ai_pre_cockpit_passenger_group_2_l_window_target) (L.L.cp_passenger_window_2_l) = !
        (L.L.cp_cti_has_openable_passenger_windows) && (L.L.ai_pre_cockpit_passenger_group_2_l_window_target) 1 =
        (L.L.cp_passenger_window_2_l_locked) ! && (L.L.ai_pre_cockpit_passenger_group_2_l_window_target) ! || &&
    {if}
        (L.L.ai_pre_cockpit_passenger_group_2_l_window_timer) -1 =
        {if}
            5 10000 random 10000 / 115 * + (S.L.ai_pre_cockpit_passenger_group_2_l_window_timer)
        {endif}
        (L.L.ai_pre_cockpit_passenger_group_2_l_window_timer)
        {if}
            (L.L.ai_pre_cockpit_passenger_group_2_l_window_timer)
                (L.L.ai_pre_cockpit_ai_timegap) (L.L.ai_pre_cockpit_passenger_group_2_l_weight) 1 max 3 min * - 0 max
                (S.L.ai_pre_cockpit_passenger_group_2_l_window_timer)
        {endif}
        (L.L.ai_pre_cockpit_passenger_group_2_l_window_timer) !
        {if}
            (L.L.ai_pre_cockpit_passenger_group_2_l_window_target) (S.L.cp_passenger_window_2_l)
            {if}
                (T.L.ev_klappfenster_opn)
            {else}
                (T.L.ev_klappfenster_cls)
            {endif}
            -1 (S.L.ai_pre_cockpit_passenger_group_2_l_window_timer)
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_passenger_group_2_l_window_timer)
    {endif}
{end}

{macro:ai_pre_cockpit_passenger_group_2_r_foundation}
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_1) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_1)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_2) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_2)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_3) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_3)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_4) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_4)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_5) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_5)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_6) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_6)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_7) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_7)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_8) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_8)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_9) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_9)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_10) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_10)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_11) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_11)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_12) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_12)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_13) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_13)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_14) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_14)
    (L.L.ai_pre_cockpit_passenger_group_2_r_member_15) (S.L.ai_pre_cockpit_passenger_group_2_r_founder_15)
    (L.L.ai_pre_cockpit_passenger_group_2_r_weight_next) (S.L.ai_pre_cockpit_passenger_group_2_r_foundation_weight)
    (M.L.ai_pre_cockpit_passenger_group_2_r_profile_init)
{end}

{macro:ai_pre_cockpit_passenger_group_2_r_profile_init}
    0.3 10000 random 10000 / 0.7 * + s0
    5 10 l0 * + (S.L.ai_pre_cockpit_passenger_group_2_r_env_cold_temperature_max) 5 l0 * -
        (S.L.ai_pre_cockpit_passenger_group_2_r_env_coldest_temperature_max)
    16 4 l0 * + (S.L.ai_pre_cockpit_passenger_group_2_r_env_chilly_temperature_max)
    18 8 l0 * + (S.L.ai_pre_cockpit_passenger_group_2_r_env_ideal_temperature_max)
    22 8 l0 * + (S.L.ai_pre_cockpit_passenger_group_2_r_env_warm_temperature_max) 8 l0 * +
        (S.L.ai_pre_cockpit_passenger_group_2_r_env_hot_temperature_max)

    0.005 10000 random 10000 / 0.245 * + (S.L.ai_pre_cockpit_passenger_group_2_r_env_dry_precip_rate_max)

    -5 10000 random 10000 / 25 * + (S.L.ai_pre_cockpit_passenger_group_2_r_env_nighttime_sun_alt_max)

    10000 random 10000 / 0.15 < (S.L.ai_pre_cockpit_passenger_group_2_r_usage_scope)

    10000 random 10000 / 0.2 < s0 (S.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_chilly_dry_daytime)
    10000 random 10000 / 0.3 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_ideal_dry_nighttime)
    10000 random 10000 / 0.6 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_ideal_dry_daytime)
    10000 random 10000 / 0.6 < l0 ||
        s0 s1 (S.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_warm_dry_nighttime)
    10000 random 10000 / 0.8 < l0 ||
        s0 (S.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_warm_dry_daytime)
    10000 random 10000 / 0.2 < l0 && l1 &&
        s0 (S.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_hot_dry_nighttime)
    10000 random 10000 / 0.3 < l0 && (S.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_hot_dry_daytime)

    1.25 10000 random 10000 / 1.75 * + (S.L.ai_pre_cockpit_passenger_group_2_r_stability_factor)
{end}

{macro:ai_pre_cockpit_passenger_group_2_r_env}
    0 s1 s2 s3 s4 s5 s6 s7

    (M.L.ai_pre_cockpit_normalize_perceived_passenger_group_temperature) l0
        (L.L.ai_pre_cockpit_passenger_group_1_l_env_coldest_temperature_max) <=
    {if}
        1 s1
    {else}
        l0 (L.L.ai_pre_cockpit_passenger_group_2_r_env_cold_temperature_max) <=
        {if}
            1 s2
            2
        {else}
            l0 (L.L.ai_pre_cockpit_passenger_group_2_r_env_chilly_temperature_max) <=
            {if}
                1 s3
                3
            {else}
                l0 (L.L.ai_pre_cockpit_passenger_group_2_r_env_ideal_temperature_max) <=
                {if}
                    1 s4
                    4
                {else}
                    l0 (L.L.ai_pre_cockpit_passenger_group_2_r_env_warm_temperature_max) <=
                    {if}
                        1 s5
                        5
                    {else}
                        l0 (L.L.ai_pre_cockpit_passenger_group_2_r_env_hot_temperature_max) <=
                        {if}
                            1 s6
                            6
                        {else}
                            1 s7
                            7
                        {endif}
                    {endif}
                {endif}
            {endif}
        {endif}
    {endif}
    100 * s0

    (L.L.PrecipRate) 0 max (L.L.ai_pre_cockpit_passenger_group_2_r_env_dry_precip_rate_max) >
    {if}
        l0 10 + s0
    {endif}

    (L.S.SunAlt) (L.L.ai_pre_cockpit_passenger_group_2_r_env_nighttime_sun_alt_max) <=
    {if}
        l0 1 + s0
    {endif}

    l0 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_target)

    l0 100 % 10 >= (S.L.r10)
    l0 10 % 1 = (S.L.r11)

    (L.L.ai_pre_cockpit_passenger_group_2_r_weight) !
    {if}
        (M.L.ai_pre_cockpit_passenger_group_2_r_env_refresh)
    {else}
        l0 (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception) (S.L.r12) = !
        {if}

            (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_wet) (L.L.r10) >=
            {if}
                l0 (L.L.r12) = (S.L.r13) !
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_coldest) l0 700 < &&
                        (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_cold) l0 300 >= l0 500 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_chilly)
                        (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_warm) || l0 400 >= l0 500 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_hot) l0 400 >= l0 600 < && && ||
                        (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_hottest) l0 200 >= && || 2 * (S.L.r13)
                {endif}
                (L.L.r13) 2 =
                {if}
                    1
                {else}
                    (L.L.r13)
                    {if}
                        l0 500 < (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_nighttime) (L.L.r11) > &&
                            l0 500 >= (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_nighttime)
                            (L.L.r11) < && ||
                    {else}
                        0
                    {endif}
                {endif}
            {else}
                0
            {endif}
            ! {if}
                (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_negative_adjustment_timer)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_negative_adjustment_timer)
                        (L.L.ai_pre_cockpit_ai_timegap)
                        (L.L.ai_pre_cockpit_passenger_group_2_r_weight) 1 max 3 min * - 0 max
                        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_negative_adjustment_timer)
                {endif}
                (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_negative_adjustment_timer) !
                {if}
                    (M.L.ai_pre_cockpit_passenger_group_2_r_env_refresh)
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_positive_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_positive_adjustment_timer)
                {endif}
            {else}
                (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_positive_adjustment_timer)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_positive_adjustment_timer)
                        (L.L.ai_pre_cockpit_ai_timegap)
                        (L.L.ai_pre_cockpit_passenger_group_2_r_weight) 1 max 3 min * - 0 max
                        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_positive_adjustment_timer)
                {endif}
                (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_positive_adjustment_timer) !
                {if}
                    (M.L.ai_pre_cockpit_passenger_group_2_r_env_refresh)
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_negative_adjustment_tolerance)
                        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_negative_adjustment_timer)
                {endif}
            {endif}
        {else}
            (M.L.ai_pre_cockpit_passenger_group_2_r_env_reset)
        {endif}
    {endif}
{end}

{macro:ai_pre_cockpit_passenger_group_2_r_env_refresh}
    (L.L.ai_pre_cockpit_passenger_group_2_r_weight)
    {if}
        1 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_changed)
        (L.L.r12) 100 / trunc l0 100 / trunc >
            (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_colder_than_before)
        (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_wet) (L.L.r10) <
            (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_wetter_than_before)
        (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_nighttime) (L.L.r11) <
            (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_darker_than_before)
    {else}
        0 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_changed)
            (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_colder_than_before)
            (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_wetter_than_before)
            (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_darker_than_before)
    {endif}
    (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_target)
        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception)
    l1 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_coldest)
    l2 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_cold)
    l3 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_chilly)
    l4 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_ideal)
    l5 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_warm)
    l6 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_hot)
    l7 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_hottest)
    (L.L.r10) (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_wet)
    (L.L.r11) (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_nighttime)
    10 10000 random 10000 / 50 * +
        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_negative_adjustment_timer)
        30 10000 random 10000 / 300 * + +
        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_positive_adjustment_timer)
{end}

{macro:ai_pre_cockpit_passenger_group_2_r_env_reset}
    0 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_changed)
    (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_negative_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_negative_adjustment_timer)
    (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_positive_adjustment_tolerance)
        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_positive_adjustment_timer)
    0 (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_colder_than_before)
        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_wetter_than_before)
        (S.L.ai_pre_cockpit_passenger_group_2_r_env_perception_darker_than_before)
{end}

{macro:ai_pre_cockpit_passenger_group_2_r_window}
    0 s0
    (L.L.ai_pre_cockpit_passenger_group_2_r_usage_scope) s1
    (L.L.ai_pre_cockpit_passenger_group_2_r_weight) 5 > s2
    (L.L.humans_count) 20 > s3
    (L.L.cp_passenger_window_2_r) s4

    (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_wet) ! (L.L.cp_cti_has_openable_passenger_windows) &&
    {if}
        (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_chilly)
            (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_nighttime) ! &&
        {if}
            (L.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_chilly_dry_daytime) s5 l1 && l2 l3 || &&
            {if}
                1
            {else}
                l5 !
                {if}
                    0
                {else}
                    l4
                {endif}
            {endif}
            s0
        {else}
            (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_ideal)
            {if}
                (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_nighttime)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_ideal_dry_nighttime) s5
                        l1 l2 || l3 || &&
                    {if}
                        1
                    {else}
                        l5 ! l1 l2 || &&
                        {if}
                            0
                        {else}
                            l4
                        {endif}
                    {endif}
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_ideal_dry_daytime)
                    {if}
                        1
                    {else}
                        l1 l2 &&
                        {if}
                            0
                        {else}
                            l4
                        {endif}
                    {endif}
                {endif}
                s0
            {else}
                (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_warm)
                {if}
                    (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_nighttime)
                    {if}
                        (L.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_warm_dry_nighttime) s5
                        (L.L.cp_taster_klima)
                        {if}
                            l5 l1 l2 || l3 || &&
                            {if}
                                1
                            {else}
                                l1 !
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {else}
                            l5
                            {if}
                                1
                            {else}
                                l1 l2 &&
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {endif}
                    {else}
                        (L.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_warm_dry_daytime) s5
                        (L.L.cp_taster_klima)
                        {if}
                            l5 l1 && l2 l3 || &&
                            {if}
                                1
                            {else}
                                l1 !
                                {if}
                                    0
                                {else}
                                    l4
                                {endif}
                            {endif}
                        {else}
                            l5
                            {if}
                                1
                            {else}
                                l4
                            {endif}
                        {endif}
                    {endif}
                    s0
                {else}
                    (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_hot)
                    {if}
                        (L.L.ai_pre_cockpit_passenger_group_2_r_env_perception_nighttime)
                        {if}
                            (L.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_hot_dry_nighttime)
                                l1 && l2 l3 || && (L.L.cp_taster_klima) ! || (L.L.engine_on) ! ||
                        {else}
                            (L.L.ai_pre_cockpit_passenger_group_2_r_opening_window_when_env_hot_dry_daytime)
                                l1 && l2 l3 || && (L.L.cp_taster_klima) ! || (L.L.engine_on) ! ||
                        {endif}
                        s0
                    {endif}
                {endif}
            {endif}
        {endif}
    {endif}
    l0 (S.L.ai_pre_cockpit_passenger_group_2_r_window_target) (L.L.cp_passenger_window_2_r) = !
        (L.L.cp_cti_has_openable_passenger_windows) && (L.L.ai_pre_cockpit_passenger_group_2_r_window_target) 1 =
        (L.L.cp_passenger_window_2_r_locked) ! && (L.L.ai_pre_cockpit_passenger_group_2_r_window_target) ! || &&
    {if}
        (L.L.ai_pre_cockpit_passenger_group_2_r_window_timer) -1 =
        {if}
            5 10000 random 10000 / 115 * + (S.L.ai_pre_cockpit_passenger_group_2_r_window_timer)
        {endif}
        (L.L.ai_pre_cockpit_passenger_group_2_r_window_timer)
        {if}
            (L.L.ai_pre_cockpit_passenger_group_2_r_window_timer)
                (L.L.ai_pre_cockpit_ai_timegap) (L.L.ai_pre_cockpit_passenger_group_2_r_weight) 1 max 3 min * - 0 max
                (S.L.ai_pre_cockpit_passenger_group_2_r_window_timer)
        {endif}
        (L.L.ai_pre_cockpit_passenger_group_2_r_window_timer) !
        {if}
            (L.L.ai_pre_cockpit_passenger_group_2_r_window_target) (S.L.cp_passenger_window_2_r)
            {if}
                (T.L.ev_klappfenster_opn)
            {else}
                (T.L.ev_klappfenster_cls)
            {endif}
            -1 (S.L.ai_pre_cockpit_passenger_group_2_r_window_timer)
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_passenger_group_2_r_window_timer)
    {endif}
{end}

{macro:ai_pre_cockpit_normalize_perceived_passenger_group_temperature}
    (L.S.Weather_Temperature) 1.5 * (L.L.Cabinair_Temp) + 2.5 / s0
{end}

'------------------------------------------------------------------------------
' 3. Stop workflow and pertinent actions (stop brake and door usage)
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_stop}
'  // Important assumptions (must be met by door script and passengercabin.cfg):
'  // - This is a standard 2-door vehicle (2 x 2-winged, inward-swinging doors).
'  // - Both doors are manual. There are no "passenger self-service" buttons of any sort.
'  // - The front door only serves as an [entry].
'  // - The rear door serves as both an [entry] and an [exit].
'  // - The front door's [entry] registration _preceeds_ the rear one's; in other words, passengers are expected to
'  //   attempt boarding via the front door by default, i.e., unless rear door opened while front closed.
'  // - [entry] registrations come without {withbutton}.
'  // - The front door may or may not be coupled to the stop brake, depending on the value of
'  //   door_cti_front_door_decoupled_from_stop_brake. The rear door is always coupled to the stop brake.
'  // - Doors can be opened when absolute velocity < tueroeffnung constant. There is no constraint, velocity-wise,
'  //   with regards to door closure.

'  // ----- Overview -----

'   // Stop phases:
'   // 0: Vehicle is not currently at a scheduled stop.
'   // 1: Vehicle has arrived at a scheduled stop and/or is about to depart, but passenger(s) still wish to board
'   //    and/or disembark.
'   // 2: Vehicle gets notified by game that it should depart.
'   // 3: Vehicle is actually departure-ready.
'   // 4: Anomaly detected (see ai_pre_cockpit_frame on heuristics relied on) -- vehicle gets departure-ready
'   //    instantly.

'   // Normal (excluding phase = 4) stop phase transitions:
'   // 0 -> 1: AI_Scheduled_AtStation previously 0 and now 1.
'   // 1 -> 2: AI_Scheduled_AtStation previously 1 and now -1.
'   // 2 -> 3: AI_Scheduled_AtStation previously -1, changed by script to 0, and stays 0 (see note on "stop
'   //         overlapping" below).
'   // 2 -> 1, 3 -> 1: PAX_Entry/ExitX_Req = 1, or AI_Scheduled_AtStation does not stay 0 (2 -> 1 only).
'   // 3 -> 0: Any departure-prerequisite actions (closing doors, deactivating stop brake switch, etc.) done, and game
'   //         indicates vehicle's path is clear (Throttle > 0).

'   // Stop overlapping: Certain OMSI stop cubes are so close to one another that their configured docking distances
'   // overlap. Standard vehicles will then "seem as if" they were preparing for departure (closing doors, etc.), only
'   // to once again arrive the next instant (opening doors again, etc.), without actually having covered any distance
'   // in between stops. This tends to occur at many maps' terminal/initial stops. Stop phase 2 referenced above
'   // functions as a "lookahead"/"testing-the-waters" heuristic to detect and prevent exactly that: When the game says
'   // that the vehicle ought to depart, the stop phase will transition to phase 2, acknowledge the game's notification
'   // (by setting AI_Scheduled_AtStation to 0), without actually adjusting the vehicle's visible state at all. Only
'   // during the next frame, if AI_Scheduled_AtStation is still 0, will the vehicle start preparing for departure,
'   // resting assured no stop overlapping is effective (because otherwise AI_Scheduled_AtStation would once again be
'   // 1). The aforementioned mechanism can apply to any number of consecutively overlapping stops; e.g., if stops 3,
'   // 4, and 5 are overlapping, the vehicle will appear to arrive at stop 3 and will not visibly depart until OMSI
'   // says it's time to depart from stop 5.

'   // ----------

'   // Prevent opening rear door at regular stop when there are no actual passengers wishing to disembark. This
'   // typically occurs due to passengers de-spawning post-hibernation, but their previously issued (now stale) and
'   // recorded stop request remaining.
    (L.L.ai_pre_cockpit_stop_phase) 4 = (L.L.haltewunsch) && (L.L.PAX_Exit0_Req) ! && (L.L.PAX_Exit1_Req) ! &&
    {if}
        0 (S.L.haltewunsch) (S.L.door_kinderwagenwunsch) (S.L.zufall_kinderwagenwunsch) (S.L.haltewunschlampe)
            (S.L.door_haltewunsch_knopfdruck)
    {endif}

'   // ----- Stop phase transitioning -----
'   // Note:
'   // - 3 -> 0 is handled further down in this macro, in the departure-relevant block.
'   // - * <-> 4 is handled in top-level (ai_pre_cockpit_frame) macro.

    0 s0
    (L.L.AI_Scheduled_AtStation) 1 = (L.L.AI_Scheduled_AtStation) -1 = (L.L.ai_pre_cockpit_stop_phase) 3 = ||
        (L.L.PAX_Entry0_Req) (L.L.PAX_Entry1_Req) || (L.L.PAX_Entry2_Req) || (L.L.PAX_Entry3_Req) ||
        (L.L.PAX_Exit0_Req) || (L.L.PAX_Exit1_Req) || (L.L.haltewunsch) || (L.L.pandus_pos) 0.4 > ||
        (L.L.ai_pre_cockpit_stop_phase) 4 = ! && && ||
    {if}
'       // 0 -> 1, 2 -> 1, 3 -> 1
        1 (S.L.ai_pre_cockpit_stop_phase)
        (L.L.AI_Scheduled_AtStation) 1 =
        {if}
            (L.L.ai_pre_cockpit_stop_arrival_timer) -1 =
            {if}
                0 (S.L.ai_pre_cockpit_stop_arrival_timer)
            {endif}
            0 s1
            -1 s2 s3
            (L.L.schedule_active)
            {if}
                (M.V.GetTTBusstopIndex) s1 s2 1 <= l1 (M.V.GetTTBusstopCount) s3 1 - 0 max >= || s1
            {endif}
            l2 (S.L.ai_pre_cockpit_stop_last_arrival_bus_stop_index)
            l3 (S.L.ai_pre_cockpit_stop_last_arrival_bus_stop_count)
'           // Stop prolonging -- affects calculation of door closure and departure delay:
'           // 1: The stop is either at index 0, 1, or last (terminal) of the timetable, but the engine is not to be
'           //    turned off.
'           // 2: Any stop where vehicle instructed to turn engine off.
            l1 (L.L.AI_Engine) -1 = 2 * + 2 min s1 (L.L.ai_pre_cockpit_stop_prolonging_heuristic) >
            {if}
                l1 (S.L.ai_pre_cockpit_stop_prolonging_heuristic)
                -1 (S.L.ai_pre_cockpit_stop_departure_delay_estimate)
                    (S.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed)
            {endif}
        {endif}
    {else}
        (L.L.AI_Scheduled_AtStation) -1 =
        {if}
'           // 1 -> 2
            (L.L.ai_pre_cockpit_stop_phase) 4 = !
            {if}
'               // Provision for closing doors if left open by user prior to takeover.
                (L.L.ai_pre_cockpit_stop_phase_init_override)
                {if}
                    4
                {else}
                    2
                {endif}
                (S.L.ai_pre_cockpit_stop_phase)
            {endif}
        {else}
            (L.L.ai_pre_cockpit_stop_phase) s1 1 = (L.L.PAX_Entry0_Req) ! && (L.L.PAX_Entry1_Req) ! &&
                (L.L.PAX_Entry2_Req) ! && (L.L.PAX_Entry3_Req) ! && (L.L.PAX_Exit0_Req) ! && (L.L.PAX_Exit1_Req) ! &&
                (L.L.haltewunsch) ! && (L.L.pandus_pos) 0.2 < && l1 2 = ||
            {if}
'               // 2 -> 3
                3 (S.L.ai_pre_cockpit_stop_phase)
                0 (S.L.ai_pre_cockpit_stop_departure_timer)
                1 s0
                (L.L.schedule_active)
                {if}
                    (M.V.GetTTBusstopIndex) (L.L.ai_pre_cockpit_stop_last_run_bus_stop_index) =
                        (M.V.GetTTTerminusIndex) (L.L.ai_pre_cockpit_stop_last_run_terminus_index) = &&
                        (M.V.GetTTBusstopCount) (L.L.ai_pre_cockpit_stop_last_run_bus_stop_count) = &&
                        (M.V.GetTTLineString) (L.$.ai_pre_cockpit_stop_last_run_line_string) $= &&
                    {if}
'                       // Parking-maneuver-style departure: Vehicle told to depart without timetable context change.
                        1 (S.L.ai_pre_cockpit_stop_parking_maneuver_heuristic)
                        -1 (S.L.ai_pre_cockpit_stop_departure_delay_estimate)
                    {endif}
                {endif}
            {else}
                l1 3 =
                {if}
                    1 s0
                {endif}
            {endif}
        {endif}
    {endif}

    l0 !
    {if}
        (L.L.ai_pre_cockpit_stop_phase) d 3 < &&
        {if}
            (L.L.ai_pre_cockpit_stop_arrival_timer) (L.S.Timegap) + (S.L.ai_pre_cockpit_stop_arrival_timer)
            -1 (S.L.ai_pre_cockpit_stop_departure_timer)
        {endif}
    {else}
        (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) !
        {if}
            (L.L.ai_pre_cockpit_stop_departure_timer) (L.S.Timegap) + (S.L.ai_pre_cockpit_stop_departure_timer)
        {endif}
        -1 (S.L.ai_pre_cockpit_stop_arrival_timer)
    {endif}

'   // Check whether:
'   // - Any passengers are seated close to the front door (first seat row).
'   // - Any freshly-boarded passengers are still close to front door, walking toward their ultimate seat or standing
'   //   location.
'   // - Any passengers chose to (permanently) stand.
'   // These affect:
'   // - The delay of door closure while stopped.
'   // - The delay of stop brake switch deactivation, if initially active.
'   // - The delay of actual departure (throttling to release stop brake).
'   // - The likelihood, if allowed by vehicle configuration, of actual departure preceding full closure of the front
'   //   door, and/or departure without triggering of front door closure at all.
'   // Generally, the more of these evaluations hold, the longer the aforementioned delays, and the lesser the
'   // probability of departure prior to, or without, front door closure.
    1 (M.V.GetHumanCountOnSeat) 2 (M.V.GetHumanCountOnSeat) || 3 (M.V.GetHumanCountOnSeat) ||
        (S.L.ai_pre_cockpit_passengers_seated_close_to_front_door)
    1 (M.V.GetHumanCountOnPathLink) 2 (M.V.GetHumanCountOnPathLink) || 3 (M.V.GetHumanCountOnPathLink) ||
        4 (M.V.GetHumanCountOnPathLink) || 5 (M.V.GetHumanCountOnPathLink) || 6 (M.V.GetHumanCountOnPathLink) ||
        7 (M.V.GetHumanCountOnPathLink) || (S.L.ai_pre_cockpit_passengers_relocating_close_to_front_door)
    32 (M.V.GetHumanCountOnSeat) 33 (M.V.GetHumanCountOnSeat) || 34 (M.V.GetHumanCountOnSeat) ||
        35 (M.V.GetHumanCountOnSeat) || 36 (M.V.GetHumanCountOnSeat) || 37 (M.V.GetHumanCountOnSeat) ||
        38 (M.V.GetHumanCountOnSeat) || 39 (M.V.GetHumanCountOnSeat) || 40 (M.V.GetHumanCountOnSeat) ||
        41 (M.V.GetHumanCountOnSeat) || 42 (M.V.GetHumanCountOnSeat) || 43 (M.V.GetHumanCountOnSeat) ||
        44 (M.V.GetHumanCountOnSeat) || 45 (M.V.GetHumanCountOnSeat) || 46 (M.V.GetHumanCountOnSeat) ||
        47 (M.V.GetHumanCountOnSeat) || 48 (M.V.GetHumanCountOnSeat) || 49 (M.V.GetHumanCountOnSeat) ||
        50 (M.V.GetHumanCountOnSeat) || 51 (M.V.GetHumanCountOnSeat) || 52 (M.V.GetHumanCountOnSeat) ||
        53 (M.V.GetHumanCountOnSeat) || 54 (M.V.GetHumanCountOnSeat) || (S.L.ai_pre_cockpit_passengers_standing)

'   // Acquire timetable-related context necessary for determining stop-prolonging status, and parking-maneuver-style
'   // departures.
    (M.L.ai_pre_cockpit_refresh_tt_context)

'   // Determine whether we could _hypothetically_ depart with an open front door at present, _if we disregarded_
'   // dynamic factors, such as the timetable and standing passengers, which can only be evaluated at actual departure
'   // time.
    (M.L.ai_pre_cockpit_evaluate_open_front_door_departure_primitives)

    (L.L.ai_pre_cockpit_stop_phase)
    {if}
'       // ----- Scheduled stop -----

        (L.L.ai_pre_cockpit_unscheduled_stop_phase)
        {if}
            0 (S.L.ai_pre_cockpit_unscheduled_stop_phase) (S.L.ai_pre_cockpit_stop_brake_sw_target)
            -1 (S.L.ai_pre_cockpit_unscheduled_stop_brake_usage_cooldown_timer)
                (S.L.ai_pre_cockpit_stop_brake_sw_timer)
        {endif}

        (L.L.ai_pre_cockpit_stop_departure_delay_estimate) -1 =
        {if}
'           // Estimated (minimum) departure delay pre-calculation:
'           // - 3~6 sec at normal stop or prolonged stop parking-maneuver-style departure.
'           // - 10~20 sec at prolonged/1 (non-engine-off) departure.
'           // - 20~40 sec at prolonged/2 (engine-off) departure.
'           // Delay variation is proportional to door-pc-factor.
            (L.L.ai_pre_cockpit_stop_prolonging_heuristic)
                (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 = ! &&
            {if}
                10 (L.L.ai_pre_cockpit_stop_prolonging_heuristic) *
            {else}
                3
            {endif}
            d 10000 random 10000 / * (L.L.ai_pre_cockpit_door_pc_factor) * +
                (S.L.ai_pre_cockpit_stop_departure_delay_estimate)
        {endif}

'       // Unless any doors are to be opened, only engage stop brake if stopped for a considerable amount of time, and
'       // handbrake still released by then.
        (L.L.ai_pre_cockpit_stop_phase) 3 < (L.L.ai_pre_cockpit_stop_unconditional_stop_brake_engagement_delay) -1 = &&
            (L.L.bremse_halte) ! (L.L.ai_pre_cockpit_handbrake_target) ! && s0 &&
        {if}
            (L.L.ai_pre_cockpit_stop_arrival_timer) 10 10000 random 10000 / 10 * + +
                (S.L.ai_pre_cockpit_stop_unconditional_stop_brake_engagement_delay)
        {else}
            l0 !
            {if}
                -1 (S.L.ai_pre_cockpit_stop_unconditional_stop_brake_engagement_delay)
            {endif}
        {endif}

'       // At prolonged/2 (engine-off) stops, doors may be opened "eagerly", that is, regardless of someone wanting to
'       // board or disembark.
'       // - Conventions:
'       //   - M~N%: Random variation between M% (min) and N% (max).
'       //   - P-M-N: Probability that door N is eagerly opened in case M.
'       //   - p: Profile-specific factor between 20~100% expressing eagerness.
'       //   - Preferences are (pseudo-)dynamic: They are re-evaluated once per stop.
'       // - Conditions and preferences:
'       //   1. { "chilly", "day", "dry" }
'       //      - P-1-01: 10% + (20% * p)
'       //      - P-1-23: 0%
'       //   2. { "ideal", "night", "dry" }
'       //      - P-2-01: 20% + (30% * p)
'       //      - P-2-23: P-2-01 * 10%
'       //   3. { "ideal", "day", "dry" }
'       //      - P-3-01: 30% + (70% * p)
'       //      - P-3-23: P-3-01 * 25%
'       //   4. { "warm", "night" }
'       //      - P-4-01: 50% + (50% * p)
'       //      - P-4-23:
'       //        - if additionally "dry": P-4-01 * 50%
'       //        - otherwise: 0%
'       //   5. { "warm", "day" }
'       //      - P-5-01: 70% + (30% * p)
'       //      - P-5-23:
'       //        - if additionally "dry": P-5-01 * 75%
'       //        - otherwise: 0%
'       //   6. { "hot" }
'       //      - P-6-01: 100%
'       //      - P-6-23:
'       //        - if additionally "dry": 80% + (20% * p)
'       //        - otherwise: 0%
'       //   7. < default / any other >
'       //      - P-7-01: 0%
'       //      - P-7-23: 0%
'       // - Additional constraints: The rear (23) door is never eagerly opened unless the front (01) is also to be
'       //   opened. Note that this still doesn't preclude the rear door being opened independently and left open;
'       //   e.g., when someone disembarks and the environment is, say, "ideal", the front door may remain closed,
'       //   and the rear one lazily left open, i.e., the driver simply doesn't care.
'       // - Note: Eager closure conditions due to environmental adversity are independent, static, and not necessarily
'       //   the eager opening conditions' complement.
        (L.L.ai_pre_cockpit_stop_env_eager_door_01_opening_allowed) -1 =
        {if}
'           // Step 1: At each stop arrival, evaluate all probabilities, regardless of current conditions.

'           // Case 1
            10000 random 10000 /
                (L.L.ai_pre_cockpit_opening_door_01_at_prolonged_stop_when_env_chilly_dry_daytime_probability) <
                s0 (S.L.ai_pre_cockpit_stop_env_eager_door_01_opening_chilly_dry_daytime_allowed)

'           // Case 2
            10000 random 10000 /
                (L.L.ai_pre_cockpit_opening_door_01_at_prolonged_stop_when_env_ideal_dry_nighttime_probability) <
                l0 || s0 (S.L.ai_pre_cockpit_stop_env_eager_door_01_opening_ideal_dry_nighttime_allowed)
            {if}
                10000 random 10000 /
                    (L.L.ai_pre_cockpit_opening_door_23_at_prolonged_stop_when_env_ideal_dry_nighttime_probability) <
            {else}
                0
            {endif}
            s1 (S.L.ai_pre_cockpit_stop_env_eager_door_23_opening_ideal_dry_nighttime_allowed)

'           // Case 3
            10000 random 10000 /
                (L.L.ai_pre_cockpit_opening_door_01_at_prolonged_stop_when_env_ideal_dry_daytime_probability) <
                l0 || s0 (S.L.ai_pre_cockpit_stop_env_eager_door_01_opening_ideal_dry_daytime_allowed)
            {if}
                10000 random 10000 /
                    (L.L.ai_pre_cockpit_opening_door_23_at_prolonged_stop_when_env_ideal_dry_daytime_probability) <
                    l1 ||
            {else}
                0
            {endif}
            s1 (S.L.ai_pre_cockpit_stop_env_eager_door_23_opening_ideal_dry_daytime_allowed)

'           // Case 4
            10000 random 10000 /
                (L.L.ai_pre_cockpit_opening_door_01_at_prolonged_stop_when_env_warm_nighttime_probability) <
                l0 || s0 (S.L.ai_pre_cockpit_stop_env_eager_door_01_opening_warm_nighttime_allowed)
            {if}
                10000 random 10000 /
                    (L.L.ai_pre_cockpit_opening_door_23_at_prolonged_stop_when_env_warm_dry_nighttime_probability) <
                    l1 ||
            {else}
                0
            {endif}
            s1 (S.L.ai_pre_cockpit_stop_env_eager_door_23_opening_warm_dry_nighttime_allowed)

'           // Case 5
            10000 random 10000 /
                (L.L.ai_pre_cockpit_opening_door_01_at_prolonged_stop_when_env_warm_daytime_probability) <
                l0 || s0 (S.L.ai_pre_cockpit_stop_env_eager_door_01_opening_warm_daytime_allowed)
            {if}
                10000 random 10000 /
                    (L.L.ai_pre_cockpit_opening_door_23_at_prolonged_stop_when_env_warm_dry_daytime_probability) <
                    l1 ||
            {else}
                0
            {endif}
            s1 (S.L.ai_pre_cockpit_stop_env_eager_door_23_opening_warm_dry_daytime_allowed)

'           // Case 6
            10000 random 10000 / (L.L.ai_pre_cockpit_opening_door_23_at_prolonged_stop_when_env_hot_dry_probability) <
                l1 || (S.L.ai_pre_cockpit_stop_env_eager_door_23_opening_hot_dry_allowed)
        {endif}

        (L.L.ai_pre_cockpit_stop_env_eager_door_01_opening_allowed) -1 = (L.L.ai_pre_cockpit_env_perception_changed) ||
        {if}
'           // Step 2: At each stop arrival, but also when environmental conditions change, reevaluate whether door(s)
'           // can effectively be eagerly opened under the new conditions.

            0 s0 s1
            (L.L.ai_pre_cockpit_env_perception_chilly)
            {if}
'               // Case 1
                (L.L.ai_pre_cockpit_env_perception_wet) ! (L.L.ai_pre_cockpit_env_perception_nighttime) ! &&
                {if}
                    (L.L.ai_pre_cockpit_stop_env_eager_door_01_opening_chilly_dry_daytime_allowed) s0
                {endif}
            {else}
                (L.L.ai_pre_cockpit_env_perception_ideal)
                {if}
                    (L.L.ai_pre_cockpit_env_perception_wet) !
                    {if}
                        (L.L.ai_pre_cockpit_env_perception_nighttime)
                        {if}
'                           // Case 2
                            (L.L.ai_pre_cockpit_stop_env_eager_door_01_opening_ideal_dry_nighttime_allowed) s0
                            (L.L.ai_pre_cockpit_stop_env_eager_door_23_opening_ideal_dry_nighttime_allowed) s1
                        {else}
'                           // Case 3
                            (L.L.ai_pre_cockpit_stop_env_eager_door_01_opening_ideal_dry_daytime_allowed) s0
                            (L.L.ai_pre_cockpit_stop_env_eager_door_23_opening_ideal_dry_daytime_allowed) s1
                        {endif}
                    {endif}
                {else}
                    (L.L.ai_pre_cockpit_env_perception_warm)
                    {if}
                        (L.L.ai_pre_cockpit_env_perception_nighttime)
                        {if}
'                           // Case 4
                            (L.L.ai_pre_cockpit_stop_env_eager_door_01_opening_warm_nighttime_allowed) s0
                            (L.L.ai_pre_cockpit_env_perception_wet) !
                            {if}
                                (L.L.ai_pre_cockpit_stop_env_eager_door_23_opening_warm_dry_nighttime_allowed) s1
                            {endif}
                        {else}
'                           // Case 5
                            (L.L.ai_pre_cockpit_stop_env_eager_door_01_opening_warm_daytime_allowed) s0
                            (L.L.ai_pre_cockpit_env_perception_wet) !
                            {if}
                                (L.L.ai_pre_cockpit_stop_env_eager_door_23_opening_warm_dry_daytime_allowed) s1
                            {endif}
                        {endif}
                    {else}
                        (L.L.ai_pre_cockpit_env_perception_hot)
                        {if}
'                           // Case 6
                            1 s0
                            (L.L.ai_pre_cockpit_env_perception_wet) !
                            {if}
                                (L.L.ai_pre_cockpit_stop_env_eager_door_23_opening_hot_dry_allowed) s1
                            {endif}
                        {endif}
                    {endif}
                {endif}
            {endif}
            l0 (S.L.ai_pre_cockpit_stop_env_eager_door_01_opening_allowed)
            l1 (S.L.ai_pre_cockpit_stop_env_eager_door_23_opening_allowed)
        {endif}

'       // At non-prolonged stops, doors may be closed "eagerly", i.e. before OMSI tells the vehicle to depart, to
'       // simulate drivers "in a hurry". This is particularly visually stimulating when both doors were opened at
'       // some point, but only one is currently still in use (due to boarding or disembarking passengers), hence
'       // the other unnecessarily open one can be closed asynchronously prior to departure time.
'       // Preconditions:
'       // - Non-prolonged stop.
'       // - "Instant" stop (timetable arrival time = timetable departure time) or delayed (current time > timetable
'       //   departure time).
'       // - Random per-stop chance proportional to door-pc-factor.
'       // In a similar fashion, and independent of schedule, doors may also be closed eagerly when the weather
'       // conditions are either uncomfortably cold or hot (provided the A/C is running).
'       //
'       // XXX: Sometimes the bus will fail to predict late-arriving-passengers. In a worst-case-scenario, the
'       //      following happens:
'       //      1. Bus opens both doors -- front for passengers waiting at the stop to board, and rear one for
'       //         passengers wanting to disembark.
'       //      2. Boarding completes sooner than disembarking. Only at that time, some 20 m away from the vehicle,
'       //         OMSI decides to spawn another human, who then begins slooooowly approaching the vehicle to board.
'       //      3. The lone human walks towards the front door. The bus, being clueless about the fact (since it does
'       //         not get notified by the game until a human stands _right in front of_ a door) "eagerly" closes the
'       //         front door.
'       //      4. Disembarking has in the meantime completed, so the loner, now perceiving the rear door as "open" /
'       //         "clear", alters its route to approach it.
'       //      5. Before the unfortunate human can reach the rear door, the bus eagerly closes it as well.
'       //      6. Human walks back to front door, bus opens it, human boards, bus finally departs.
'       //
'       //      Outcome / conclusion:
'       //      It looks ugly and the bus ends up losing more time than it would have, had it simply "lazily" left both
'       //      doors open throughout the entirety of the stop's duration. Unfortunately, there is simply no way for
'       //      correctly predicting the general case. When a bus stops, it doesn't know _why_ it is told to (it has no
'       //      access to the so-called "stop profile" assigned via the editor), so all it can do is guess... in vain.
'       //      So why even bother with this feature? Well, simply because it succeeds more often than it fails (and
'       //      certainly looks nice when it does succeed!).
        (L.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed) -1 =
        {if}
            (L.L.schedule_active) (L.L.ai_pre_cockpit_stop_prolonging_heuristic) ! && 10000 random 10000 /
                (L.L.ai_pre_cockpit_door_pc_factor) 0.15 max 0.75 min < && 2 *
                (S.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed)
        {endif}
        (L.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed) 2 = (L.L.schedule_active) &&
        {if}
            (M.V.GetTTBusstopIndex) s0 (M.V.GetTTBusstopArr) l0 (M.V.GetTTBusstopDep) s0 =
            {if}
'               // "Instant" stop (timetable arrival time = timetable departure time).
'               // XXX: This heuristic will fail if:
'               //      - arrival time < timetable arrival time; and
'               //      - stop profile is "mandatory" ("always + wait for timetable departure time").
'               //      In the worse case the vehicle may then eagerly close doors up to 1 minute before departure (if
'               //      early by over ~1 minute, OMSI will convey that the engine be turned off, which in turn will be
'               //      interpreted as the stop being prolonged by the script, in turn preventing eager closure). So
'               //      why don't we then mandate that the vehicle _not_ be early (timetable delay > 0)? Well, while
'               //      that would fix the problem, it would also prevent the vehicle from legitimately eagerly closing
'               //      doors when having arrived early but the stop profile being "optional" ("on-demand" or
'               //      "always") -- that's why we favor this middle ground. Ultimately though, as with the more severe
'               //      limitation described above with regards to passenger flow, a proper, generic solution would
'               //      require access to the editor-assigned trip/stop profile, which is to our knowledge not possible
'               //      by ordinary means.
                1 (S.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed)
            {else}
                (L.S.Time) s1
'               // OMSI "past-midnight-bug": Timetable entries between 0~12 am become 24~36.
                (L.L.ai_pre_cockpit_stop_phase) 3 < l1 l0 > l0 86399 >= l1 43200 < && l1 86399 + l0 > && || &&
                    (L.L.ai_pre_cockpit_stop_phase) 3 = ||
                {if}
'                   // Delayed (current time > timetable departure time).
                    1 (S.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed)
                {endif}
            {endif}
        {endif}

'       // If open front door departure had been decided, but static factors (e.g. weather) changed in the meantime,
'       // clear the decision flag.
        (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed)
            (L.L.ai_pre_cockpit_stop_open_front_door_departure_primitives_met) ! &&
        {if}
            0 (S.L.ai_pre_cockpit_stop_open_front_door_departure_allowed)
        {endif}

'       // Pre-calculate some recurring sub-conditions:
'       // - Whether passengers are waiting to board and/or disembark from either door.
'       // - Eager, environment-wise, front door closure can be scheduled if:
'       //   - A/C running and temperature perceived as "warm" or above; or
'       //   - temperature perceived as "chilly" and it is additionally "nighttime" and/or "wet"; or
'       //   - temperature perceived as "cold" or below.
'       // - Equivalently for rear door:
'       //   - A/C running and temperature perceived as "warm" or above; or
'       //   - temperature perceived as "chilly" or below.
        (L.L.passenger_ac_running) (L.L.cp_taster_klima) (L.L.Cabinair_Temp) (L.S.Weather_Temperature) < && || s3
        (L.L.PAX_Entry0_Req) (L.L.PAX_Entry1_Req) || s4
        (L.L.PAX_Entry2_Req) (L.L.PAX_Entry3_Req) || (L.L.PAX_Exit0_Req) || (L.L.PAX_Exit1_Req) || (L.L.haltewunsch) ||
            (L.L.pandus_pos) 0.4 > || s5
        (L.L.ai_pre_cockpit_env_perception) 300 < (L.L.ai_pre_cockpit_env_perception) 400 <
            (L.L.ai_pre_cockpit_env_perception_wet) (L.L.ai_pre_cockpit_env_perception_nighttime) || && ||
            (L.L.ai_pre_cockpit_env_perception) 500 >= (L.L.ai_pre_cockpit_engine_target) && l3 && ||
            (S.L.ai_pre_cockpit_stop_env_eager_door_01_closing_allowed)
        (L.L.ai_pre_cockpit_env_perception) 400 < (L.L.ai_pre_cockpit_env_perception) 500 >=
            (L.L.ai_pre_cockpit_engine_target) && l3 && || (S.L.ai_pre_cockpit_stop_env_eager_door_23_closing_allowed)

'       // ----- Stop brake (aka 20-h) switch scheduling -----

'       // "Flip-to-engage" condition:
'       // - It is not time to depart; and
'       // - passenger window adjustment is not in progress (driver can't be both outside and inside their cubicle
'       //   simultaneously!); and
'       // - stop brake itself not already engaged; and either
'       //   - a door that is not coupled to the stop brake is to be opened; or
'       //   - the vehicle has been stopped sufficiently long (driver's foot tired from keeping brake pedal pushed).
        (L.L.ai_pre_cockpit_stop_phase) 3 < (L.L.velocity) (C.L.Door_Bremse_Halte_MaxKMH) < && (L.L.bremse_halte) ! &&
            (L.L.ai_pre_cockpit_door_23_sw_target) 1 = ! && (L.L.ai_pre_cockpit_door_01_sw_target) 1 =
            (L.L.doorTarget_0) || (L.L.doorTarget_1) || (L.L.door_cti_front_door_decoupled_from_stop_brake) &&
            (L.L.ai_pre_cockpit_stop_unconditional_stop_brake_engagement_delay) s0 -1 = !
            (L.L.ai_pre_cockpit_stop_arrival_timer) l0 > && || &&
        {if}
            (L.L.ai_pre_cockpit_stop_brake_sw_target) 1 = !
            {if}
                -1 (S.L.ai_pre_cockpit_stop_brake_sw_timer)
            {endif}
            1 (S.L.ai_pre_cockpit_stop_brake_sw_target)
        {else}
'           // "Flip-to-disengage" condition:
'           // - It is time to depart; and
'           // - passenger window adjustment is not in progress; and
'           // - front door closed, scheduled to be closed, or decided to be left open.
            (L.L.ai_pre_cockpit_stop_phase) 3 = (L.L.ai_pre_cockpit_stop_phase) 4 = s0 || (L.L.bremse_halte_sw) &&
                (L.L.ai_pre_cockpit_door_01_sw_target) -1 = (L.L.doorTarget_0) ! (L.L.doorTarget_1) ! && || l0 ||
                (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed) 1 = || &&
                (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
            {if}
                l0
                {if}
                    0 (S.L.ai_pre_cockpit_stop_brake_sw_timer)
                {else}
                    (L.L.ai_pre_cockpit_stop_brake_sw_target) -1 = !
                    {if}
                        -1 (S.L.ai_pre_cockpit_stop_brake_sw_timer)
                    {endif}
                {endif}
                -1 (S.L.ai_pre_cockpit_stop_brake_sw_target)
            {else}
'               // Do-nothing
                0 (S.L.ai_pre_cockpit_stop_brake_sw_target)
                -1 (S.L.ai_pre_cockpit_stop_brake_sw_timer)
            {endif}
        {endif}

'       // ----- Front door button scheduling -----

'       // "Push-to-open" condition:
'       // - It is not time to depart; and
'       // - passenger window adjustment is not in progress; and either
'       //   - someone wants to board; or
'       //   - this is a prolonged stop, engine shutdown has been scheduled, and eager, environment-wise, opening is
'       //     allowed.
'       // Additional context for differentiating opening delay calculation: Opening due to a passenger wishing to
'       // board vs eager opening due to having arrived at a prolonged stop.
        (L.L.ai_pre_cockpit_stop_phase) 3 < l4 (L.L.ai_pre_cockpit_engine_target) !
            (L.L.ai_pre_cockpit_stop_env_eager_door_01_opening_allowed) && l4 ! &&
            (S.L.ai_pre_cockpit_door_01_sw_target_context) || && (L.L.velocity) (C.L.tueroeffnung) < &&
            (L.L.doorTarget_0) ! && (L.L.doorTarget_1) ! && (L.L.door_0) 0.2 < && (L.L.door_1) 0.2 < &&
            (L.L.cockpit_tuertaster1) ! && (L.L.ai_pre_cockpit_door_01_sw_target_init_override) ! &&
            (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
        {if}
            (L.L.ai_pre_cockpit_door_lock_sw_timer) -1 = ! s0 (L.L.ai_pre_cockpit_door_01_sw_target) 1 = ! ||
                (L.L.ai_pre_cockpit_door_01_sw_target_context) ! (L.L.ai_pre_cockpit_door_01_sw_timer) 2 > && ||
            {if}
                -1 (S.L.ai_pre_cockpit_door_01_sw_timer)
                l0
                {if}
'                   // "Lazy" wing locking switch adjustment: If a wing locking switch adjustment has been scheduled,
'                   // but it seems like it will not occur until after the door has already been opened, reschedule it
'                   // to occur just before opening.

'                   // XXX: Normally at prolonged/2 (engine-off) stops, under hot conditions, the wing lock is reset,
'                   //      if previously engaged, such that both wings can be eagerly opened while the A/C is
'                   //      inactive. If however a passenger wishes to board just upon arrival, the wing lock may fail
'                   //      to be reset on time, causing only one wing to be opened. The underlying cause for this is
'                   //      that the stop's nature (prolonged vs regular) can only be acknowledged a few seconds after
'                   //      arrival, when OMSI sets the AI_Engine variable to -1. A fix would thus entail detecting
'                   //      this case (prolonged/2 stop + hot conditions + A/C active + door lock switch off + only one
'                   //      wing open) and responding by closing and re-opening the door. Fortunately this issue only
'                   //      tends to manifest at those rare intermediate stops where the engine is to be deactivated
'                   //      (since typically boarding does not occur at terminal/initial stops that are most often of
'                   //      the prolonged kind).
                    0.15 10000 random 10000 / 0.85 * + (L.L.ai_pre_cockpit_door_lock_sw_timer) min
                        (S.L.ai_pre_cockpit_door_lock_sw_timer)
                    0 (S.L.ai_pre_cockpit_door_01_sw_target)
                {else}
                    1 (S.L.ai_pre_cockpit_door_01_sw_target)
                {endif}
            {endif}
        {else}
'           // "Push-to-close" condition:
'           // - No one wants to board; and
'           // - passenger window adjustment is not in progress; and either
'           //   - it is time to depart; or
'           //   - eager, timetable-wise, closing is allowed; or
'           //   - eager, environment-wise, closing is allowed.
'           // Additional context for differentiating closure delay calculation: Eager closure vs departure time
'           // closure.
'           // Edge cases - immediate closure:
'           // - If stop phase anomaly detected.
'           // - If user had triggered emergency opening valve prior to AI takeover.
            (L.L.ai_pre_cockpit_stop_phase) 3 = (L.L.engine_revs_since_start) 100 >
                (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 = (L.L.engine_on) && || &&
                (L.L.ai_pre_cockpit_engine_target) && (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
                (L.L.ai_pre_cockpit_stop_phase) 4 = s1 || (L.L.ai_pre_cockpit_stop_env_eager_door_01_closing_allowed)
                (L.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed) 1 = || l4 ! &&
                (S.L.ai_pre_cockpit_door_01_sw_target_context)
                (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! && || (L.L.doorTarget_0) (L.L.door_0) 0.8 > &&
                (L.L.doorTarget_1) (L.L.door_1) 0.8 > && || && (L.L.cockpit_tuertaster1) ! &&
                (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed) 1 = ! &&
            {if}
                l1
                {if}
                    0 (S.L.ai_pre_cockpit_door_01_sw_timer)
                {else}
                    (L.L.ai_pre_cockpit_door_01_sw_target) -1 = !
                    {if}
                        -1 (S.L.ai_pre_cockpit_door_01_sw_timer)
                    {endif}
                {endif}
                -1 (S.L.ai_pre_cockpit_door_01_sw_target)
                0 (S.L.ai_pre_cockpit_door_01_sw_target_init_override)
            {else}
'               // Do-nothing, unless button already pushed, in which case it will first have to be released.
                (L.L.ai_pre_cockpit_door_01_sw_target) -2 = !
                {if}
                    0 (S.L.ai_pre_cockpit_door_01_sw_target)
                    -1 (S.L.ai_pre_cockpit_door_01_sw_timer)
                {endif}
            {endif}
        {endif}

'       // ----- Rear door button scheduling -----

'       // "Push-to-open" condition:
'       // - It is not time to depart; and
'       // - passenger window adjustment is not in progress; and either
'       //   - someone wants to board or disembark; or
'       //   - this is a prolonged stop, engine shutdown has been scheduled, and eager, environment-wise, opening is
'       //     allowed.
'       // Additional context for differentiating opening delay calculation: Opening due to a passenger wishing to
'       // board or disembark vs eagerly opening due to having arrived at a prolonged stop.
        (L.L.ai_pre_cockpit_stop_phase) 3 < l5 (L.L.ai_pre_cockpit_engine_target) !
            (L.L.ai_pre_cockpit_stop_env_eager_door_23_opening_allowed) && l5 ! &&
            (S.L.ai_pre_cockpit_door_23_sw_target_context) || && (L.L.velocity) (C.L.tueroeffnung) < &&
            (L.L.doorTarget_23_delayed) ! && (L.L.door_2) 0.2 < && (L.L.door_3) 0.2 < && (L.L.cockpit_tuertaster2) ! &&
            (L.L.ai_pre_cockpit_door_23_sw_target_init_override) ! &&
            (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
        {if}
            (L.L.ai_pre_cockpit_door_23_sw_target) 1 = ! (L.L.ai_pre_cockpit_door_23_sw_target_context) !
                (L.L.ai_pre_cockpit_door_23_sw_timer) 1.5 > && ||
            {if}
                -1 (S.L.ai_pre_cockpit_door_23_sw_timer)
            {endif}
            1 (S.L.ai_pre_cockpit_door_23_sw_target)
        {else}
'           // "Push-to-close" condition:
'           // - No one wants to board or disembark; and
'           // - passenger window adjustment is not in progress; and either
'           //   - It is time to depart; or
'           //   - eager, timetable-wise, closing is allowed; or
'           //   - eager, environment-wise, closing is allowed.
'           // Additional context for differentiating closure delay calculation: Eager closure vs departure time
'           // closure.
'           // Edge cases - immediate closure:
'           // - If stop phase anomaly detected.
'           // - If user had triggered emergency opening valve prior to takeover.
            (L.L.ai_pre_cockpit_stop_phase) 3 = (L.L.engine_revs_since_start) 100 >
                (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 = (L.L.engine_on) && || &&
                (L.L.ai_pre_cockpit_engine_target) && (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
                (L.L.ai_pre_cockpit_stop_phase) 4 = s1 || (L.L.ai_pre_cockpit_stop_env_eager_door_23_closing_allowed)
                (L.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed) 1 = || l5 ! &&
                (S.L.ai_pre_cockpit_door_23_sw_target_context)
                (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! && ||
                (L.L.doorTarget_23_delayed) (L.L.door_2) 0.8 > && (L.L.door_3) 0.8 > && &&
                (L.L.cockpit_tuertaster2) ! && (L.L.pandus_pos) 0.2 < &&
            {if}
                l1
                {if}
                    0 (S.L.ai_pre_cockpit_door_23_sw_timer)
                {else}
                    (L.L.ai_pre_cockpit_door_23_sw_target) -1 = !
                    {if}
                        -1 (S.L.ai_pre_cockpit_door_23_sw_timer)
                    {endif}
                {endif}
                -1 (S.L.ai_pre_cockpit_door_23_sw_target)
                0 (S.L.ai_pre_cockpit_door_23_sw_target_init_override)
            {else}
'               // Do-nothing, unless button already pushed, in which case it will first have to be released.
                (L.L.ai_pre_cockpit_door_23_sw_target) -2 = !
                {if}
                    0 (S.L.ai_pre_cockpit_door_23_sw_target)
                    -1 (S.L.ai_pre_cockpit_door_23_sw_timer)
                {endif}
            {endif}
        {endif}

'       // Drag rear door ramp closed if it had been dragged open by user prior to AI takeover.
        (L.L.pandus_pos) 0.2 > (L.L.door_2) 0.9 > && (L.L.door_3) 0.9 > &&
        {if}
            1 (S.L.pandus_dragged)
            (L.L.pandus_pos) s0 0.2 s1 1 10000 random 10000 / * + s2 (M.L.utils_gradual_constant_update)
                l0 (S.L.pandus_pos) (S.L.pandus_lastpos)
        {else}
            0 (S.L.pandus_dragged)
        {endif}

'       // ----- Departure -----

        0 s0
        (L.L.ai_pre_cockpit_stop_phase) 2 = (L.L.ai_pre_cockpit_stop_phase) 4 = ||
        {if}
'           // Step 1: Acknowledge OMSI's departure notification (AI_Scheduled_AtStation -1 -> 0) without otherwise
'           // proceeding to depart...
            0 (S.L.AI_Scheduled_AtStation)
            (L.L.ai_pre_cockpit_stop_phase) 4 =
            {if}
'               // ...except in the event of abrupt contextual change (stop-phase = 4), where we actually depart
'               // immediately.
                0 (S.L.ai_pre_cockpit_stop_prolonging_heuristic) (S.L.ai_pre_cockpit_stop_parking_maneuver_heuristic)
                -1 (S.L.ai_pre_cockpit_stop_unconditional_stop_brake_engagement_delay)
                    (S.L.ai_pre_cockpit_stop_env_eager_door_01_opening_allowed)
                    (S.L.ai_pre_cockpit_stop_env_eager_door_23_opening_allowed)
                    (S.L.ai_pre_cockpit_stop_departure_delay_estimate)
                    (S.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed)
            {endif}
        {else}
            (L.L.ai_pre_cockpit_stop_phase) 3 =
            {if}
'               // Step 2: Now we've ensured that stop overlapping is not in effect (otherwise the stop phase would
'               // have transitioned back to 1). Begin preparations for departure.

'               // Establish actual departure delay
                (L.L.ai_pre_cockpit_stop_departure_delay) -1 =
                {if}
                    0 s1
                    (L.L.bremse_halte)
                    {if}
'                       // If stop brake engaged, people likely boarded at current stop, hence we should wait longer --
'                       // long enough to ensure doors have closed (satisfactorily), and that new passengers have had
'                       // some time to walk to their seats.
                        (L.L.doorTarget_0) ! (L.L.doorTarget_1) ! &&
                            (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed) 1 = ||
                            (L.L.doorTarget_23_delayed) ! &&
                        {if}
'                           // 1. (Exception:) When both doors have already been fully closed (eagerly), and this is
'                           //    not a prolonged stop (where there usually is no reason to hurry), then speed things
'                           //    up a bit by reducing the statically-allocated delay by 25~50%.
                            (L.L.ai_pre_cockpit_door_01_sw_target_context)
                                (L.L.ai_pre_cockpit_door_23_sw_target_context) &&
                                (L.L.ai_pre_cockpit_stop_prolonging_heuristic) ! &&
                            {if}
                                (L.L.ai_pre_cockpit_stop_departure_delay_estimate) 0.5 10000 random 10000 /
                                    0.25 * + * (S.L.ai_pre_cockpit_stop_departure_delay_estimate)
                            {endif}
                        {else}
'                           // 2. Otherwise, delay = static delay + t-extra, where t-extra:
'                           //    - Is 0, if the number of passengers is below the established vehicle-specific
'                           //      ("significance") threshold, and there are no walking passengers close to front
'                           //      door, nor any standing passengers.
'                           //    - Is 0~5 seconds, otherwise.
                            10000 random 10000 / 5 * (L.L.humans_count)
                                (L.L.ai_pre_cockpit_significant_number_of_passengers) >=
                                (L.L.ai_pre_cockpit_passengers_relocating_close_to_front_door) ||
                                (L.L.ai_pre_cockpit_passengers_standing) || * (L.L.ai_pre_cockpit_door_pc_factor) * s1
                        {endif}
                    {else}
'                       // Otherwise differentiate based on the stop-prolonging flag...
                        (L.L.ai_pre_cockpit_stop_prolonging_heuristic)
                        {if}
'                           // ...but also the parking-maneuver flag
                            (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 =
                            {if}
                                (L.L.ai_pre_cockpit_stop_prolonging_heuristic) 2 =
                                {if}
'                                   // 3. Wait just long enough for graceful engine re-ignition:
'                                   //    delay = static * 0~25%
                                    (L.L.ai_pre_cockpit_stop_departure_delay_estimate) 10000 random 10000 / 0.25 * *
                                {else}
'                                   // 4. Otherwise don't wait at all.
                                    0
                                {endif}
                            {else}
'                               // Otherwise (non-parking-maneuver-style departure) allocate:
'                               // 5. 25~50% of static delay if engine was switched off; or
'                               // 6. 0~25% of static delay, otherwise.
'                               // Reminder: Static delay is already high for prolonged stops, since enough room is
'                               // then needed for other adjustments, such as of passenger windows or sun blinds, to
'                               // gracefully complete.
                                (L.L.ai_pre_cockpit_stop_prolonging_heuristic) 2 =
                                {if}
                                    (L.L.ai_pre_cockpit_stop_departure_delay_estimate) 0.25 10000 random 10000 /
                                        0.25 * + *
                                {else}
                                    (L.L.ai_pre_cockpit_stop_departure_delay_estimate) 10000 random 10000 / 0.25 * *
                                {endif}
                            {endif}
                        {else}
'                           // Otherwise (non-prolonged stop, and stop brake was never engaged to begin with) don't
'                           // wait at all.
                            0
                        {endif}
                        (S.L.ai_pre_cockpit_stop_departure_delay_estimate)
                    {endif}
'                   // Departure timer is 1 frame ahead, since it began counting at 1 -> 2 transition frame.
                    (L.L.ai_pre_cockpit_stop_departure_delay_estimate) l1 + (L.L.ai_pre_cockpit_stop_departure_timer) +
                        (S.L.ai_pre_cockpit_stop_departure_delay)
                {endif}

                -1 (S.L.ai_pre_cockpit_stop_unconditional_stop_brake_engagement_delay)

'               // Departure condition:
'               // - Departure delay elapsed.
'               // - Engine running.
'               // - Transmission mode set to "D".
'               // - Handbrake released.
'               // - Delay has elapsed.
'               // - Doors closed or closure has been scheduled.
'               // - Stop brake disengaged, or disengagement has been scheduled.
'               // - Neither the sun blinds, nor the passenger windows are currently undergoing adjustment by the
'               //   driver.
'               // - OMSI reports the vehicle's path as clear (Throttle > 0).
                (L.L.ai_pre_cockpit_stop_departure_timer) (L.L.ai_pre_cockpit_stop_departure_delay) >=
                    (L.L.bremse_halte_sw) ! (L.L.ai_pre_cockpit_stop_brake_sw_target) -1 =
                    (L.L.ai_pre_cockpit_stop_brake_sw_timer) -1 = ! && || && (L.L.doorTarget_0) !
                    (L.L.doorTarget_1) ! && (L.L.ai_pre_cockpit_door_01_sw_target) -1 =
                    (L.L.ai_pre_cockpit_door_01_sw_timer) -1 = ! && ||
                    (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed) 1 = || &&
                    (L.L.doorTarget_23_delayed) ! (L.L.ai_pre_cockpit_door_23_sw_target) -1 =
                    (L.L.ai_pre_cockpit_door_23_sw_timer) -1 = ! && || && (L.L.engine_on) &&
                    (L.L.engine_revs_since_start) 100 > (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 = || &&
                    (L.L.ai_pre_cockpit_engine_target) && (L.L.antrieb_getr_gangvorwahl) 4 = &&
                    (L.L.ai_pre_cockpit_transmission_target) && (L.L.bremse_feststell) ! &&
                    (L.L.ai_pre_cockpit_handbrake_target) ! &&
                    (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) -1 =
                    (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) 5 > ||
                    (L.L.ai_pre_cockpit_main_sun_blind_adjustment_target) -1 = || &&
                    (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) -1 =
                    (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) 5 > ||
                    (L.L.ai_pre_cockpit_side_sun_blind_adjustment_target) -1 = || && (L.L.pandus_pos) 0.2 < &&
                    (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! && (L.L.throttle) &&
                {if}
'                   // Actual departure
                    0 (S.L.AI_Scheduled_AtStation) (S.L.ai_pre_cockpit_stop_phase)
                        (S.L.ai_pre_cockpit_stop_prolonging_heuristic)
                    -1 (S.L.ai_pre_cockpit_stop_departure_delay_estimate)
                        (S.L.ai_pre_cockpit_stop_env_eager_door_01_opening_allowed)
                        (S.L.ai_pre_cockpit_stop_env_eager_door_23_opening_allowed)
                        (S.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed)
                    (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 =
                    {if}
                        -1 (S.L.ai_pre_cockpit_stop_parking_maneuver_heuristic)
                    {else}
                        (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) -1 =
                        {if}
                            0 (S.L.ai_pre_cockpit_stop_parking_maneuver_heuristic)
                        {endif}
                    {endif}
'                   // Defer stop brake release until next frame, as part of unscheduled stop workflow, below.
                    (L.L.bremse_halte)
                    {if}
                        3 (S.L.ai_pre_cockpit_unscheduled_stop_phase)
                    {endif}
                {else}
                    1 s0
                {endif}
            {endif}
        {endif}
        l0 !
        {if}
            -1 (S.L.ai_pre_cockpit_stop_departure_delay)
        {endif}
    {else}

'       // ----- Unscheduled stop -----

'       // The vehicle enters an unscheduled stop every time it reaches zero velocity while not at a scheduled stop
'       // (stop-phase = 0). At that time, and until OMSI notifies it to move again (Throttle > 0), following events
'       // occur:
'       // - The stop brake switch is scheduled to be flipped (off -> on). The delay depends on:
'       //   - The vehicle's unscheduled stop brake usage frequency factor.
'       //   - A "cool-down" ("anti-repeat") period since last activation, to prevent the vehicle from too frequently
'       //      toggling the switch in "tight loops" (traffic jams).
'       // - The stop brake switch gets actually flipped. The brake pedal is released with a small random delay.
'       // - The stop brake switch is scheduled to be flipped (on -> off) anew. The delay is random. Sometimes it's
'       //    not until departure that the switch gets reset.
'       // - Stop brake switch gets flipped / reset.
'       // - When having been _continuously_ instructed to move for over a small period of time, then:
'       //   - Stop brake switch reset, if not already.
'       //   - Then, potentially after another brief random moment, throttle pedal quickly "tapped" just to release
'       //     stop brake.
'       //   - Lastly, likewise with a chance of quick random delay, throttle pedal firmly pushed as much as the game
'       //     instructs (actual Throttle variable value) in order to accelerate.
'       // Note: Throttle and brake pedal adjustment is handled by cockpit:throttle_brake_frame. That macro leverages
'       //       the scheduled and unscheduled stop phases established herein to override either pedal's position as
'       //       appropriate.
'       // XXX: Since the vehicle does not know _why_ it has been asked to stop, and thus cannot estimate for how long
'       //      it will be stopped, it may sometimes engage the stop brake in a context where doing so makes little to
'       //      absolutely no sense at all (e.g. when waiting for an opportunity ("traffic opening") to make a turn on
'       //      a non-prioritized path, e.g. enter a major from a side road), where every second matters. As with the
'       //      "eager timetable-wise door closure" feature explained in the scheduled stop block above, this one too
'       //      succeeds more often than it fails and that is why it has been introduced, contrasted to the alternative
'       //      of instantly releasing the stop brake when asked by the game to move again, which, while indeed more
'       //      "fault-tolerant", would also deprive the behavior of much-needed realism, since an actual human does
'       //      needs a second or two to react.

'       // 0 -> 1 (cycling prevention transition): Stop brake can only be reengaged after having throttled at least a
'       // bit since the last standstill where it had been engaged.
        (L.L.ai_pre_cockpit_unscheduled_stop_phase) s0 0 = (L.L.velocity) (C.L.Door_Bremse_Halte_MaxKMH) >=
            (L.L.throttle) || (L.L.brake) ! || && (L.L.bremse_halte) ! &&
        {if}
            1 s0
        {endif}

'       // Additional cycling prevention assurance: Wait 3~33 seconds between consecutive toggles of the stop brake
'       // switch.
        (L.L.bremse_halte) !
        {if}
            (L.L.ai_pre_cockpit_unscheduled_stop_brake_usage_cooldown_timer) -1 =
            {if}
                3 10000 random 10000 / 30 * 1 (L.L.ai_pre_cockpit_unscheduled_stop_brake_usage_frequency) - * +
                    (S.L.ai_pre_cockpit_unscheduled_stop_brake_usage_cooldown_timer)
            {endif}
            (L.L.ai_pre_cockpit_unscheduled_stop_brake_usage_cooldown_timer)
            {if}
                (L.L.ai_pre_cockpit_unscheduled_stop_brake_usage_cooldown_timer) (L.S.Timegap) - 0 max
                    (S.L.ai_pre_cockpit_unscheduled_stop_brake_usage_cooldown_timer)
            {endif}
        {else}
            -1 (S.L.ai_pre_cockpit_unscheduled_stop_brake_usage_cooldown_timer)
        {endif}

        l0 1 =
        {if}
            (L.L.velocity) (C.L.Door_Bremse_Halte_MaxKMH) < (L.L.throttle) ! && (L.L.brake) &&
            {if}
'               // ----- Unscheduled arrival -----

                (L.L.bremse_halte) !
                {if}
'                   // 1 -> 2: Schedule stop brake switch activation.
                    (L.L.ai_pre_cockpit_unscheduled_stop_brake_usage_cooldown_timer) !
                    {if}
                        1 (S.L.ai_pre_cockpit_stop_brake_sw_target)
                        10000 random 10000 / (L.L.ai_pre_cockpit_unscheduled_stop_brake_usage_frequency) <
                        {if}
'                           // Default / short delay
                            -1
                        {else}
'                           // Longer delay
                            15 10000 random 10000 / 105 * +
                        {endif}
                        (S.L.ai_pre_cockpit_stop_brake_sw_timer)
                        2 s0
                    {endif}
                {else}
'                   // 1 -> 3: Stop brake switch toggled on.
                    3 s0
                {endif}
            {endif}
        {endif}

        l0 1 > (L.L.velocity) (C.L.Door_Bremse_Halte_MaxKMH) >= (L.L.throttle) || (L.L.brake) ! || &&
        {if}
'           // ----- Unscheduled departure -----

            l0 2 <=
            {if}
'               // 2 -> 0: Can depart immediately, since stop brake not engaged to begin with, just scheduled.
                0 s0 (S.L.ai_pre_cockpit_stop_brake_sw_target)
                -1 (S.L.ai_pre_cockpit_stop_brake_sw_timer)
            {else}
                l0 3 =
                {if}
'                   // Get departure-ready; if sun blind adjustment in progress, wait for it to complete; if stop brake
'                   // switch still on, schedule its deactivation now.
                    (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) -1 =
                        (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) 5 > ||
                        (L.L.ai_pre_cockpit_main_sun_blind_adjustment_target) -1 = ||
                        (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) -1 =
                        (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) 5 > ||
                        (L.L.ai_pre_cockpit_side_sun_blind_adjustment_target) -1 = || &&
                    {if}
'                       // 3 -> 4: Departure-ready
                        (L.L.bremse_halte_sw)
                        {if}
                            -1 (S.L.ai_pre_cockpit_stop_brake_sw_target) (S.L.ai_pre_cockpit_stop_brake_sw_timer)
                        {endif}
                        4 s0
                    {endif}
                {else}
'                   // 4 -> 0 (departure + cycling prevention transition): Stop brake can only be reengaged after
'                   // having throttled at least a bit (such that phase once again 1).
                    0 s0
                {endif}
            {endif}
        {else}
            l0 4 =
            {if}
                (L.L.bremse_halte)
                {if}
'                   // 4 -> 3: Departure canceled; path got blocked again in the meantime.
                    3 s0
                {endif}
            {endif}
        {endif}

        l0 (S.L.ai_pre_cockpit_unscheduled_stop_phase)

'       // Schedule front door closure if we had decided to leave it open at last (scheduled stop) departure, but
'       // environmental constraints no longer hold (e.g. it's now raining).
        (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed)
            (L.L.ai_pre_cockpit_stop_open_front_door_departure_primitives_met) ! &&
            (L.L.ai_pre_cockpit_door_01_sw_target) -2 = ! &&
        {if}
            0 (S.L.ai_pre_cockpit_stop_open_front_door_departure_allowed)
            -1 (S.L.ai_pre_cockpit_door_01_sw_target) (S.L.ai_pre_cockpit_door_01_sw_timer)
        {else}
            (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed) 1 =
            {if}
                -1 (S.L.ai_pre_cockpit_stop_open_front_door_departure_allowed)
            {endif}
        {endif}

'       // Also schedule front door closure in the following edge case:
'       // 1. Suppose the vehicle just arrived at a stop and door opening is triggered, regardless of context.
'       // 2. While the door wing(s) _just began_ opening, OMSI re-spawns the vehicle, for whatever reason.
'       // 3. Door closure cannot get scheduled, because, for button-wise closing to be acknowledged by door script,
'       //    wings must be above 50% open. Thus the vehicle's sole shot at adapting (the frame during which
'       //    stop-phase = 4 frame), door-wise, goes to waste.
'       // 4. Vehicle ends up driving on with its front door erroneously open until the next scheduled stop arrival, if
'       //    front door decoupled from stop brake, or remains stuck indefinitely, unable to release the stop brake.
        (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed) ! (L.L.ai_pre_cockpit_door_01_sw_target) ! &&
            (L.L.doorTarget_0) (L.L.door_0) 0.8 > && (L.L.doorTarget_1) (L.L.door_1) 0.8 > && || &&
        {if}
            -1 (S.L.ai_pre_cockpit_door_01_sw_target) (S.L.ai_pre_cockpit_door_01_sw_timer)
        {endif}

'       // ...likewise for rear door.
        (L.L.ai_pre_cockpit_door_23_sw_target) ! (L.L.doorTarget_23_delayed) && (L.L.door_2) 0.8 > &&
            (L.L.door_3) 0.8 > &&
        {if}
            -1 (S.L.ai_pre_cockpit_door_23_sw_target) (S.L.ai_pre_cockpit_door_23_sw_timer)
        {endif}
    {endif}

'   // ----- Stop brake switch adjustment -----

    (L.L.ai_pre_cockpit_stop_brake_sw_timer) 0 >
    {if}
        (L.L.ai_pre_cockpit_stop_brake_sw_timer) (L.S.Timegap) - 0 max (S.L.ai_pre_cockpit_stop_brake_sw_timer)
    {endif}

    (L.L.ai_pre_cockpit_stop_brake_sw_target) 1 =
    {if}
'       // ----- Flip to engage -----

'       // Default short off -> on delay (both the scheduled and unscheduled arrival sections above sometimes override
'       // this by explicitly assigning higher values).
        (L.L.ai_pre_cockpit_stop_brake_sw_timer) -1 =
        {if}
            0.15 10000 random 10000 / 0.85 * + (S.L.ai_pre_cockpit_stop_brake_sw_timer)
        {endif}

        (L.L.ai_pre_cockpit_stop_brake_sw_timer) !
        {if}
            1 (S.L.bremse_halte_sw)
            (T.L.ev_VDV_on)
            (L.L.ai_pre_cockpit_unscheduled_stop_phase) 2 =
            {if}
'               // In the context of an unscheduled stop, schedule resetting (on -> off) after a delay.
                -1 (S.L.ai_pre_cockpit_stop_brake_sw_target)
                10000 random 10000 / 0.75 <
                {if}
'                   // 1. Quick / "toggle" mode: 0.3~2 sec
                    -1
                {else}
                    10000 random 10000 / 0.5 <
                    {if}
'                       // 2. "Lazy": 10~30 sec (or right before departure, whatever comes first)
                        10 10000 random 10000 / 20 * +
                    {else}
'                       // 3. "Laziest": 1 hour (hence virtually always right before departure)
                        3600
                    {endif}
                {endif}
                (S.L.ai_pre_cockpit_stop_brake_sw_timer)
                3 (S.L.ai_pre_cockpit_unscheduled_stop_phase)
            {else}
                0 (S.L.ai_pre_cockpit_stop_brake_sw_target)
                -1 (S.L.ai_pre_cockpit_stop_brake_sw_timer)
            {endif}
        {endif}
    {else}
        (L.L.ai_pre_cockpit_stop_brake_sw_target) -1 =
        {if}
'           // ----- Flip to disengage -----

            (L.L.ai_pre_cockpit_stop_brake_sw_timer) -1 =
            {if}
                (L.L.ai_pre_cockpit_door_pc_factor) s0
                (L.L.ai_pre_cockpit_stop_phase)
                {if}
'                   // Scheduled departure:
'                   // - minimum delay: 1 sec
'                   // - maximum delay: until (departure-delay - 0~3) sec have elapsed, proportionally to
'                   //   door-pc-factor ("naughtier" drivers flip switch sooner, thus increasing chances of departure
'                   //   before (full) front door closure).
'                   // Note: Most times door button pushing for closure will precede stop brake switch deactivation
'                   //       (here we rely on the dynamic departure delay, as opposed to the static one -- which tends
'                   //       to be lower -- relied on by the door button adjustment logic further down).
                    (L.L.ai_pre_cockpit_stop_departure_delay) 0 max 10000 random 10000 / 3 * 1 l0 - * - 1 max
                {else}
'                   // Unscheduled departure: 0.3~2 sec (default case -- may be explicitly set to a higher value in
'                   // activation branch above)
                    0.3 10000 random 10000 / 1.7 * +
                {endif}
                (S.L.ai_pre_cockpit_stop_brake_sw_timer)
            {endif}

            (L.L.ai_pre_cockpit_stop_brake_sw_timer) !
            {if}
                0 (S.L.bremse_halte_sw)
                (T.L.ev_VDV_off)
                0 (S.L.ai_pre_cockpit_stop_brake_sw_target)
                -1 (S.L.ai_pre_cockpit_stop_brake_sw_timer)
            {endif}
        {endif}
    {endif}

'   // ----- Front door button adjustment -----

    (L.L.ai_pre_cockpit_door_01_sw_timer) 0 >
    {if}
        (L.L.ai_pre_cockpit_door_01_sw_timer) (L.S.Timegap) - 0 max (S.L.ai_pre_cockpit_door_01_sw_timer)
    {endif}

    (L.L.ai_pre_cockpit_door_01_sw_target) 1 =
    {if}
'       // ----- Push to open -----

        (L.L.ai_pre_cockpit_door_01_sw_timer) -1 =
        {if}
            (L.L.ai_pre_cockpit_door_01_sw_target_context)
            {if}
'               // unconditional opening scheduled due to prolonged stop arrival: 0.5~15 sec
                14.5
            {else}
'               // opening due to passengers wishing to board: 0.5~2 sec
                1.5
            {endif}
            10000 random 10000 / * 0.5 + (S.L.ai_pre_cockpit_door_01_sw_timer)
        {endif}

        (L.L.ai_pre_cockpit_door_01_sw_timer) !
        {if}
            1 (S.L.cockpit_tuertaster1)
            (T.L.ev_tuertaster_ein)
            -1 (S.L.ai_pre_cockpit_door_01_sw_timer)
            -2 (S.L.ai_pre_cockpit_door_01_sw_target)
        {endif}
    {else}
        (L.L.ai_pre_cockpit_door_01_sw_target) -1 =
        {if}
'           // ----- Push to close -----

            (L.L.ai_pre_cockpit_door_01_sw_timer) -1 =
            {if}
                (L.L.ai_pre_cockpit_door_pc_factor) s0
                (L.L.ai_pre_cockpit_stop_phase)
                {if}
                    (L.L.ai_pre_cockpit_stop_departure_delay_estimate) s1
                    (L.L.ai_pre_cockpit_door_01_sw_target_context)
                    {if}
'                       // A. Eager closure:
'                       // - minimum delay: 4 sec
'                       // - maximum delay:
'                       //   - prolonged stop + non-parking-maneuver-style departure:
'                       //     min(5~15, departure-delay) sec, proportionally to door-pc-factor.
'                       //   - otherwise:
'                       //     min(4~8, departure-delay) sec, likewise.
'                       // Note: "Naughtier" (lower door-pc-factor) drivers value their own comfort more than their
'                       //       passengers' comfort and safety. Here this actually translates to
'                       //       earlier-than-necessary door closure, in order to:
'                       //       - save time (eager timetable-wise closure); or
'                       //       - prevent the interior's temperature from fluctuating too much, either upwards (when
'                       //         it is hot outside, and A/C active) or downwards (when cold outside) (eager
'                       //         environment-wise closure). For passengers that might constitute borderline rude
'                       //         behavior.
                        (L.L.ai_pre_cockpit_stop_prolonging_heuristic)
                            (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 = ! &&
                            (L.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed) 1 = ||
                            (L.L.ai_pre_cockpit_stop_env_eager_door_01_closing_allowed) ! &&
                        {if}
                            5 s2 10 s3
                        {else}
                            4 s2 s3
                        {endif}
                        l2 10000 random 10000 / l3 * 1 l0 - * + l1
                            (L.L.ai_pre_cockpit_stop_departure_timer) 0 max - 0 max min 4 max
                    {else}
'                       // B. Normal closure at departure time
'                       // Note: As opposed to the previous case of eager closure, here the dynamic portion of the
'                       //       closure delay is _inversely proportional_ to the driver's door-pc-factor, i.e.,
'                       //       "naughtier" drivers will have a tendency of closing doors later-than-necessary,
'                       //       typically to just give the vehicle "a chance to breathe", particularly when warm
'                       //       outside. Again, that might constitute borderline rude or reckless behavior for
'                       //       passengers, due to their safety and/or punctuality of departure being neglected.
'                       // ---
'                       // Case 1 - relatively prompt closure / "most-PC-case"
'                       // This is the most frequently selected case when doors cannot be closed eagerly. When
'                       // selected, the front door will most likely fully close before (attempting) departure. Its
'                       // selection probability is proportional to the door-pc-factor, as well as the following:
'                       // - the front door being coupled to stop brake, thus motivating the driver to close it in
'                       //   advance of attempting departure; or
'                       // - there being standing or still moving passengers, or passengers seated in the front row,
'                       //   or there otherwise being an overall (subjectively defined) significant number of
'                       //   passengers on board, constituting a safety risk.
                        10000 random 10000 / l0 (L.L.ai_pre_cockpit_stop_prolonging_heuristic)
                            (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 =
                            (L.L.door_cti_front_door_decoupled_from_stop_brake) ! * +
                            (L.L.ai_pre_cockpit_passengers_seated_close_to_front_door) +
                            (L.L.ai_pre_cockpit_passengers_relocating_close_to_front_door) +
                            (L.L.ai_pre_cockpit_passengers_standing) + (L.L.humans_count)
                            (L.L.ai_pre_cockpit_significant_number_of_passengers) >= + l0 2 / * + <
                        {if}
'                           // - minimum delay: 3 sec
'                           // - maximum delay: (departure-delay - 0~2) sec, inversely proportionally to
'                           //   door-pc-factor.
                            l1 (L.L.ai_pre_cockpit_stop_departure_timer) 0 max - 0 max 10000 random 10000 / 2 *
                                1 l0 - * - 3 max
                        {else}
'                           // Case 2 - somewhat delayed closure / "somewhat-non-PC-case"
'                           // This is the second most likely case when the first one has not been selected. When
'                           // chosen, vehicle is likely to depart prior to the front door having been fully closed, or
'                           // even prior to having initiated closure. Its selection likelihood is proportional to a
'                           // high baseline / unconditional probability. Additionally, this case is always selected
'                           // should one or more of the following hold:
'                           // - the environmental temperature being below "ideal" or above "warm";
'                           // - the exterior lighting being active (drivers generally don't like the driver's light to
'                           //   be on while driving, so they'll try to more promptly close front door then);
'                           // - the environment being dark (visibility worse, so driver inclined to close door
'                           //   sooner;
'                           // - the front door being coupled to stop brake.
                            (L.L.ai_pre_cockpit_env_perception) s2 400 < l2 600 >= ||
                                (L.L.ai_pre_cockpit_env_perception_wet) || 10000 random 10000 / 0.75 < ||
                                (L.L.door_cti_front_door_decoupled_from_stop_brake) ! ||
                                (L.L.lights_ai_env_brightness) 0.75 < (L.L.ai_pre_cockpit_env_perception_nighttime) ||
                                (L.L.cp_light_sw) && 10000 random 10000 / 0.85 < && ||
                            {if}
'                               // delay variation: (departure-delay + 0~5) sec, inversely proportionally to
'                               // door-pc-factor.
                                5
                            {else}
'                               // Case 3 - delayed closure / "definitely-non-PC-case"
'                               // This is the most unlikely case. Initiating front door closure may occur
'                               // significantly after departure.
'                               // delay variation: (departure-delay + 0~20) sec, inversely proportionally to
'                               // door-pc-factor.
                                20
                            {endif}
                            10000 random 10000 / * 1 l0 - * l1 (L.L.ai_pre_cockpit_stop_departure_timer) 0 max -
                                0 max +
                        {endif}
                    {endif}
                {else}
'                   // C. Closure en route
'                   // This branch is reserved for closure outside of the context of a scheduled stop; typically when
'                   // the vehicle had decided to depart from the last scheduled stop with permanently-open front door,
'                   // but the environmental preconditions the decision was based on no longer hold (e.g. it started
'                   // raining).
'                   // delay variation: 0~3 sec, inversely proportionally to door-pc-factor.
                    10000 random 10000 / 3 * 1 l0 - *
                {endif}
                (S.L.ai_pre_cockpit_door_01_sw_timer)
            {endif}

            (L.L.ai_pre_cockpit_door_01_sw_timer) !
            {if}
                (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed) -1 =
                {if}
                    1 (S.L.ai_pre_cockpit_stop_open_front_door_departure_allowed)
                {endif}
                (M.L.ai_pre_cockpit_evaluate_open_front_door_departure)
                    (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed) !
                {if}
                    1 (S.L.cockpit_tuertaster1)
                    (T.L.ev_tuertaster_ein)
                    -2
                {else}
                    0
                {endif}
                (S.L.ai_pre_cockpit_door_01_sw_target)
                -1 (S.L.ai_pre_cockpit_door_01_sw_timer)
            {endif}
        {else}
            (L.L.ai_pre_cockpit_door_01_sw_target) -2 =
            {if}
'               // ----- Release -----

                (L.L.ai_pre_cockpit_door_01_sw_timer) -1 =
                {if}
'                   // Button held pushed-down for 0.15~0.5 sec (no longer because there's a chance it might cause the
'                   // door's state to invert (begin to close again, while in the process of opening, and vice versa)).
                    0.15 10000 random 10000 / 0.35 * + (S.L.ai_pre_cockpit_door_01_sw_timer)
                {endif}

                (L.L.ai_pre_cockpit_door_01_sw_timer) !
                {if}
                    0 (S.L.cockpit_tuertaster1)
                    (T.L.ev_tuertaster_aus)
                    -1 (S.L.ai_pre_cockpit_door_01_sw_timer)
                    0 (S.L.ai_pre_cockpit_door_01_sw_target)
                {endif}
            {endif}
        {endif}
    {endif}

'   // ----- Rear door button adjustment -----

    (L.L.ai_pre_cockpit_door_23_sw_timer) 0 >
    {if}
        (L.L.ai_pre_cockpit_door_23_sw_timer) (L.S.Timegap) - 0 max (S.L.ai_pre_cockpit_door_23_sw_timer)
    {endif}

    (L.L.ai_pre_cockpit_door_23_sw_target) 1 =
    {if}
'       // ----- Push to open -----

        (L.L.ai_pre_cockpit_door_23_sw_timer) -1 =
        {if}
            (L.L.ai_pre_cockpit_door_23_sw_target_context)
            {if}
'               // unconditional opening scheduled due to prolonged stop arrival: 0.25~15 sec
'               // ...but: if front door scheduled to be opened with high latency as well, then schedule rear door
'               // opening to occur 0.25~1.5 sec before (less likely) or after (more likely) scheduled front door
'               // opening time.
'               // Rationale: Driver opens front door and simultaneously thinks "gosh, it's hot, why not open the rear
'               // door as well, given the opportunity?". Of course they would have opened it without this provision as
'               // well, but the resulting scheduling would not appear as realistic.
                (L.L.ai_pre_cockpit_door_01_sw_target) 1 = (L.L.ai_pre_cockpit_door_01_sw_target_context) &&
                    (L.L.ai_pre_cockpit_door_01_sw_timer) s1 -1 = ! &&
                {if}
                    0.25 10000 random 10000 / 1.25 * + s0
                    10000 random 10000 / 0.3 <
                    {if}
                        l0 /-/ s0
                    {endif}
                    l1 l0 + 0 max
                {else}
                    0.25 10000 random 10000 / 14.75 * +
                {endif}
            {else}
'               // opening due to passengers wishing to board or disembark: 0.25~2 sec
                0.25 10000 random 10000 / 1.25 * +
            {endif}
            (S.L.ai_pre_cockpit_door_23_sw_timer)
        {endif}

        (L.L.ai_pre_cockpit_door_23_sw_timer) !
        {if}
            1 (S.L.cockpit_tuertaster2)
            (T.L.ev_tuertaster_ein)
            -1 (S.L.ai_pre_cockpit_door_23_sw_timer)
            -2 (S.L.ai_pre_cockpit_door_23_sw_target)
        {endif}
    {else}
        (L.L.ai_pre_cockpit_door_23_sw_target) -1 =
        {if}
'           // ----- Push to close -----

            (L.L.ai_pre_cockpit_door_23_sw_timer) -1 =
            {if}
                (L.L.ai_pre_cockpit_door_pc_factor) s0
                (L.L.ai_pre_cockpit_stop_phase)
                {if}
                    (L.L.ai_pre_cockpit_stop_departure_delay_estimate) s1
                    (L.L.ai_pre_cockpit_door_23_sw_target_context)
                    {if}
'                       // A. Eager closure:
'                       // - minimum delay: 3 sec
'                       // - maximum delay:
'                       //   - prolonged stop + non-parking-maneuver-style departure:
'                       //     min(3~15, departure-delay) sec, proportionally to door-pc-factor.
'                       //   - otherwise:
'                       //     min(3~7, departure-delay) sec, likewise.
                        (L.L.ai_pre_cockpit_stop_prolonging_heuristic)
                            (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 = ! &&
                            (L.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed) 1 = ||
                            (L.L.ai_pre_cockpit_stop_env_eager_door_23_closing_allowed) ! &&
                        {if}
                            3 s2 12 s3
                        {else}
                            3 s2 4 s3
                        {endif}
                        l2 10000 random 10000 / l3 * 1 l0 - * + l1
                            (L.L.ai_pre_cockpit_stop_departure_timer) 0 max - 0 max min 3 max
                    {else}
'                       // B. Normal closure at departure time
'                       // Case 1 - relatively prompt closure / "PC-case"
                        10000 random 10000 / l0 (L.L.ai_pre_cockpit_stop_prolonging_heuristic)
                            (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 = +
                            (L.L.ai_pre_cockpit_passengers_standing) + (L.L.humans_count)
                            (L.L.ai_pre_cockpit_significant_number_of_passengers) >= + l0 2 / * + <
                        {if}
'                           // - minimum delay: 2 sec
'                           // - maximum delay: (departure-delay - 0~3) sec, inversely proportionally to
'                           //   door-pc-factor.
                            l1 (L.L.ai_pre_cockpit_stop_departure_timer) 0 max - 0 max 10000 random 10000 / 3 *
                                1 l0 - * - 2 max
                        {else}
'                           // Case 2 - somewhat delayed closure / "non-PC-case"
'                           // delay variation: (departure-delay + 0~2) sec, inversely proportionally to
'                           // door-pc-factor.
                            l1 (L.L.ai_pre_cockpit_stop_departure_timer) 0 max - 0 max 10000 random 10000 / 2 *
                                1 l0 - * +
                        {endif}
                    {endif}
                {else}
'                   // C. Closure en route
'                   // delay variation: 0~2 sec, inversely proportionally to door-pc-factor.
                    10000 random 10000 / 2 * 1 l0 - *
                {endif}
                (S.L.ai_pre_cockpit_door_23_sw_timer)
            {endif}

            (L.L.ai_pre_cockpit_door_23_sw_timer) !
            {if}
                1 (S.L.cockpit_tuertaster2)
                (T.L.ev_tuertaster_ein)
                -1 (S.L.ai_pre_cockpit_door_23_sw_timer)
                -2 (S.L.ai_pre_cockpit_door_23_sw_target)
            {endif}
        {else}
            (L.L.ai_pre_cockpit_door_23_sw_target) -2 =
            {if}
'               // ----- Release -----

                (L.L.ai_pre_cockpit_door_23_sw_timer) -1 =
                {if}
'                   // Button held pushed-down for 0.15~0.5 sec
                    0.15 10000 random 10000 / 0.35 * + (S.L.ai_pre_cockpit_door_23_sw_timer)
                {endif}

                (L.L.ai_pre_cockpit_door_23_sw_timer) !
                {if}
                    0 (S.L.cockpit_tuertaster2)
                    (T.L.ev_tuertaster_aus)
                    -1 (S.L.ai_pre_cockpit_door_23_sw_timer)
                    0 (S.L.ai_pre_cockpit_door_23_sw_target)
                {endif}
            {endif}
        {endif}
    {endif}

    (L.L.ai_pre_cockpit_stop_phase_init_override)
    {if}
        0 (S.L.ai_pre_cockpit_stop_phase_init_override) (S.L.ai_pre_cockpit_stop_phase)
    {endif}
{end}

{macro:ai_pre_cockpit_refresh_tt_context}
    (L.L.ai_pre_cockpit_stop_phase) 4 = !
    {if}
        (L.L.schedule_active)
        {if}
            (M.V.GetTTBusstopIndex) (S.L.ai_pre_cockpit_stop_last_run_bus_stop_index)
            (M.V.GetTTTerminusIndex) (S.L.ai_pre_cockpit_stop_last_run_terminus_index)
            (M.V.GetTTBusstopCount) (S.L.ai_pre_cockpit_stop_last_run_bus_stop_count)
            (M.V.GetTTLineString) (S.$.ai_pre_cockpit_stop_last_run_line_string)
        {else}
            -1 (S.L.ai_pre_cockpit_stop_last_run_bus_stop_index) (S.L.ai_pre_cockpit_stop_last_run_terminus_index)
                (S.L.ai_pre_cockpit_stop_last_run_bus_stop_count)
            "" (S.$.ai_pre_cockpit_stop_last_run_line_string)
        {endif}
        (L.S.Time) (S.L.ai_pre_cockpit_stop_last_run_time_of_day)
        (L.S.GetTime) (S.L.ai_pre_cockpit_stop_last_run_game_time)
        (L.L.velocity) (S.L.ai_pre_cockpit_stop_last_run_velocity)
    {endif}
{end}

{macro:ai_pre_cockpit_evaluate_open_front_door_departure_primitives}
'   // No vehicle will ever decide to leave the front door "permanently open" after departure (until the next stop at
'   // least, that is), unless all of the following hold:
'   // - The front door is not coupled to the stop brake (duh!).
'   // - The environment is not perceived as "wet".
'   // - The environment is perceived, temperature-wise, "ideal" or "warm".
'   // - The driver is at least somewhat "naughty" (applies to the ~32% having a door-pc-factor < 0.65).
'   // - The number of passengers on board is below the driver's significance threshold (rare -- it tends to be zero
'   //   for the majority).
'   // - There are no standing passengers (rare -- because OMSI)*.
'   // - The 2+1 front-most seats are not occupied*.
'   // Should any* of the above no longer be satisfied, the vehicle will close the front door, even if already
'   // departed.
'   // * With the exception of the two starred criteria, which, unfortunately, cannot be safely evaluated by vehicles
'   //   _not_ within the user's focus (OMSI fails to correctly communicate to scripts seat allocation in this case).
    (L.L.door_cti_front_door_decoupled_from_stop_brake)
    {if}
        (L.L.ai_pre_cockpit_env_perception_wet) ! (L.L.ai_pre_cockpit_env_perception) s1 400 >= && l1 600 < &&
            (L.L.ai_pre_cockpit_door_pc_factor) 0.65 < && (L.L.humans_count)
            (L.L.ai_pre_cockpit_significant_number_of_passengers) < &&
            (L.L.ai_pre_cockpit_passengers_seated_close_to_front_door) ! &&
            (L.L.ai_pre_cockpit_passengers_standing) ! &&
    {else}
        0
    {endif}
    (S.L.ai_pre_cockpit_stop_open_front_door_departure_primitives_met)
{end}

{macro:ai_pre_cockpit_evaluate_open_front_door_departure}
'   // Dynamic open-front-door departure decision-making
'   // As opposed to the "static" factors of ai_pre_cockpit_evaluate_open_front_door_departure_primitives, which are
'   // always taken into consideration, and must always be satisfied, the logical evaluation of this macro must
'   // additionally succeed _once_, at the exact point in time where front door closure would otherwise occur. There
'   // are two cases: a) Initially deciding to leave the door open (for the first time); and b) after already having
'   // arrived to a stop with an open front door, deciding to once again leave it open at departure. The probability
'   // of (a) occurring is significantly lower than (b)'s; in other words, it is rarer for a driver to decide to leave
'   // the front door open, but when they do they are likely to be "positively biased" to apply the same decision again
'   // to subsequent departures, provided the primitive preconditions (weather, passenger count, etc.) hold.

    (L.L.ai_pre_cockpit_stop_open_front_door_departure_primitives_met)
    {if}
        (L.L.ai_pre_cockpit_stop_last_arrival_bus_stop_index) 1 max s2
        (L.L.ai_pre_cockpit_stop_last_arrival_bus_stop_count) 2 - 1 max s3
        l3 1 = l2 l3 > ||
        {if}
            1 s2
        {else}
            l2 l3 =
            {if}
                2 s2
            {endif}
        {endif}

        (L.L.ai_pre_cockpit_stop_open_front_door_departure_allowed) !
        {if}
'           // ----- Initial departure probability -----

'           // Baseline: (1 - door-pc-factor) / 2.
'           // This translates to a likelihood of 50% when door-pc-factor is lowest (0). But merely ~5% of eligible
'           // vehicles has a door-pc-factor < 20%; most have one between 20~60%, yielding a rough 30% baseline.
            1 (L.L.ai_pre_cockpit_door_pc_factor) - 2 / s0

'           // Environmental temperature perception influence:
'           // - Twice as likely when "warm".
'           // - 10 times less likely otherwise ("ideal").
            (L.L.ai_pre_cockpit_env_perception_warm)
            {if}
                l0 2 * s0
            {else}
                l0 10 / s0
            {endif}

'           // At perceived nighttime or below-normal brightness (worse visibility), but also when exterior lighting is
'           // active (because of the driver's light annoying the driver), 10 times less likely.
            (L.L.ai_pre_cockpit_env_perception_nighttime) (L.L.cp_light_sw) || (L.L.lights_ai_env_brightness) 0.75 < ||
            {if}
                l0 10 / s0
            {endif}

'           // Trip type and stop index influence:
'           // - During parking-maneuver-style departure:
'           //   - Justification: The driver is too lazy to close the door for just a few seconds.
'           //   - Factor: 5x
'           //   - Max allowed, all factors combined: 50%
'           // - On a service trip:
'           //   - Justification: It's just the driver, so the risk is minimal.
'           //   - Factor: 2x
'           //   - Max allowed, all factors combined: 35%
'           // - On a normal trip, first two stops (due to "stop overlapping" notion explained elsewhere):
'           //   - Justification: Vehicle oftentimes empty, disembarking requests rare.
'           //   - Factor: No weight.
'           //   - Max allowed, all factors combined: 25%
'           // - On a normal trip, pre-terminus stop:
'           //   - Justification: Typically few passengers, driver craves some extra fresh air.
'           //   - Factor: 0.5x
'           //   - Max allowed, all factors combined: 25%
'           // - On a normal trip, at any other stop:
'           //   - Justification: Driver feels progressively disinclined to depart with an open front door, due to
'           //     increasing passenger flow and other distractions.
'           //   - Factor: (1 / (stop-index * (stop-index - 1))x; e.g. at third stop (index = 4), factor =
'           //             = 1 / (4 * (4 - 1)) = 1 / 12 = ~8.3% (of whatever the probability was before this step).
'           //   - Max allowed, all factors combined: 25%
            l0 s5
            (M.L.utils_service_trip_heuristic) l0
            {if}
                l5 2 * s5
                0.35 s1
            {else}
                (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 =
                    (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) -1 =
                    (L.L.ai_pre_cockpit_stop_phase) 1 = ! && ||
                {if}
                    l5 5 * s5
                    0.5 s1
                {else}
                    0.25 s1
                    l2 2 >=
                    {if}
                        l2 d 1 - * s2
                    {endif}
                    l5 l2 / s5
                {endif}
            {endif}
            l5 l1 min s0

'           // Note: All in all, in spite of the baseline remaining quite high, even after reduction by the
'           //       aforementioned factors, you are unlikely to witness an equivalently high occurrence frequency
'           //       in-game:
'           //       - Even at midday ("day"), some vehicles will still have exterior lights on "for-being-seen", which
'           //         will reduce their inclination to leave the front door open.
'           //       - "Ideal" and "warm" perception is subjective -- when it's "warm" for vehicle (A), it might be
'           //         "hot" for another vehicle (B), hence (B) will automatically become non-eligible for
'           //         open-front-door departure, in turn reducing the overall occurrence frequency.
'           //       - Only ~32% of all vehicles are eligible in the first place -- that effectively excludes the
'           //         remaining ~68%.
'           //       - The passenger count significance threshold, which may be zero even for otherwise "non-PC" driver
'           //         profiles, constitutes a further significant reduction factor.
'           //       In conclusion, even under "optimal" conditions (e.g. at a terminal stop, at midday, on a clear
'           //       summer day with a temperature of 25 degrees), you should not witness more than 2~5 of every 100
'           //       departing _empty_ (much less if even a single passenger has boarded each) vehicles leaving the
'           //       front door open, despite what the code above leads you to believe. I consider that value to remain
'           //       within the realm of possibility.
        {else}
'           // ----- Recurring departure probability -----

'           // Baseline:
'           // - Service trip or parking-maneuver-style departure: 50%
'           // - Otherwise: max(25%, (1 / stop-index))%

            (L.L.schedule_active)
            {if}
                (M.L.utils_service_trip_heuristic) l0 !
                {if}
                    l2 2 <= (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 =
                        (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) -1 =
                        (L.L.ai_pre_cockpit_stop_phase) 1 = ! && || ||
                    {if}
                        0.5
                    {else}
                        1 l2 / 0.25 max
                    {endif}
                {else}
                    0.5
                {endif}
            {else}
                0.5
            {endif}
            s0

'           // ...further reduced by a factor of 5 at nighttime, or when dark, or when exterior lighting active.
            (L.L.ai_pre_cockpit_env_perception_nighttime) (L.L.cp_light_sw) || (L.L.lights_ai_env_brightness) 0.75 < ||
            {if}
                l0 5 / s0
            {endif}

'           // ...further reduced by a factor of 2 if temperature in "ideal" range.
            (L.L.ai_pre_cockpit_env_perception_ideal)
            {if}
                l0 2 / s0
            {endif}

'           // ...further reduced by a factor of 5 if passenger count above 1/3 of tolerance threshold.
            (L.L.humans_count) (L.L.ai_pre_cockpit_significant_number_of_passengers) 3 / trunc >=
            {if}
                l0 5 / s0
            {endif}
        {endif}

        l0 1 <
        {if}
            10000 random 10000 / l0 <
        {else}
            1
        {endif}
    {else}
        0
    {endif}
    (S.L.ai_pre_cockpit_stop_open_front_door_departure_allowed)
{end}

{macro:ai_pre_cockpit_stop_state_reset}
    0 (S.L.ai_pre_cockpit_stop_prolonging_heuristic) (S.L.ai_pre_cockpit_stop_parking_maneuver_heuristic)
        (S.L.ai_pre_cockpit_stop_phase) (S.L.ai_pre_cockpit_stop_brake_sw_target)
        (S.L.ai_pre_cockpit_door_01_sw_target) (S.L.ai_pre_cockpit_door_23_sw_target)
        (S.L.ai_pre_cockpit_unscheduled_stop_phase) (S.L.ai_pre_cockpit_stop_open_front_door_departure_primitives_met)
        (S.L.ai_pre_cockpit_stop_open_front_door_departure_allowed)
    -1 (S.L.ai_pre_cockpit_stop_last_arrival_bus_stop_index) (S.L.ai_pre_cockpit_stop_last_arrival_bus_stop_count)
        (S.L.ai_pre_cockpit_stop_arrival_timer) (S.L.ai_pre_cockpit_stop_unconditional_stop_brake_engagement_delay)
        (S.L.ai_pre_cockpit_stop_departure_timer) (S.L.ai_pre_cockpit_stop_departure_delay_estimate)
        (S.L.ai_pre_cockpit_stop_departure_delay) (S.L.ai_pre_cockpit_unscheduled_stop_brake_usage_cooldown_timer)
        (S.L.ai_pre_cockpit_stop_brake_sw_timer) (S.L.ai_pre_cockpit_door_01_sw_timer)
        (S.L.ai_pre_cockpit_door_23_sw_timer) (S.L.ai_pre_cockpit_stop_env_eager_door_01_opening_allowed)
        (S.L.ai_pre_cockpit_stop_env_eager_door_23_opening_allowed)
        (S.L.ai_pre_cockpit_stop_tt_eager_door_closing_allowed)
{end}

{macro:ai_pre_cockpit_cockpit_state_reset}
    0 (S.L.ai_pre_cockpit_driver_cubicle_door_closed_initially) (S.L.ai_pre_cockpit_driver_window_sw_target)
        (S.L.ai_pre_cockpit_main_sun_blind_adjustment_target) (S.L.ai_pre_cockpit_side_sun_blind_adjustment_target)
        (S.L.ai_pre_cockpit_passenger_window_adjustment_phase) (S.L.ai_pre_cockpit_indicator_sw_target_context)
    (L.L.cp_tuersperre_sw) (S.L.ai_pre_cockpit_door_lock_sw_target)
    (L.L.cp_fahrerfenster_pos) (S.L.ai_pre_cockpit_driver_window_target)
    (L.L.cp_rollo_pos) (S.L.ai_pre_cockpit_main_sun_blind_position_target)
    (L.L.cp_rollo1_pos) (S.L.ai_pre_cockpit_side_sun_blind_position_target)
    (L.L.cp_hatch_sw) (S.L.ai_pre_cockpit_hatch_sw_target)
    (L.L.cp_passenger_window_1_l) (S.L.ai_pre_cockpit_passenger_window_1_l_target)
    (L.L.cp_passenger_window_1_r) (S.L.ai_pre_cockpit_passenger_window_1_r_target)
    (L.L.cp_passenger_window_2_l) (S.L.ai_pre_cockpit_passenger_window_2_l_target)
    (L.L.cp_passenger_window_2_r) (S.L.ai_pre_cockpit_passenger_window_2_r_target)
    (L.L.cp_dummy_sw01_target) (S.L.ai_pre_cockpit_driver_ac_activation_sw_target)
    (L.L.cockpit_heizregler_temp) (S.L.ai_pre_cockpit_driver_ac_temperature_sw_target)
    (L.L.cp_klimator_sw) (S.L.ai_pre_cockpit_driver_ac_fan_sw_target)
    (L.L.cockpit_heizregler_fussraum) (S.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_target)
    (L.L.cp_taster_klima) (S.L.ai_pre_cockpit_passenger_ac_activation_sw_target)
    (L.L.cp_heizluefter_sw) (S.L.ai_pre_cockpit_cabin_heater_activation_sw_target)
    (L.L.engine_on) (S.L.ai_pre_cockpit_engine_target)
    (L.L.antrieb_getr_gangvorwahl) 4 = (S.L.ai_pre_cockpit_transmission_target)
    (L.L.bremse_feststell) (S.L.ai_pre_cockpit_handbrake_target)
    (L.L.cockpit_wischer_drehschalter_mode) (S.L.ai_pre_cockpit_wiper_sw_target)
    (L.L.lights_sw_blinker) (S.L.ai_pre_cockpit_indicator_sw_target)
    -1 (S.L.ai_pre_cockpit_door_lock_sw_timer) (S.L.ai_pre_cockpit_driver_window_sw_timer)
        (S.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) (S.L.ai_pre_cockpit_side_sun_blind_adjustment_timer)
        (S.L.ai_pre_cockpit_hatch_sw_timer) (S.L.ai_pre_cockpit_passenger_window_adjustment_timer)
        (S.L.ai_pre_cockpit_driver_ac_activation_sw_timer) (S.L.ai_pre_cockpit_driver_ac_temperature_sw_timer)
        (S.L.ai_pre_cockpit_driver_ac_fan_sw_timer) (S.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_target)
        (S.L.ai_pre_cockpit_passenger_ac_activation_sw_timer) (S.L.ai_pre_cockpit_cabin_heater_activation_sw_timer)
        (S.L.ai_pre_cockpit_engine_timer) (S.L.ai_pre_cockpit_transmission_timer) (S.L.ai_pre_cockpit_handbrake_timer)
        (S.L.ai_pre_cockpit_wiper_sw_timer) (S.L.ai_pre_cockpit_indicator_sw_timer)
        (S.L.ai_pre_cockpit_indicator_sw_timer) (S.L.ai_pre_cockpit_indicator_sw_target_last_arrival)
{end}

'------------------------------------------------------------------------------
' 4. Front door wing lock usage
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_door_lock}
'   // ----- Front door wing lock adjustment scheduling -----

'   // - Conventions:
'   //   - M~N%: Random variation between M% (min) and N% (max).
'   //   - M% and N%: M% * N% (subset)
'   //   - M% or N%: M% + N% (superset)
'   //   - P-N: Probability that front door wing lock preferred engaged in case N. It may depend on other cases'
'   //     manifestation probabilities.
'   //   - Preferences are static: Vehicle will always act in the same manner, under the same conditions.
'   // - Conditions:
'   //   1. { "coldest" }, { "cold", "night" }, { "hot", "day" }, { "hottest" }
'   //      - P-1: 70%
'   //   2. { "cold", "day" }, { "chilly", "night" }, { "warm", "day", "wet" }, { "hot", "night" }
'   //      - P-2: P-1 and 21%
'   //   3. < default / any other >
'   //      - P-3: 0%
'   // - Exceptions:
'   //   - Under "warm" and "hot" conditions, engine must additionally be running (to ensure A/C too is running).
'   //   - During a parking-maneuver-style departure, and until the next arrival, the wing lock is not to be reengaged
'   //     if previously disengaged (engaging it for just a few seconds would seem too "mechanical" and would hardly
'   //     make any tangible difference in terms of A/C efficiency).
'   // - Preferred wing lock setting (condition-independent):
'   //   1. "front wing locked": 70%
'   //   2. "rear wing locked": 30% (remainder)
'   // XXX: At prolonged/2 (engine-off) stops the wing lock switch may fail to be reset on time, when passenger
'   //      boarding occurs immediately upon arrival. See related note in ai_pre_cockpit_stop macro's "front door
'   //      button scheduling" block.
    (L.L.cp_cti_has_door_wing_lock_switch)
    {if}
        (L.L.ai_pre_cockpit_door_lock_usage_scope)
        {if}
            (L.L.passenger_ac_running) (L.L.cp_taster_klima) (L.L.Cabinair_Temp) (L.S.Weather_Temperature) < && ||
                (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) ! && s0

            (L.L.ai_pre_cockpit_env_perception_coldest) (L.L.ai_pre_cockpit_env_perception_cold)
                (L.L.ai_pre_cockpit_env_perception_nighttime) (L.L.ai_pre_cockpit_door_lock_usage_scope) 2 = || && ||
                (L.L.ai_pre_cockpit_env_perception_chilly) (L.L.ai_pre_cockpit_env_perception_nighttime) &&
                (L.L.ai_pre_cockpit_door_lock_usage_scope) 2 = && || (L.L.ai_pre_cockpit_env_perception) 500 >=
                (L.L.ai_pre_cockpit_env_perception_wet) && (L.L.ai_pre_cockpit_door_lock_usage_scope) 2 = &&
                (L.L.ai_pre_cockpit_env_perception_hot) (L.L.ai_pre_cockpit_env_perception_nighttime) !
                (L.L.ai_pre_cockpit_door_lock_usage_scope) 2 = || && || (L.L.ai_pre_cockpit_env_perception_hottest) ||
                (L.L.ai_pre_cockpit_engine_target) l0 (L.L.ai_pre_cockpit_initialized) 5 <
                (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 = && || && && ||
            {if}
                (L.L.ai_pre_cockpit_door_lock_usage_setting)
            {else}
                0
            {endif}
        {else}
            0
        {endif}
        s0 (L.L.ai_pre_cockpit_door_lock_sw_target) = !
        {if}
            l0 (S.L.ai_pre_cockpit_door_lock_sw_target)
            -1 (S.L.ai_pre_cockpit_door_lock_sw_timer)
        {endif}

'       // ----- Adjustment -----

        l0 (L.L.cp_tuersperre_sw) = !
        {if}
            (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 = &&
            {if}
'               // Initialization: Instant adjustment
                0 (S.L.ai_pre_cockpit_door_lock_sw_timer)
            {else}
                (L.L.ai_pre_cockpit_door_lock_sw_timer) -1 =
                    (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
                {if}
'                   // Non-initialization: Adjustment delayed by 30~60 sec
                    30 10000 random 10000 / 30 * + (S.L.ai_pre_cockpit_door_lock_sw_timer)
                {endif}

                (L.L.ai_pre_cockpit_door_lock_sw_timer) 0 >
                {if}
                    (L.L.ai_pre_cockpit_door_lock_sw_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                        (S.L.ai_pre_cockpit_door_lock_sw_timer)
                {endif}
            {endif}

            (L.L.ai_pre_cockpit_door_lock_sw_timer) !
            {if}
                (L.L.ai_pre_cockpit_door_lock_sw_target) (S.L.cp_tuersperre_sw)
                {if}
                    (T.L.ev_kippschalter_ein)
                {else}
                    (T.L.ev_kippschalter_aus)
                {endif}
                -1 (S.L.ai_pre_cockpit_door_lock_sw_timer)
            {endif}
        {endif}
    {endif}
{end}

'------------------------------------------------------------------------------
' 5. Driver window usage
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_driver_window}
'   // ----- Driver window adjustment scheduling -----

'   // - Conventions:
'   //   - M~N%: Random variation between M% (min) and N% (max).
'   //   - M% and N%: M% * N% (subset)
'   //   - M% or N%: M% + N% (superset)
'   //   - P-N: Probability that window lowered in case N. It may depend on other cases' manifestation probabilities.
'   //   - S-N: Preferred window state (lowered % of total surface) in case N. It may depend on other cases'
'   //          preferences.
'   //   - Preferences are static: Vehicle will always act in the same manner, under the same conditions.
'   // - Conditions and preferences:
'   //   1.  { "cold", "day", "dry" }
'   //       - P-1: 5%
'   //       - S-1: 5~15%
'   //   2.  { "chilly", "night", "dry" }
'   //       - P-2: P-1 or 5%
'   //       - S-2: max(S-1, 5~15%)
'   //   3.  { "chilly", "day", "wet" }
'   //       - P-3: P-2 and 20%
'   //       - S-3: min(S-2, 5~15%)
'   //   4.  { "chilly", "day", "dry" }
'   //       - P-4: P-2 or 70%
'   //       - S-4:
'   //         - 70% of P-4: max(S-2, 15~30%)
'   //         - 30% of P-4: max(S-2, 30~100%)
'   //   5.  { "ideal", "night", "dry" }
'   //       - P-5: P-4 or 50%
'   //       - S-5: max(S-4, 30~100%)
'   //   6.  { "ideal", "wet" }
'   //       - P-6: P-5 and 25%
'   //       - S-6: min(S-5, 5~15%)
'   //   7.  { "ideal", "day", "dry" }
'   //       - P-7: P-5 or 75%
'   //       - S-7: max(S-5, 50~100%)
'   //   8.  { "warm", "dry" }
'   //       - P-8: 100%
'   //       - S-8: max(S-7, 50~100%)
'   //   9.  { "warm", "wet" }
'   //       - P-9: 10%
'   //       - S-9: 10~30%
'   //   10. { "hot", "day", "dry" }
'   //       - P-10: 25%
'   //       - S-10:
'   //         - 75% of P-10: 15~30%
'   //         - 25% of P-10: min(S-8, 30~100%)
'   //   11. { "hot", "night", "dry" }
'   //       - P-11: P-10 or 25%
'   //       - S-11:
'   //         - 50% of P-11: max(S-10, 15~30%)
'   //         - 50% of P-11 (remainder): max(S-10, 30~100%)
'   //   12. < default / any other >
'   //       - P-12: 100%
'   //       - S-12: 0%
    (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_env_perception_changed) ||
    {if}
        (L.L.ai_pre_cockpit_env_perception_coldest)
        {if}
            0
        {else}
            (L.L.ai_pre_cockpit_env_perception_cold) (L.L.ai_pre_cockpit_env_perception_nighttime) ! &&
                (L.L.ai_pre_cockpit_env_perception_wet) ! &&
            {if}
'               // Case 1
                (L.L.ai_pre_cockpit_opening_driver_window_when_env_cold_dry_daytime)
            {else}
                (L.L.ai_pre_cockpit_env_perception_chilly)
                {if}
                    (L.L.ai_pre_cockpit_env_perception_nighttime) !
                    {if}
                        (L.L.ai_pre_cockpit_env_perception_wet)
                        {if}
'                           // Case 3
                            (L.L.ai_pre_cockpit_opening_driver_window_when_env_chilly_wet_daytime)
                        {else}
'                           // Case 4
                            (L.L.ai_pre_cockpit_opening_driver_window_when_env_chilly_dry_daytime)
                        {endif}
                    {else}
'                       // Case 2
                        (L.L.ai_pre_cockpit_opening_driver_window_when_env_chilly_dry_nighttime)
                    {endif}
                {else}
                    (L.L.ai_pre_cockpit_env_perception_ideal)
                    {if}
                        (L.L.ai_pre_cockpit_env_perception_wet)
                        {if}
'                           // Case 6
                            (L.L.ai_pre_cockpit_opening_driver_window_when_env_ideal_wet)
                        {else}
                            (L.L.ai_pre_cockpit_env_perception_nighttime) !
                            {if}
'                               // Case 7
                                (L.L.ai_pre_cockpit_opening_driver_window_when_env_ideal_dry_daytime)
                            {else}
'                               // Case 5
                                (L.L.ai_pre_cockpit_opening_driver_window_when_env_ideal_dry_nighttime)
                            {endif}
                        {endif}
                    {else}
                        (L.L.ai_pre_cockpit_env_perception_warm)
                        {if}
                            (L.L.ai_pre_cockpit_env_perception_wet)
                            {if}
'                               // Case 9
                                (L.L.ai_pre_cockpit_opening_driver_window_when_env_warm_wet)
                            {else}
'                               // Case 8
                                (L.L.ai_pre_cockpit_opening_driver_window_when_env_warm_dry)
                            {endif}
                        {else}
                            (L.L.ai_pre_cockpit_env_perception_hot) (L.L.ai_pre_cockpit_env_perception_wet) ! &&
                            {if}
                                (L.L.ai_pre_cockpit_env_perception_nighttime) !
                                {if}
'                                   // Case 10
                                    (L.L.ai_pre_cockpit_opening_driver_window_when_env_hot_dry_daytime)
                                {else}
'                                   // Case 11
                                    (L.L.ai_pre_cockpit_opening_driver_window_when_env_hot_dry_nighttime)
                                {endif}
                            {else}
'                               // Case 12
                                0
                            {endif}
                        {endif}
                    {endif}
                {endif}
            {endif}
        {endif}
        (S.L.ai_pre_cockpit_driver_window_target)
    {endif}

'   // Cases 10, 11, sub-case: Unless "wet", if engine not running, act as if case 8 were in effect ("warm", "dry").
    (L.L.ai_pre_cockpit_engine_target) ! (L.L.ai_pre_cockpit_env_perception_hot) &&
        (L.L.ai_pre_cockpit_env_perception_wet) ! &&
    {if}
        1 (S.L.ai_pre_cockpit_driver_window_target_env_perception_hot_ac_off_override)
    {else}
'       // Exit aforementioned special case and re-adjust window to normal position at departure time
'       // (parking-maneuver-style departures excluded), or when the base case is no longer 10 or 11.
        (L.L.ai_pre_cockpit_env_perception_hot) ! (L.L.ai_pre_cockpit_env_perception_wet) ||
            (L.L.ai_pre_cockpit_env_perception_hot) (L.L.ai_pre_cockpit_engine_target) && (L.L.passenger_ac_running)
            (L.L.cp_taster_klima) (L.L.Cabinair_Temp) (L.S.Weather_Temperature) < && || &&
            (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) ! && ||
        {if}
            0 (S.L.ai_pre_cockpit_driver_window_target_env_perception_hot_ac_off_override)
        {endif}
    {endif}

'   // ----- Adjustment -----

    (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 = &&
    {if}
'       // Initialization: Instant adjustment
        (L.L.ai_pre_cockpit_driver_window_target) (S.L.cp_fahrerfenster_pos)
        0 (S.L.ai_pre_cockpit_driver_window_sw_target)
        -1 (S.L.ai_pre_cockpit_driver_window_sw_timer)
    {else}
'       // Non-initialization: Adjustment delayed by 5~15 sec

'       // Determine switch target ("up" vs "down" mode) if not currently toggled on.
'       // Otherwise figure if difference between target (preferred) and current window position is small enough to
'       // release switch (since we don't control the window's adjustment speed, the target position might not be
'       // _exactly_ attainable).
'       // XXX: There appears to be a minor cockpit script bug preventing the window from reaching the fully-closed
'       //      position (closure ends at ~99%).
        (L.L.ai_pre_cockpit_driver_window_target_env_perception_hot_ac_off_override)
        {if}
            (L.L.ai_pre_cockpit_opening_driver_window_when_env_warm_dry) (L.L.ai_pre_cockpit_driver_window_target) max
        {else}
            (L.L.ai_pre_cockpit_driver_window_target)
        {endif}
        s2 (L.L.cp_fahrerfenster_pos) - s1 sgn s0 l1 abs 0.3 (L.S.Timegap) * > &&
        {if}
            (L.L.ai_pre_cockpit_driver_window_sw_target) l0 = !
                (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
            {if}
                l0 (S.L.ai_pre_cockpit_driver_window_sw_target)
                5 10000 random 10000 / 10 * + (S.L.ai_pre_cockpit_driver_window_sw_timer)
            {endif}
'           // Only toggle switch if ignition key at position 2, or when at position 1 and driver window unconstrained.
'           // Otherwise wait for ai_pre_cockpit_engine_transmission_handbrake macro to rotate ignition key to a
'           // position allowing driver window operation.
            (L.L.ai_pre_cockpit_driver_window_sw_timer) 0 > (L.L.cp_key_rot) 0.4 >=
                (L.L.cp_cti_driver_window_requires_full_elec) ! || &&
            {if}
                (L.L.ai_pre_cockpit_driver_window_sw_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                    (S.L.ai_pre_cockpit_driver_window_sw_timer)
            {endif}
            (L.L.ai_pre_cockpit_driver_window_sw_timer) !
            {if}
                l0 (S.L.cp_dummy_sw08)
                (T.L.ev_VDV_toggle_on)
                0 (S.L.ai_pre_cockpit_driver_window_sw_target)
                -1 (S.L.ai_pre_cockpit_driver_window_sw_timer)
            {endif}
        {else}
            (L.L.cp_dummy_sw08)
            {if}
                l2 (L.L.cp_fahrerfenster_pos) = !
                {if}
                    l2 (S.L.cp_fahrerfenster_pos) 0.99 0.3 (L.S.Timegap) * - > l2 0.99 <= &&
                    {if}
                        (T.L.ev_window_down_stop)
                    {else}
                        l2 0.01 0.3 (L.S.Timegap) * + < l2 0.01 >= &&
                        {if}
                            (T.L.ev_window_up_stop)
                        {endif}
                    {endif}
                {endif}
                0 (S.L.cp_dummy_sw08)
                (T.L.ev_VDV_toggle_off)
            {endif}
            0 (S.L.ai_pre_cockpit_driver_window_sw_target)
            -1 (S.L.ai_pre_cockpit_driver_window_sw_timer)
        {endif}
    {endif}
{end}

'------------------------------------------------------------------------------
' 6. Sun blind usage
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_sun_blinds}
'   // ----- Sun blind adjustment scheduling -----

'   // - Conventions:
'   //   - M~N%: Random variation between M% (min) and N% (max).
'   //   - M% and N%: M% * N% (subset)
'   //   - M% or N%: M% + N% (superset)
'   //   - P-M-N: Probability that sun blind N dragged in case M. It may depend on other cases' manifestation
'   //            probabilities.
'   //   - S-M-N: Preferred state (dragged % of total surface) of sun blind N in case M. It may depend on other cases'
'   //            preferences. Note that even at 100% dragged state, the main sun blind still does not completely
'   //            vertically cover the windshield (an assumption handled by the cockpit script and model.cfg).
'   //   - Preferences are static: Vehicle will always act in the same manner, under the same conditions.
'   // - Conditions and preferences:
'   //   1. "Slightly dragged"
'   //      - Effective when:
'   //        - "Midday"; and either
'   //          - brightness is below 80% (i.e., cloudy); or
'   //          - "wet"
'   //      - P-1-Front: 25%
'   //      - S-1-Front: 43~68%
'   //      - P-1-Side: 0%
'   //      - S-1-Side: N/A
'   //   2. "Moderately dragged"
'   //      - Effective when:
'   //        - "Midday"; and
'   //        - "dry"; and
'   //        - brightness above 80% (i.e., clear); and
'   //        - temperature perception less than, or equal to, "ideal".
'   //      - P-2-Front: P-1-Front or 50%
'   //      - S-2-Front: max(S-1-Front, 48~83%)
'   //      - P-2-Side: P-2-Front and 25%
'   //      - S-2-Side: 10~30%
'   //   3. "Maximally dragged"
'   //      - Effective when:
'   //        - "Dry"; and
'   //        - brightness above 80% (i.e., clear); and
'   //        - "morning"; or
'   //          - "midday"; and
'   //          - temperature perception greater than, or equal to, "warm".
'   //      - P-3-Front: P-2-Front or 85%
'   //      - S-3-Front: max(S-2-Front, 58~98%)
'   //      - P-3-Side: P-2-Side or 50%
'   //      - S-3-Side: max(S-2-Side, 25~65%)
'   //   4. < default / any other >
'   //      - P-4-Front: 100%
'   //      - S-4-Front: 0~20%
'   //      - P-4-Side: 100%
'   //      - S-4-Side: 0%
    (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_env_perception_sun_blinds_changed) ||
    {if}
        (L.L.ai_pre_cockpit_env_perception_sun_blinds) s0 1 =
        {if}
'           // Case 1
            (L.L.ai_pre_cockpit_main_sun_blind_usage_midday_when_env_wet_or_brightness_low) s0
            0 s1
        {else}
            l0 2 =
            {if}
'               // Case 2
                (L.L.ai_pre_cockpit_main_sun_blind_usage_midday) s0
                (L.L.ai_pre_cockpit_side_sun_blind_usage_midday) s1
            {else}
                l0 3 =
                {if}
'                   // Case 3
                    (L.L.ai_pre_cockpit_main_sun_blind_usage_morning_or_midday_when_env_warm) s0
                    (L.L.ai_pre_cockpit_side_sun_blind_usage_morning_or_midday_when_env_warm) s1
                {else}
'                   // Case 4
                    (L.L.ai_pre_cockpit_main_sun_blind_usage_min) s0
                    0 s1
                {endif}
            {endif}
        {endif}
        l0 (S.L.ai_pre_cockpit_main_sun_blind_position_target)
        l1 (S.L.ai_pre_cockpit_side_sun_blind_position_target)
    {endif}

'   // ----- Adjustment -----

    (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 = &&
        (L.L.ai_pre_cockpit_stop_phase) 4 = (L.L.ai_pre_cockpit_env_perception_sun_blinds_changed) && ||
    {if}
'       // Initialization or post-hibernation: Instant adjustment
'       // Note: If instant adjustment post-hibernation were not performed, it would potentially take a long time for
'       //       vehicles initially spawned under dark conditions to adjust / drag the sun blind later during the day
'       //       (dragging is only allowed when vehicle is stopped). Also the observer would notice several re-spawned
'       //       vehicles reaching some sort of central kind of stop beginning to adjust their sun blinds in parallel,
'       //       a sight which would not be very realistic.
        l0 (S.L.cp_rollo_pos) (S.L.cp_rollo_lastpos) (S.L.cp_rollo_rastpos)
        l1 (S.L.cp_rollo1_pos) (S.L.cp_rollo1_lastpos) (S.L.cp_rollo1_rastpos)
        0 (S.L.ai_pre_cockpit_main_sun_blind_adjustment_target) (S.L.ai_pre_cockpit_side_sun_blind_adjustment_target)
        -1 (S.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) (S.L.ai_pre_cockpit_side_sun_blind_adjustment_timer)
    {else}
'       // Non-initialization / non-post-hibernation: Adjustment delayed by 5~15 sec

'       // Dragging only allowed when vehicle stopped, whether scheduled or unscheduled, and no other adjustment,
'       // whether of a cockpit switch, or of passenger windows, is imminent or being carried out (driver must be
'       // capable of getting up from their seat and have both hands free to drag sun blind).
        (L.L.ai_pre_cockpit_stop_brake_sw_timer) -1 = (L.L.ai_pre_cockpit_door_lock_sw_timer) -1 = &&
            (L.L.ai_pre_cockpit_door_01_sw_timer) -1 = && (L.L.ai_pre_cockpit_door_23_sw_timer) -1 = &&
            (L.L.ai_pre_cockpit_driver_window_sw_timer) -1 = && (L.L.cp_dummy_sw08) ! &&
            (L.L.ai_pre_cockpit_hatch_sw_timer) -1 = && (L.L.ai_pre_cockpit_engine_timer) -1 = &&
            (L.L.ai_pre_cockpit_transmission_timer) -1 = && (L.L.ai_pre_cockpit_handbrake_timer) -1 = &&
            (L.L.ai_pre_cockpit_driver_ac_activation_sw_timer) -1 = &&
            (L.L.ai_pre_cockpit_driver_ac_temperature_sw_timer) -1 = &&
            (L.L.ai_pre_cockpit_driver_ac_fan_sw_timer) -1 = &&
            (L.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_timer) -1 = &&
            (L.L.ai_pre_cockpit_passenger_ac_activation_sw_timer) -1 = &&
            (L.L.ai_pre_cockpit_cabin_heater_activation_sw_timer) -1 = &&
            (L.L.ai_pre_cockpit_wiper_sw_timer) -1 = (L.L.ai_pre_cockpit_wiper_sw_timer) 120 >= || &&
            (L.L.ai_pre_cockpit_indicator_sw_timer) -1 = && (L.L.lights_ai_ext_lighting_on_timer)
            (L.L.lights_ai_ext_lighting_darkness_tolerance) 120 min >= && (L.L.lights_ai_ext_lighting_off_timer)
            (L.L.lights_ai_ext_lighting_brightness_tolerance) 120 min >= &&
            (L.L.lights_ai_int_lighting_darker_or_on_timer)
            (L.L.lights_ai_int_lighting_darkness_tolerance) 120 min >= &&
            (L.L.lights_ai_int_lighting_brighter_or_off_timer)
            (L.L.lights_ai_int_lighting_brightness_tolerance) 120 min >= && s3

        (L.L.ai_pre_cockpit_stop_phase) d 4 = ! && (L.L.ai_pre_cockpit_unscheduled_stop_phase) 2 > || s4

'       // Main sun blind
        (L.L.ai_pre_cockpit_main_sun_blind_position_target) s0 (L.L.cp_rollo_pos) - s1 sgn s2
        {if}
            (L.L.ai_pre_cockpit_main_sun_blind_adjustment_target) l2 = !
                (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
            {if}
                l2 (S.L.ai_pre_cockpit_main_sun_blind_adjustment_target)
                5 10000 random 10000 / 10 * + (S.L.ai_pre_cockpit_main_sun_blind_adjustment_timer)
            {endif}
            (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) 0 >
            {if}
                l3 l4 l2 -1 = || &&
                {if}
                    (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) (L.S.Timegap) - 0 max
                        (S.L.ai_pre_cockpit_main_sun_blind_adjustment_timer)
                {else}
                    5 10000 random 10000 / 5 * + (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) max
                        (S.L.ai_pre_cockpit_main_sun_blind_adjustment_timer)
                {endif}
            {endif}
            (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) !
            {if}
                l3 l4 l2 -1 = || && !
                {if}
                    5 10000 random 10000 / 5 * + (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) max
                        (S.L.ai_pre_cockpit_main_sun_blind_adjustment_timer)
                {else}
                    (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) -1 = !
                    {if}
                        0.5 10000 random 10000 / 2.5 * + (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) max
                            (S.L.ai_pre_cockpit_side_sun_blind_adjustment_timer)
                    {endif}
                    l2 1 =
                    {if}
                        1 (S.L.cp_rollo_dragged)
                    {else}
                        1 (S.L.cp_rollo_retract)
                    {endif}
                {endif}
            {endif}
        {else}
            (L.L.cp_rollo_dragged) 1 =
            {if}
                -1 (S.L.cp_rollo_dragged)
            {else}
                (L.L.cp_rollo_retract) 1 =
                {if}
                    -1 (S.L.cp_rollo_retract)
                {endif}
            {endif}
            0 (S.L.ai_pre_cockpit_main_sun_blind_adjustment_target)
            -1 (S.L.ai_pre_cockpit_main_sun_blind_adjustment_timer)
        {endif}

'       // Side sun blind
        (L.L.ai_pre_cockpit_side_sun_blind_position_target) s0 (L.L.cp_rollo1_pos) - s1 sgn s2
        {if}
            (L.L.ai_pre_cockpit_side_sun_blind_adjustment_target) l2 = !
                (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
            {if}
                l2 (S.L.ai_pre_cockpit_side_sun_blind_adjustment_target)
                5 10000 random 10000 / 10 * + (S.L.ai_pre_cockpit_side_sun_blind_adjustment_timer)
            {endif}
            (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) 0 >
            {if}
                l3 l4 l2 -1 = || &&
                {if}
                    (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) (L.S.Timegap) - 0 max
                        (S.L.ai_pre_cockpit_side_sun_blind_adjustment_timer)
                {else}
                    5 10000 random 10000 / 5 * + (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) max
                        (S.L.ai_pre_cockpit_side_sun_blind_adjustment_timer)
                {endif}
            {endif}
            (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) !
            {if}
                l3 l4 l2 -1 = || && !
                {if}
                    5 10000 random 10000 / 5 * + (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) max
                        (S.L.ai_pre_cockpit_side_sun_blind_adjustment_timer)
                {else}
                    (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) -1 = !
                    {if}
                        0.5 10000 random 10000 / 2.5 * + (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) max
                            (S.L.ai_pre_cockpit_main_sun_blind_adjustment_timer)
                    {endif}
                    l2 1 =
                    {if}
                        1 (S.L.cp_rollo1_dragged)
                    {else}
                        1 (S.L.cp_rollo1_retract)
                    {endif}
                {endif}
            {endif}
        {else}
            (L.L.cp_rollo1_dragged) 1 =
            {if}
                -1 (S.L.cp_rollo1_dragged)
            {else}
                (L.L.cp_rollo1_retract) 1 =
                {if}
                    -1 (S.L.cp_rollo1_retract)
                {endif}
            {endif}
            0 (S.L.ai_pre_cockpit_side_sun_blind_adjustment_target)
            -1 (S.L.ai_pre_cockpit_side_sun_blind_adjustment_timer)
        {endif}
    {endif}
{end}

'------------------------------------------------------------------------------
' 7. Hatch usage
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_hatches}
'   // ----- Hatch adjustment scheduling -----

'   // - Conventions:
'   //   - M~N%: Random variation between M% (min) and N% (max).
'   //   - M% and N%: M% * N% (subset)
'   //   - M% or N%: M% + N% (superset)
'   //   - P-N: Probability that hatches are preferred open in case N. It may depend on other cases' manifestation
'   //     probabilities.
'   //   - Preferences are static: Vehicle will always act in the same manner, under the same conditions.
'   // - Conditions and preferences:
'   //   1. { "chilly", "day", "dry" }
'   //      - P-1: 20%
'   //   2. { "ideal", "night", "dry" }
'   //      - P-2: P-1 or 20%
'   //   3. { "ideal", "day", "dry" }
'   //      - P-3: P-2 or 50%
'   //   4. { "warm", "night", "dry" }
'   //      - P-4: P-3 or 50%
'   //   5. { "warm", "day", "dry" }
'   //      - P-5: P-4 or 75%
'   //   6. { "hot", "night", "dry" }
'   //      - P-6: P-5 and P-4 and 10%
'   //   7. { "hot", "day", "dry" }
'   //      - P-7: P-6 and 20%
'   //   8. < default / any other >
'   //      - P-8: 0%
    (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_env_perception_changed) ||
    {if}
        (L.L.ai_pre_cockpit_env_perception_wet) ! (L.L.ai_pre_cockpit_env_perception_chilly)
            (L.L.ai_pre_cockpit_env_perception_nighttime) ! &&
            (L.L.ai_pre_cockpit_opening_hatches_when_env_chilly_dry_daytime) &&
            (L.L.ai_pre_cockpit_env_perception_ideal) (L.L.ai_pre_cockpit_env_perception_nighttime) !
            (L.L.ai_pre_cockpit_opening_hatches_when_env_ideal_dry_daytime) &&
            (L.L.ai_pre_cockpit_opening_hatches_when_env_ideal_dry_nighttime) || && ||
            (L.L.ai_pre_cockpit_env_perception_warm) (L.L.ai_pre_cockpit_env_perception_nighttime) !
            (L.L.ai_pre_cockpit_opening_hatches_when_env_warm_dry_daytime) &&
            (L.L.ai_pre_cockpit_opening_hatches_when_env_warm_dry_nighttime) || && ||
            (L.L.ai_pre_cockpit_env_perception_hot) (L.L.ai_pre_cockpit_env_perception_nighttime)
            (L.L.ai_pre_cockpit_opening_hatches_when_env_hot_dry_nighttime) &&
            (L.L.ai_pre_cockpit_opening_hatches_when_env_hot_dry_daytime) || && || &&
        {if}
            (L.L.ai_pre_cockpit_hatch_sw_target) !
            {if}
                1 (S.L.ai_pre_cockpit_hatch_sw_target)
                (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 = &&
                {if}
'                   // Initialization: Instant adjustment
                    0
                {else}
'                   // Non-initialization: Adjustment delayed by 5~15 sec
                    -1
                {endif}
                (S.L.ai_pre_cockpit_hatch_sw_timer)
            {endif}
        {else}
            (L.L.ai_pre_cockpit_hatch_sw_target)
            {if}
                0 (S.L.ai_pre_cockpit_hatch_sw_target)
                (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 = &&
                {if}
'                   // Initialization: Instant adjustment
                    0
                {else}
'                   // Non-initialization: Adjustment delayed by 5~15 sec
                    -1
                {endif}
                (S.L.ai_pre_cockpit_hatch_sw_timer)
            {endif}
        {endif}
    {endif}

'   // ----- Adjustment -----

    (L.L.ai_pre_cockpit_hatch_sw_target) (L.L.cp_hatch_sw) = !
    {if}
'       // Only flip switch if ignition key at position 2, or when at position 1 and hatches unconstrained. Otherwise
'       // wait for ai_pre_cockpit_engine_transmission_handbrake macro to rotate ignition key to a position allowing
'       // hatch operation.
        (L.L.ai_pre_cockpit_hatch_sw_timer) -1 =
            (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! && (L.L.cp_key_rot) 0.4 >=
            (L.L.cp_cti_hatches_require_full_elec) ! || &&
        {if}
            5 10000 random 10000 / 10 * + (S.L.ai_pre_cockpit_hatch_sw_timer)
        {endif}
        (L.L.ai_pre_cockpit_hatch_sw_timer) 0 >
        {if}
            (L.L.ai_pre_cockpit_hatch_sw_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                (S.L.ai_pre_cockpit_hatch_sw_timer)
        {endif}
        (L.L.ai_pre_cockpit_hatch_sw_timer) !
        {if}
            (L.L.ai_pre_cockpit_hatch_sw_target) (S.L.cp_hatch_sw)
            {if}
                (T.L.ev_VDV_on)
            {else}
                (T.L.ev_VDV_off)
            {endif}
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_hatch_sw_timer)
    {endif}
{end}

'------------------------------------------------------------------------------
' 8. Heating / cooling usage
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_heating_cooling}
'   // Note: All heating and cooling preferences addressed in this macro are static, i.e., the vehicle will always act
'   //       in the same manner, under the same conditions. The sole varying factor is the vehicle's environmental
'   //       perception.

    (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_env_perception_changed) ||
    {if}
'       // ----- Driver A/C activation (A/C- vs engine-assisted mode) adjustment scheduling -----

        (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 = && s7

'       // The driver A/C is to be activated under the following perceived environmental conditions:
'       // - { "hottest" }
'       // - { "hot" }
'       // - { "warm", "wet" }
        (L.L.ai_pre_cockpit_env_perception_warm) (L.L.ai_pre_cockpit_env_perception_wet) &&
            (L.L.ai_pre_cockpit_env_perception_hot) || (L.L.ai_pre_cockpit_env_perception_hottest) || s0
            (L.L.ai_pre_cockpit_driver_ac_activation_sw_target) = !
        {if}
            l0 (S.L.ai_pre_cockpit_driver_ac_activation_sw_target)
            l7
            {if}
'               // Initialization: Instant adjustment
                0
            {else}
'               // Non-initialization: Adjustment delayed by 10~20 sec
                -1
            {endif}
            (S.L.ai_pre_cockpit_driver_ac_activation_sw_timer)
        {endif}

'       // ----- Driver A/C temperature adjustment scheduling -----

        (L.L.ai_pre_cockpit_env_perception) 400 <
        {if}
'           // 1. If the perceived temperature range is up to "chilly", temperature is to be set to 40~100%.
            (L.L.ai_pre_cockpit_driver_ac_heating_temperature_setting)
        {else}
            (L.L.ai_pre_cockpit_driver_ac_activation_sw_target)
            {if}
'               // 2. Otherwise, if driver A/C active or scheduled for activation, temperature is to be set to 0~40%.
                (L.L.ai_pre_cockpit_driver_ac_cooling_temperature_setting)
            {else}
'               // 3. Otherwise, temperature is to be set to 0%.
                0
            {endif}
        {endif}
        s0 (L.L.ai_pre_cockpit_driver_ac_temperature_sw_target) = !
        {if}
            l0 (S.L.ai_pre_cockpit_driver_ac_temperature_sw_target)
            l7
            {if}
'               // Initialization: Instant adjustment
                0
            {else}
'               // Non-initialization: Adjustment delayed by a) 10~20 sec if no other heating/cooling function
'               // adjustment scheduled, or b) max(t +/- 0~3 sec, 0), otherwise, where t the previous delay.
                -1
            {endif}
            (S.L.ai_pre_cockpit_driver_ac_temperature_sw_timer)
        {endif}

'       // ----- Driver A/C fan speed adjustment scheduling -----

        (L.L.ai_pre_cockpit_env_perception_chilly) (L.L.ai_pre_cockpit_env_perception_nighttime)
            (L.L.ai_pre_cockpit_env_perception_wet) || && (L.L.ai_pre_cockpit_env_perception_cold) ||
            (L.L.ai_pre_cockpit_env_perception_coldest) ||
        {if}
'           // 1. Heating context
'           //    - Conditions: { "coldest" }, { "cold" }, { "chilly", "nighttime" }
'           //    - Preferred setting: 10~60%
            (L.L.ai_pre_cockpit_driver_ac_heating_fan_setting)
        {else}
            (L.L.ai_pre_cockpit_driver_ac_activation_sw_target)
            {if}
'               // 2. Cooling context
'               //    - Conditions: Whenever the driver A/C is active (i.e., in A/C-based mode).
'               //    - Preferred setting: 10~60% (independent of preferred setting in heating context (1)).
                (L.L.ai_pre_cockpit_driver_ac_cooling_fan_setting)
            {else}
                (L.L.ai_pre_cockpit_env_perception_warm) (L.L.ai_pre_cockpit_env_perception_nighttime) ! &&
                {if}
'                   // 3. Neutral fan
'                   //    - Conditions: { "warm", "day" }
'                   //    - Constraint: Only applies to a static 30% subset of vehicles. The remainder does not employ
'                   //    - the fan under such conditions (4).
'                   //    - Preferred setting: 20~80%
                    (L.L.ai_pre_cockpit_driver_ac_neutral_fan_setting)
                {else}
'                   // 4. Off
'                   //    - Conditions: Any other, also applying to (3) when vehicle does not prefer neutral fan usage.
'                   //    - Preferred setting: 0%
                    0
                {endif}
            {endif}
        {endif}
        s0 (L.L.ai_pre_cockpit_driver_ac_fan_sw_target) = !
        {if}
            l0 (S.L.ai_pre_cockpit_driver_ac_fan_sw_target)
            l7
            {if}
'               // Initialization: Instant adjustment
                0
            {else}
'               // Non-initialization: Adjustment delayed by a) 10~20 sec if no other heating/cooling function
'               // adjustment scheduled, or b) max(t +/- 0~3 sec, 0), otherwise, where t the previous delay.
                -1
            {endif}
            (S.L.ai_pre_cockpit_driver_ac_fan_sw_timer)
        {endif}

'       // ----- Driver A/C air distribution adjustment scheduling -----

        (L.L.ai_pre_cockpit_env_perception) 400 <
        {if}
'           // 1. If the perceived temperature range is up to "chilly", air distribution is to be set to "windows"
'           //    (position 4).
            3
        {else}
'           // 2. Otherwise it is set to "feet and face" (position 2).
            1
        {endif}
        s0 (L.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_target) = !
        {if}
            l0 (S.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_target)
            l7
            {if}
'               // Initialization: Instant adjustment
                0
            {else}
'               // Non-initialization: Adjustment delayed by a) 10~20 sec if no other heating/cooling function
'               // adjustment scheduled, or b) max(t +/- 0~3 sec, 0), otherwise, where t the previous delay.
                -1
            {endif}
            (S.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_timer)
        {endif}

'       // ----- Passenger A/C adjustment scheduling -----

'       // The passenger A/C is to be activated under the following environmental conditions:
'       // - { "hottest" }
'       // - { "hot" }
'       // - { "warm", "wet" }
'       // - { "ideal", "day", "wet" }
'       // - { "chilly", "day", "wet" }*
'       // - { "chilly", "night" }*
'       // * Only for a static 50% subset of vehicles that favor the passenger A/C over the cabin heaters under such
'       //   conditions.
        (L.L.ai_pre_cockpit_env_perception_ideal) (L.L.ai_pre_cockpit_env_perception_nighttime) ! &&
            (L.L.ai_pre_cockpit_env_perception_warm) || (L.L.ai_pre_cockpit_env_perception_wet) &&
            (L.L.ai_pre_cockpit_env_perception_hot) || (L.L.ai_pre_cockpit_env_perception_hottest) ||
            (L.L.ai_pre_cockpit_env_perception_chilly) (L.L.ai_pre_cockpit_env_perception_wet)
            (L.L.ai_pre_cockpit_env_perception_nighttime) || &&
            (L.L.ai_pre_cockpit_ac_used_for_heating_when_env_chilly) && || s0
            (L.L.ai_pre_cockpit_passenger_ac_activation_sw_target) = !
        {if}
            l0 (S.L.ai_pre_cockpit_passenger_ac_activation_sw_target)
            l7
            {if}
'               // Initialization: Instant adjustment
                0
            {else}
'               // Non-initialization: Adjustment delayed by a) 10~20 sec if no other heating/cooling function
'               // adjustment scheduled, or b) max(t +/- 0~3 sec, 0), otherwise, where t the previous delay.
                -1
            {endif}
            (S.L.ai_pre_cockpit_passenger_ac_activation_sw_timer)
        {endif}

'       // ----- Cabin heater adjustment scheduling -----

'       // The cabin heaters are to be activated under the following environmental conditions:
'       // - { "coldest" }
'       // - { "cold" }
'       // - { "chilly", "day", "wet" }*
'       // - { "chilly", "night" }*
'       // * Only for a static 50% subset of vehicles that favor the cabin heaters over the passenger A/C under such
'       //   conditions.
        (L.L.ai_pre_cockpit_env_perception) 300 < (L.L.ai_pre_cockpit_env_perception_chilly)
            (L.L.ai_pre_cockpit_env_perception_wet) (L.L.ai_pre_cockpit_env_perception_nighttime) || &&
            (L.L.ai_pre_cockpit_ac_used_for_heating_when_env_chilly) ! && || s0
            (L.L.ai_pre_cockpit_cabin_heater_activation_sw_target) = !
        {if}
            l0 (S.L.ai_pre_cockpit_cabin_heater_activation_sw_target)
            l7
            {if}
'               // Initialization: Instant adjustment
                0
            {else}
'               // Non-initialization: Adjustment delayed by a) 10~20 sec if no other heating/cooling function
'               // adjustment scheduled, or b) max(t +/- 0~3 sec, 0), otherwise, where t the previous delay.
                -1
            {endif}
            (S.L.ai_pre_cockpit_cabin_heater_activation_sw_timer)
        {endif}
    {endif}

    0 s7

'   // ----- Driver A/C activation (A/C- vs engine-assisted mode) adjustment -----

    (L.L.ai_pre_cockpit_driver_ac_activation_sw_target) (L.L.cp_dummy_sw01_target) = !
    {if}
        (L.L.ai_pre_cockpit_driver_ac_activation_sw_timer) -1 =
            (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
        {if}
            10 10000 random 10000 / 10 * + (S.L.ai_pre_cockpit_driver_ac_activation_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_driver_ac_activation_sw_timer) 0 >
        {if}
            (L.L.ai_pre_cockpit_driver_ac_activation_sw_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                (S.L.ai_pre_cockpit_driver_ac_activation_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_driver_ac_activation_sw_timer) !
        {if}
            (L.L.ai_pre_cockpit_driver_ac_activation_sw_target) (S.L.cp_dummy_sw01_target)
            (T.L.ev_VDV_toggle_on)
            (T.L.ev_VDV_toggle_off)
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_driver_ac_activation_sw_timer)
    {endif}

'   // ----- Driver A/C temperature adjustment -----

    (L.L.ai_pre_cockpit_driver_ac_temperature_sw_target) (L.L.cockpit_heizregler_temp) = !
    {if}
        (L.L.ai_pre_cockpit_driver_ac_temperature_sw_timer) -1 =
            (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
        {if}
            l7
            {if}
                10000 random 10000 / 3 * s0
                10000 random 10000 / 0.5 <
                {if}
                    l0 /-/ s0
                {endif}
                l7 l0 + 0 max
            {else}
                10 10000 random 10000 / 10 * +
            {endif}
            (S.L.ai_pre_cockpit_driver_ac_temperature_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_driver_ac_temperature_sw_timer) 0 >
        {if}
            (L.L.ai_pre_cockpit_driver_ac_temperature_sw_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                (S.L.ai_pre_cockpit_driver_ac_temperature_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_driver_ac_temperature_sw_timer) !
        {if}
            (L.L.cockpit_heizregler_temp) s0 (L.L.ai_pre_cockpit_driver_ac_temperature_sw_target) s1
                1 10000 random 10000 / + s2 (M.L.utils_gradual_constant_update)
                l0 (S.L.cockpit_heizregler_temp)
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_driver_ac_temperature_sw_timer)
    {endif}

'   // ----- Driver A/C fan speed adjustment -----

    (L.L.ai_pre_cockpit_driver_ac_fan_sw_target) (L.L.cp_klimator_sw) = !
    {if}
        (L.L.ai_pre_cockpit_driver_ac_fan_sw_timer) -1 = (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
        {if}
            l7
            {if}
                10000 random 10000 / 3 * s0
                10000 random 10000 / 0.5 <
                {if}
                    l0 /-/ s0
                {endif}
                l7 l0 + 0 max
            {else}
                10 10000 random 10000 / 10 * +
            {endif}
            (S.L.ai_pre_cockpit_driver_ac_fan_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_driver_ac_fan_sw_timer) 0 >
        {if}
            (L.L.ai_pre_cockpit_driver_ac_fan_sw_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                (S.L.ai_pre_cockpit_driver_ac_fan_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_driver_ac_fan_sw_timer) !
        {if}
            (L.L.cp_klimator_sw) s0 (L.L.ai_pre_cockpit_driver_ac_fan_sw_target) s1
                1 10000 random 10000 / + s2 (M.L.utils_gradual_constant_update)
                l0 (S.L.cp_klimator_sw)
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_driver_ac_fan_sw_timer)
    {endif}

'   // ----- Driver A/C air distribution adjustment -----

    (L.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_target) (L.L.cockpit_heizregler_fussraum_pos) = !
    {if}
        (L.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_timer) -1 =
            (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
        {if}
            l7
            {if}
                10000 random 10000 / 3 * s0
                10000 random 10000 / 0.5 <
                {if}
                    l0 /-/ s0
                {endif}
                l7 l0 + 0 max
            {else}
                10 10000 random 10000 / 10 * +
            {endif}
            (S.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_timer) 0 >
        {if}
            (L.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                (S.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_timer) !
        {if}
            (L.L.cockpit_heizregler_fussraum) s0
            (L.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_target) 1 =
            {if}
                0.24
            {else}
                1
            {endif}
            s1
            1 10000 random 10000 / 1 * + s2 (M.L.utils_gradual_constant_update) l0 (S.L.cockpit_heizregler_fussraum)
            1 (S.L.cockpit_heizregler_fussraum_adjustment)
        {endif}
    {else}
        (L.L.cockpit_heizregler_fussraum_adjustment) 1 =
        {if}
            -1 (S.L.cockpit_heizregler_fussraum_adjustment)
        {endif}
        -1 (S.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_timer)
    {endif}

'   // ----- Passenger A/C adjustment -----

    (L.L.ai_pre_cockpit_passenger_ac_activation_sw_target) (L.L.cp_taster_klima) = !
    {if}
        (L.L.ai_pre_cockpit_passenger_ac_activation_sw_timer) -1 =
            (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
        {if}
            l7
            {if}
                10000 random 10000 / 3 * s0
                10000 random 10000 / 0.5 <
                {if}
                    l0 /-/ s0
                {endif}
                l7 l0 + 0 max
            {else}
                10 10000 random 10000 / 10 * +
            {endif}
            (S.L.ai_pre_cockpit_passenger_ac_activation_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_passenger_ac_activation_sw_timer) 0 >
        {if}
            (L.L.ai_pre_cockpit_passenger_ac_activation_sw_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                (S.L.ai_pre_cockpit_passenger_ac_activation_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_passenger_ac_activation_sw_timer) !
        {if}
            (L.L.ai_pre_cockpit_passenger_ac_activation_sw_target) (S.L.cp_taster_klima)
            {if}
                (T.L.ev_VDV_on)
            {else}
                (T.L.ev_VDV_off)
            {endif}
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_passenger_ac_activation_sw_timer)
    {endif}

'   // ----- Cabin heater adjustment -----

    (L.L.ai_pre_cockpit_cabin_heater_activation_sw_target) (L.L.cp_heizluefter_sw) = !
    {if}
        (L.L.ai_pre_cockpit_cabin_heater_activation_sw_timer) -1 =
            (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
        {if}
            l7
            {if}
                10000 random 10000 / 3 * s0
                10000 random 10000 / 0.5 <
                {if}
                    l0 /-/ s0
                {endif}
                l7 l0 + 0 max
            {else}
                10 10000 random 10000 / 10 * +
            {endif}
            (S.L.ai_pre_cockpit_cabin_heater_activation_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_cabin_heater_activation_sw_timer) 0 >
        {if}
            (L.L.ai_pre_cockpit_cabin_heater_activation_sw_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                (S.L.ai_pre_cockpit_cabin_heater_activation_sw_timer) s7
        {endif}
        (L.L.ai_pre_cockpit_cabin_heater_activation_sw_timer) !
        {if}
            (L.L.ai_pre_cockpit_cabin_heater_activation_sw_target) (S.L.cp_heizluefter_sw)
            {if}
                (T.L.ev_VDV_on)
            {else}
                (T.L.ev_VDV_off)
            {endif}
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_cabin_heater_activation_sw_timer)
    {endif}
{end}

'------------------------------------------------------------------------------
' 9. Engine, transmission, and handbrake usage
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_engine_transmission_handbrake}
'   // Note: All preferences pertaining to engine, transmission, and handbrake adjustment are static.

    (L.L.ai_pre_cockpit_initialized) 5 <
    {if}
'       // Instant adjustments during initialization (edge cases):
'       // - Activate electrics if off.
'       // - If transmission mode "D", and engine not running, or "R", and engine running, switch mode to "N".
        (L.L.key_mode) 2 <
        {if}
            (L.L.key_mode) !
            {if}
                (T.L.ev_schluessel_steck)
            {endif}
            (T.L.ev_schluessel_dreh)
            2 (S.L.key_mode)
            0.2 (S.L.cp_key_rot)
            1 (S.L.cp_key_pull) (S.L.vdv_on) (S.L.elec_busbar_main_sw)
        {endif}
        (L.L.antrieb_getr_gangvorwahl) ! (L.L.antrieb_getr_gangvorwahl) 4 = (L.L.engine_on) ! && ||
        {if}
            (L.S.GetTime) (C.L.antrieb_gangwahlzeit) 0.1 + - (S.L.antrieb_getr_gangwahlzeitpunkt)
            1 (S.L.antrieb_getr_gangvorwahl)
            (L.L.cockpit_gang3) (L.L.cockpit_gangR) ||
            {if}
                0 (S.L.cockpit_gang3) (S.L.cockpit_gangR)
                (T.L.ev_gangwahltaster_N)
            {endif}
        {endif}
    {endif}

    (L.L.ai_pre_cockpit_stop_phase) s1 ! l1 3 >= || (L.L.ai_pre_cockpit_initialized) 5 <
        (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 = && s2 || s3
    l1 ! l1 4 = || l2 || s4

'   // ----- Engine adjustment scheduling -----

'   // Turn engine off if:
'   // - Currently at a scheduled stop; and
'   // - OMSI instructs that the engine be switched off; and
'   // - perceived environmental temperature range is above "coldest" and below "hottest" (otherwise leave engine
'   //   running for cabin heaters or A/C to do their job).
'   // This adjustment case is by definition always scheduled to be delayed -- it cannot occur in an initialization /
'   // post-hibernation context.
    l1 0 > l1 3 < && (L.L.AI_Engine) -1 = && (L.L.ai_pre_cockpit_env_perception_coldest) ! &&
        (L.L.ai_pre_cockpit_env_perception_hottest) ! &&
    {if}
        (L.L.ai_pre_cockpit_engine_target)
        {if}
'           // Non-initialization / non-post-hibernation: Adjustment delayed by 7~20 sec
            -1 (S.L.ai_pre_cockpit_engine_timer)
            0 (S.L.ai_pre_cockpit_engine_target)
        {endif}
    {else}
'       // Otherwise turn engine on if:
'       // - OMSI instructs that the engine be switched on; and either
'       //   - not currently at a scheduled stop (to prevent stop overlapping effect); or
'       //   - perceived environmental temperature range is "coldest" or "hottest".
        l3 (L.L.AI_Engine) 1 = && (L.L.ai_pre_cockpit_env_perception_coldest) ||
            (L.L.ai_pre_cockpit_env_perception_hottest) ||
        {if}
            (L.L.ai_pre_cockpit_engine_target) !
            {if}
                l4
                {if}
'                   // Initialization or post-hibernation: Instant adjustment
                    0
                {else}
'                   // Non-initialization / non-post-hibernation:
'                   // There are two delays, one after which the ignition key is rotated from position 1 to
'                   // position 2 (d1), and another one after which the ignition key is rotated from position 2 to
'                   // position 3 (d2). These are set depending on context.
'                   // - In the context of a regular (non-parking-maneuver-style) departure or due to perceived
'                   //   temperature change:
'                   //   - d1: 2~7 sec.
'                   //   - s2:
'                   //     - 0.15~1 sec, in 70% of all engine ignition cases.
'                   //     - 3~10 sec, otherwise.
'                   // - In the context of a parking-maneuver-style departure:
'                   //   - d1: 1~3 sec.
'                   //   - d2: 0.15~1 sec.
                    -1
                {endif}
                (S.L.ai_pre_cockpit_engine_timer)
                1 (S.L.ai_pre_cockpit_engine_target)
            {endif}
        {endif}
    {endif}

'   // ----- Transmission and handbrake adjustment scheduling -----

'   // Set transmission mode to "N" if currently "D" and:
'   // - Currently at a scheduled stop; and
'   // - OMSI instructs that the engine be switched off.
'   // Under the same two conditions also engage handbrake if disengaged.
'   // As with the case of engine shutdown above, this case is always delayed.
    l1 0 > l1 3 < && (L.L.AI_Engine) -1 = &&
    {if}
        (L.L.ai_pre_cockpit_transmission_target)
        {if}
'           // Non-initialization / non-post-hibernation: Adjustment delayed as follows:
'           // - In the context of a regular departure: 1~5 sec
'           // - In the context of a parking-maneuver-style departure: 0.3~3 sec
            -1 (S.L.ai_pre_cockpit_transmission_timer)
        {endif}
        0 (S.L.ai_pre_cockpit_transmission_target)
        (L.L.ai_pre_cockpit_handbrake_target) !
        {if}
'           // Non-initialization / non-post-hibernation: Adjustment delayed as follows:
'           // - In the context of a regular departure: 10~20 sec
'           // - In the context of a parking-maneuver-style departure: 2~8 sec
            -1 (S.L.ai_pre_cockpit_handbrake_timer)
        {endif}
        1 (S.L.ai_pre_cockpit_handbrake_target)
    {else}
'       // Otherwise set transmission mode to "D", if currently "N", and/or disengage handbrake, if currently engaged,
'       // if:
'       // - OMSI instructs that the engine be switched on; and
'       // - not currently at a scheduled stop (to prevent stop overlapping effect).
        l3 (L.L.AI_Engine) 1 = &&
        {if}
            (L.L.ai_pre_cockpit_transmission_target) !
            {if}
                l4
                {if}
'                   // Initialization or post-hibernation: Instant adjustment
                    0
                {else}
'                   // Non-initialization / non-post-hibernation: Adjustment delayed by 3~20 sec
                    -1
                {endif}
                (S.L.ai_pre_cockpit_transmission_timer)
            {endif}
            1 (S.L.ai_pre_cockpit_transmission_target)
            (L.L.ai_pre_cockpit_handbrake_target)
            {if}
                l4
                {if}
'                   // Initialization or post-hibernation: Instant adjustment
                    0
                {else}
'                   // Non-initialization / non-post-hibernation: Adjustment delayed by 2~15 sec
                    -1
                {endif}
                (S.L.ai_pre_cockpit_handbrake_timer)
            {endif}
            0 (S.L.ai_pre_cockpit_handbrake_target)
        {endif}
    {endif}

'   // ----- Engine adjustment -----

'   // Don't disable electrics (or turn them on again) if driver window and/or hatch adjustment has been scheduled, and
'   // either or both are constrained by electrics (ignition key min position >= 1 vs >= 2).
    (L.L.ai_pre_cockpit_engine_target) (L.L.ai_pre_cockpit_driver_window_sw_timer) -1 = ! (L.L.cp_dummy_sw08) ||
        (L.L.cp_cti_driver_window_requires_full_elec) && (L.L.ai_pre_cockpit_hatch_sw_timer) -1 = !
        (L.L.cp_cti_hatches_require_full_elec) && || s5 ||
    {if}
        (L.L.engine_on) !
        {if}
            (L.L.ai_pre_cockpit_engine_timer) -1 = (L.L.antrieb_getr_gangvorwahl) 1 = &&
                (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
            {if}
                (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 = l5 ||
                {if}
                    1 10000 random 10000 / 2 * +
                {else}
                    2 10000 random 10000 / 5 * +
                {endif}
                (S.L.ai_pre_cockpit_engine_timer)
            {endif}
            (L.L.ai_pre_cockpit_engine_timer) 0 >
            {if}
                (L.L.ai_pre_cockpit_engine_timer) (L.S.Timegap) - 0 max (S.L.ai_pre_cockpit_engine_timer)
            {endif}
            (L.L.ai_pre_cockpit_engine_timer) !
            {if}
                (L.L.key_mode) 2 =
                {if}
                    3 (S.L.key_mode)
                    0.4 (S.L.cp_key_rot)
                    1 (S.L.vdv_on)
                    (T.L.ev_schluessel_dreh)
                    (T.L.ev_ignition)
                    l4 ! (L.L.ai_pre_cockpit_engine_target) &&
                    {if}
                        10000 random 10000 / 0.7 < (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 = ||
                        {if}
                            0.15 10000 random 10000 / 0.85 * +
                        {else}
                            3 10000 random 10000 / 7 * +
                        {endif}
                        (S.L.ai_pre_cockpit_engine_timer)
                    {endif}
                {endif}
                (L.L.key_mode) 3 = (L.L.ai_pre_cockpit_engine_timer) ! && (L.L.ai_pre_cockpit_engine_target) &&
                {if}
                    4 (S.L.key_mode)
                    0.6 (S.L.cp_key_rot)
                    1 (S.L.engine_starter) (S.L.engine_injection_on) (S.L.vdv_on)
                    (T.L.ev_schluessel_dreh)
                {endif}
                (L.L.key_mode) 4 =
                {if}
                    l4 !
                    {if}
                        (T.L.ev_engine_starter)
                    {else}
                        1 (S.L.engine_on)
                        400 (S.L.engine_n)
                        l2
                        {if}
                            60 (S.L.engine_temperature)
                            250 (S.L.engine_revs_since_start)
                        {endif}
                    {endif}
                {endif}
            {endif}
        {else}
            (L.L.key_mode) 4 =
            {if}
                3 (S.L.key_mode)
                0.4 (S.L.cp_key_rot)
                1 (S.L.engine_injection_on) (S.L.vdv_on)
                0 (S.L.engine_starter)
                (T.L.ev_schluessel_dreh)
            {endif}
            -1 (S.L.ai_pre_cockpit_engine_timer)
        {endif}
    {else}
        (L.L.key_mode) 3 =
        {if}
            (L.L.ai_pre_cockpit_engine_timer) -1 = (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
            {if}
                (L.L.engine_on) !
                {if}
                    0.5 10000 random 10000 / 3.5 * +
                {else}
                    7 10000 random 10000 / 13 * +
                {endif}
                (S.L.ai_pre_cockpit_engine_timer)
            {endif}
            (L.L.ai_pre_cockpit_engine_timer) 0 >
            {if}
                (L.L.ai_pre_cockpit_engine_timer) (L.S.Timegap) - 0 max (S.L.ai_pre_cockpit_engine_timer)
            {endif}
            (L.L.ai_pre_cockpit_engine_timer) !
            {if}
                2 (S.L.key_mode)
                0.2 (S.L.cp_key_rot)
                (T.L.ev_schluessel_dreh)
                (L.L.engine_on)
                {if}
                    0 (S.L.engine_injection_on)
                    (T.L.ev_engineshutdown)
                {endif}
                -1 (S.L.ai_pre_cockpit_engine_timer)
            {endif}
        {else}
            -1 (S.L.ai_pre_cockpit_engine_timer)
        {endif}
    {endif}

'   // ----- Transmission adjustment -----

    (L.L.ai_pre_cockpit_transmission_target) (L.L.engine_on) &&
    {if}
        (L.L.antrieb_getr_gangvorwahl) 4 = !
        {if}
            (L.L.ai_pre_cockpit_transmission_timer) -1 = (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
            {if}
                (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 =
                {if}
                    0.3 10000 random 10000 / 2.7 * +
                {else}
                    1 10000 random 10000 / 4 * +
                {endif}
                (S.L.ai_pre_cockpit_transmission_timer)
            {endif}
            (L.L.ai_pre_cockpit_transmission_timer) 0 >
            {if}
                (L.L.ai_pre_cockpit_transmission_timer) (L.S.Timegap) - 0 max (S.L.ai_pre_cockpit_transmission_timer)
            {endif}
            (L.L.ai_pre_cockpit_transmission_timer) !
            {if}
                4 (S.L.antrieb_getr_gangvorwahl)
                l4
                {if}
                    (L.S.GetTime) (C.L.antrieb_gangwahlzeit) 0.1 + -
                {else}
                    (L.S.GetTime)
                {endif}
                (S.L.antrieb_getr_gangwahlzeitpunkt)
                0.7 (S.L.cockpit_gang3)
                (T.L.ev_gangwahltaster)
                900000 (S.L.bremse_p_tank01) (S.L.bremse_p_tank02) (S.L.bremse_p_tank03) (S.L.bremse_p_tank04)
                    (S.L.bremse_p_leitung01) (S.L.bremse_p_leitung02)
                400000 (S.L.bremse_p_balg_0_R) (S.L.bremse_p_balg_0_L) (S.L.bremse_p_balg_1_R) (S.L.bremse_p_balg_1_L)
                -1 (S.L.ai_pre_cockpit_transmission_timer)
            {endif}
        {else}
            (L.L.ai_pre_cockpit_transmission_timer) 0 >
            {if}
                -1 (S.L.ai_pre_cockpit_transmission_timer)
            {endif}
        {endif}
    {else}
        (L.L.antrieb_getr_gangvorwahl) 4 =
        {if}
            (L.L.ai_pre_cockpit_transmission_timer) -1 = (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
            {if}
                3 10000 random 10000 / 17 * + (S.L.ai_pre_cockpit_transmission_timer)
            {endif}
            (L.L.ai_pre_cockpit_transmission_timer) 0 >
            {if}
                (L.L.ai_pre_cockpit_transmission_timer) (L.S.Timegap) - 0 max (S.L.ai_pre_cockpit_transmission_timer)
            {endif}
            (L.L.ai_pre_cockpit_transmission_timer) !
            {if}
                1 (S.L.antrieb_getr_gangvorwahl)
                0 (S.L.cockpit_gang3)
                (L.S.GetTime) (C.L.antrieb_gangwahlzeit) (C.L.antrieb_neutralwahlzeit) - -
                    (S.L.antrieb_getr_gangwahlzeitpunkt)
                (T.L.ev_gangwahltaster_N)
                -1 (S.L.ai_pre_cockpit_transmission_timer)
            {endif}
        {else}
            -1 (S.L.ai_pre_cockpit_transmission_timer)
        {endif}
    {endif}

'   // ----- Handbrake adjustment -----

    (L.L.ai_pre_cockpit_handbrake_target)
    {if}
        (L.L.bremse_feststell) !
        {if}
            (L.L.ai_pre_cockpit_handbrake_timer) -1 = (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
            {if}
                2 10000 random 10000 / 13 * + (S.L.ai_pre_cockpit_handbrake_timer)
            {endif}
            (L.L.ai_pre_cockpit_handbrake_timer) 0 >
            {if}
                (L.L.ai_pre_cockpit_handbrake_timer) (L.S.Timegap) - 0 max (S.L.ai_pre_cockpit_handbrake_timer)
            {endif}
            (L.L.ai_pre_cockpit_handbrake_timer) !
            {if}
                1 (S.L.bremse_feststell_sw) (S.L.bremse_feststell)
                (T.L.ev_bremse_feststell_ein)
                900000 (S.L.bremse_p_tank01) (S.L.bremse_p_tank02) (S.L.bremse_p_tank03) (S.L.bremse_p_tank04)
                    (S.L.bremse_p_leitung01) (S.L.bremse_p_leitung02)
                400000 (S.L.bremse_p_balg_0_R) (S.L.bremse_p_balg_0_L) (S.L.bremse_p_balg_1_R) (S.L.bremse_p_balg_1_L)
                -1 (S.L.ai_pre_cockpit_handbrake_timer)
            {endif}
        {else}
            -1 (S.L.ai_pre_cockpit_handbrake_timer)
        {endif}
    {else}
        (L.L.bremse_feststell)
        {if}
            (L.L.ai_pre_cockpit_handbrake_timer) -1 = (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
            {if}
                (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 =
                {if}
                    2 10000 random 10000 / 6 * +
                {else}
                    10 10000 random 10000 / 10 * +
                {endif}
                (S.L.ai_pre_cockpit_handbrake_timer)
            {endif}
            (L.L.ai_pre_cockpit_handbrake_timer) 0 >
            {if}
                (L.L.ai_pre_cockpit_handbrake_timer) (L.S.Timegap) - 0 max (S.L.ai_pre_cockpit_handbrake_timer)
            {endif}
            (L.L.ai_pre_cockpit_handbrake_timer) !
            {if}
                0 (S.L.bremse_feststell_sw) (S.L.bremse_feststell)
                (T.L.ev_bremse_feststell_aus)
                -1 (S.L.ai_pre_cockpit_handbrake_timer)
            {endif}
        {else}
            -1 (S.L.ai_pre_cockpit_handbrake_timer)
        {endif}
    {endif}
{end}

'------------------------------------------------------------------------------
' 10. Wiper usage
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_wiper}
'   // ----- Wiper adjustment scheduling -----

'   // Wiper usage is differentiated depending on engine state, that is, whether a) the vehicle is currently at a
'   // prolonged/2 (engine-off) stop or b) not.
'   // Case (b) is straightforward: There is a 1:1 mapping between the wiper-specific precipitation rate perception
'   // (ai_pre_cockpit_env_perception_wiper) and the setting of the cockpit wiper lever.
'   // Specifically:
'   // - When the perceived precipitation rate is in the "very light" range -- which can either translate to _zero_
'   //   or indeed very light precipitation --, wipers are generally set to "off", and manually toggled on and off on
'   //   an as-needed basis, i.e., when the windshield becomes too wet, according to the overall precipitation
'   //   tolerance (ai_pre_cockpit_wiper_usage_overall_precipitation_tolerance). Wipers are also manually toggled when
'   //   stuck at an angle significantly above zero, due to previous forceful deactivation (electrics reduction because
'   //   of engine shut-down upon prolonged stop arrival); doing so "un-stucks" them.
'   // - When the precipitation rate is in the "light" range, wipers are set to "interval".
'   // - When the precipitation rate is in the "moderate" range, wipers are set to "continuously on".
'   // - When the precipitation rate exceeds the "moderate" range, wipers are either set to "continuously on" or
'   //   "fast", based on the vehicle-specific wiper usage "eagerness" trait (ai_pre_cockpit_wiper_usage_scope).
'   // In case (a), wipers are generally disabled, unless usage is "eager" and they would normally be set to "on" or
'   // "fast" under case (b), in which case they are retained running in "interval".
'   // Wiper usage preferences are static.

    (L.L.ai_pre_cockpit_env_perception_wiper) s0

    (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_env_perception_wiper_changed) ||
    {if}
        l0 3 = (L.L.ai_pre_cockpit_wiper_usage_scope) 2 = &&
        {if}
            3
        {else}
            l0 2 min
        {endif}
        s1 (S.L.ai_pre_cockpit_wiper_sw_target)
        (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 = &&
        {if}
'           // Initialization or post-hibernation: Instant adjustment
            0
        {else}
'           // Non-initialization / non-post-hibernation. Note that reduction will always eventually occur slower than
'           // increase, due to perception being pessimistic (deterioration of conditions being registered sooner than
'           // improvement).
'           // Adjustment delay variations:
'           // - Regular wiper mode adjustment: 0.3~3 sec
'           // - Manual toggle on: 0.15~3 sec
'           // - Manual toggle off: 0.15~1 sec
'           // - Prolonged/2 arrival adjustment (disabling or decrease): 2~15 sec
'           // - Prolonged/2 departure adjustment (enabling or increase):
'           //   - Non-parking-maneuver-style departure: 2~15 sec
'           //   - Parking-maneuver-style departure: 2~5 sec
            -1
        {endif}
        (S.L.ai_pre_cockpit_wiper_sw_timer)
    {else}
        (L.L.ai_pre_cockpit_wiper_sw_target) s1
    {endif}

    (L.L.AI_Engine) 1 = (L.L.ai_pre_cockpit_engine_target) && (L.L.ai_pre_cockpit_transmission_target) &&
    {if}
'       // Case b
        (L.L.ai_pre_cockpit_wiper_sw_target_context) 2 =
        {if}
'           // Prolonged stop departure adjustment
            0 (S.L.ai_pre_cockpit_wiper_sw_target_context)
            (L.L.ai_pre_cockpit_wiper_sw_timer) -1 =
            {if}
                (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 =
                {if}
                    3
                {else}
                    13
                {endif}
                10000 random 10000 / * 2 + (S.L.ai_pre_cockpit_wiper_sw_timer)
            {endif}
        {else}
'           // Regular adjustment - manual on/off toggling
            l0 0 = (L.L.ai_pre_cockpit_stop_phase) ! (L.L.ai_pre_cockpit_stop_phase) 3 >= || &&
            {if}
'               // Manually toggle on off either when, under very light precipitation, the windshield gets too wet, or
'               // when, under no precipitation at all, wipers stuck due to previous forceful deactivation.
                (L.L.PrecipRate) 0 max (L.L.Rain_Window_Wiped_Wetness)
                    (L.L.ai_pre_cockpit_wiper_usage_overall_precipitation_tolerance) 0.99 min > && d !
                    (L.L.wiperpos_left) 0.15 > (L.L.wiperpos_right) 0.1 > || && (L.L.wiperrunning) ! && ||
                    (L.L.cp_key_rot) 0.4 >= (L.L.wiper_cti_wipers_require_full_elec) ! || &&
                {if}
                    l1 0 =
                    {if}
                        1 s1 (S.L.ai_pre_cockpit_wiper_sw_target_context)
                        (L.L.ai_pre_cockpit_wiper_sw_timer) -1 =
                        {if}
                            0.15 10000 random 10000 / 2.85 * + (S.L.ai_pre_cockpit_wiper_sw_timer)
                        {endif}
                    {endif}
                {else}
                    (L.L.ai_pre_cockpit_wiper_sw_target_context) 1 =
                    {if}
'                       // Toggle back off.
                        0 s1 (S.L.ai_pre_cockpit_wiper_sw_target_context)
                        (L.L.ai_pre_cockpit_wiper_sw_timer) -1 =
                        {if}
                            0.15 10000 random 10000 / 0.85 * + (S.L.ai_pre_cockpit_wiper_sw_timer)
                        {endif}
                    {endif}
                {endif}
            {endif}
        {endif}
    {else}
        (L.L.ai_pre_cockpit_transmission_target) !
        {if}
'           // Case a (prolonged stop arrival adjustment)
            l0 2 >= (L.L.ai_pre_cockpit_wiper_usage_scope) 2 = && s2 l1 = !
            {if}
                l2 s1
                2 (S.L.ai_pre_cockpit_wiper_sw_target_context)
                (L.L.ai_pre_cockpit_wiper_sw_timer) -1 = (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
                {if}
                    2 10000 random 10000 / 13 * + (S.L.ai_pre_cockpit_wiper_sw_timer)
                {endif}
            {endif}
        {endif}
    {endif}

'   // ----- Adjustment -----

    l1 (L.L.cockpit_wischer_drehschalter_mode) = !
    {if}
        (L.L.ai_pre_cockpit_wiper_sw_timer) -1 = (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
        {if}
            0.3 10000 random 10000 / 2.7 * + (S.L.ai_pre_cockpit_wiper_sw_timer)
        {endif}
        (L.L.ai_pre_cockpit_wiper_sw_timer)
        {if}
            (L.L.ai_pre_cockpit_wiper_sw_timer) (L.L.ai_pre_cockpit_ai_timegap) - 0 max
                (S.L.ai_pre_cockpit_wiper_sw_timer)
        {endif}
        (L.L.ai_pre_cockpit_wiper_sw_timer) !
        {if}
            l1 (S.L.cockpit_wischer_drehschalter_mode)
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_wiper_sw_timer)
    {endif}
{end}

'------------------------------------------------------------------------------
' 11. Indicator usage
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_indicators}
'   // ----- Indicator adjustment scheduling -----

'   // Indicators can undergo the following changes in state:
'   // 1. Upon scheduled stop arrival:
'   //    a. They may be enabled (off -> left/right, depending on the editor-assigned attribute).
'   //       Adjustment delay variation: 0.15~1.15 sec
'   //    b. They may be left ("forgotten") off for the duration of the stop.
'   //    (a) is much more likely to occur than (b).
'   // 2. After prolonged/2 (engine-off) stop arrival:
'   //    a. They may be disabled (left/right -> off).
'   //       Adjustment delay variation: 2~12 sec
'   //    b. They may be left ("forgotten") on for the duration of the stop. Note that, when indicators are constrained
'   //       by electrics, they may still become implicitly disabled due to the engine being turned off.
'   //    (a) is somewhat more likely than (b).
'   // 3. At scheduled stop departure, when the next path segment mandates no particular behavior (e.g. it is not a
'   //    junction of some sort):
'   //    a. They may be inverted (left/right -> right/left).
'   //       Adjustment delay variation: 0.15~1.15 sec
'   //    b. They may be disabled (left/right -> off).
'   //       Adjustment delay variation: 0.15~3.15 sec
'   //    c. They may be "forgotten" in their previous state, assigned in case (1) or (2).
'   //    (a) is slightly more likely than (b). (b) is much more likely than (c).
'   // 4. In any other case where indicator adjustment is prescribed by a path segment:
'   //    a. Indicators may be enabled, inverted, or disabled.
'   //       Adjustment delay variation:
'   //       - Enabling or inversion: 0.15~1.15 sec
'   //       - Disabling:
'   //         - Most likely: 0.15~3.15 sec
'   //         - Less likely: 0.15~15.15 sec
'   //         - Least likely: 0.15~90.15 sec
'   //       Additionally, when previously case (3) was in effect, the vehicle will not disable indicators before
'   //       having covered a distance of 5~25 m from the last scheduled stop. How this translates to time obviously
'   //       depends on velocity, but also random variation, to account for cases where the path after the stop is
'   //       for some reason blocked (e.g., red traffic light) -- so that even if the vehicle remains stationary for
'   //       "a long" time, it will at some point cease indicating its departure.
'   //    b. Indicators may be "forgotten" in their previous state.
'   //    (a) is more likely than (b). Specifically when it comes to (a)'s sub-cases, enabling and inversion are more
'   //    likely to _not_ be neglected than disabling.
'   // Adjectives describing probability ("somewhat/very/not likely") correspond to the defined
'   // ai_pre_cockpit_indicator_pc_factor_low, ai_pre_cockpit_indicator_pc_factor_moderate, and
'   // ai_pre_cockpit_indicator_pc_factor_high traits. Preferences are always expressed dynamically.
'   // XXX: When under case (4) the vehicle "forgets" / "neglects" adjustment, and the next n path segments prescribe
'   //      the same indicator setting, the vehicle will repeatedly "forget" / "neglect" adjustment until entering
'   //      the (n+1)th segment following the initial choice. This is obviously detrimental to realism when the
'   //      adjacent segments represent _individual_ curves / junctions / turns, causing the vehicle to appear
'   //      too neglectful even for human standards. Unfortunately there is no workaround (except perhaps by relying on
'   //      steering angle as a heuristic, which would be error-prone to say the least).

    (L.L.ai_pre_cockpit_indicator_sw_target) s0 s7 0 <
    {if}
        l0 1 + abs s0 s7
    {endif}
    (L.L.AI_Blinker_L) (L.L.AI_Blinker_R) 2 * + d 3 = ! * s1
    10000 random 10000 / s2

    (L.L.ai_pre_cockpit_stop_phase) 4 = (L.L.ai_pre_cockpit_initialized) 5 < ||
    {if}
        (L.L.ai_pre_cockpit_indicator_sw_target_context) -2 = !
        {if}
'           // Special case: Initialization or post-hibernation. This is equivalent to case 3, with a lack of
'           // (reliable) previous context.
            -2 (S.L.ai_pre_cockpit_indicator_sw_target_context)
            l0 l1 = !
            {if}
                l2 (L.L.ai_pre_cockpit_indicator_pc_factor_moderate) <
                {if}
                    (L.L.ai_pre_cockpit_stop_phase) 4 = (L.L.ai_pre_cockpit_initialized) 5 <
                        (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 = && ||
                    {if}
'                       // Initialization (initial spawn) or post-hibernation: Instant adjustment
                        0
                    {else}
'                       // Takeover of previously user-controlled vehicle: Delayed adjustment
                        -1
                    {endif}
                    (S.L.ai_pre_cockpit_indicator_sw_timer)
                    l1
                {else}
                    l1 /-/ 1 -
                {endif}
                s0
            {endif}
        {endif}
    {else}
        (L.L.ai_pre_cockpit_indicator_sw_target_context) -2 =
        {if}
            0 (S.L.ai_pre_cockpit_indicator_sw_target_context)
        {endif}
        (L.L.AI_Engine) 1 = (L.L.ai_pre_cockpit_engine_target) && (L.L.ai_pre_cockpit_transmission_target) &&
        {if}
            (L.L.ai_pre_cockpit_indicator_sw_target_context) -1 =
            {if}
                1 (S.L.ai_pre_cockpit_indicator_sw_target_context)
            {else}
                (L.L.ai_pre_cockpit_stop_phase) 0 = l0 l1 = ! && (L.L.ai_pre_cockpit_indicator_sw_target_context) 0 =
                    (L.L.ai_pre_cockpit_indicator_sw_target_context) 2 >= || &&
                {if}
'                   // Case 4
                    (L.L.ai_pre_cockpit_indicator_sw_target_context) 0 =
                    {if}
                        -1 (S.L.ai_pre_cockpit_indicator_sw_timer)
                        l2 (L.L.ai_pre_cockpit_indicator_pc_factor_low) <
                        {if}
                            l1
                        {else}
                            l1 /-/ 1 -
                        {endif}
                        s0
                    {else}
                        (L.L.ai_pre_cockpit_indicator_sw_target_context) 2 >=
                            l1 d (L.L.ai_pre_cockpit_indicator_sw_target_last_departure) = ! &&
                            (L.L.ai_pre_cockpit_indicator_sw_target) 0 < || &&
                        {if}
                            -1 (S.L.ai_pre_cockpit_indicator_sw_timer)
                            l2 (L.L.ai_pre_cockpit_indicator_pc_factor_moderate) <
                            {if}
                                l1
                            {else}
                                0 (S.L.ai_pre_cockpit_indicator_sw_target_context)
                                l1 /-/ 1 -
                            {endif}
                            s0
                        {else}
                            (L.L.ai_pre_cockpit_indicator_sw_target_context) 3 =
                            {if}
                                -1 (S.L.ai_pre_cockpit_indicator_sw_timer)
                                l2 (L.L.ai_pre_cockpit_indicator_pc_factor_low) <
                                {if}
                                    l1
                                {else}
                                    0 (S.L.ai_pre_cockpit_indicator_sw_target_context)
                                    l1 /-/ 1 -
                                {endif}
                                s0
                            {endif}
                        {endif}
                    {endif}
                {else}
                    (L.L.ai_pre_cockpit_stop_phase) 1 =
                    {if}
'                       // Case 1
                        (L.L.ai_pre_cockpit_indicator_sw_target_context) 1 = !
                        {if}
                            1 (S.L.ai_pre_cockpit_indicator_sw_target_context)
                            l1 (S.L.ai_pre_cockpit_indicator_sw_target_last_arrival)
                            l0 l1 = !
                            {if}
                                -1 (S.L.ai_pre_cockpit_indicator_sw_timer)
                                l2 (L.L.ai_pre_cockpit_indicator_pc_factor_high) <
                                {if}
                                    l1
                                {else}
                                    l1 /-/ 1 -
                                {endif}
                                s0
                            {endif}
                        {endif}
                    {else}
                        (L.L.ai_pre_cockpit_stop_phase) 0 = (L.L.ai_pre_cockpit_indicator_sw_target_context) 1 = &&
                        {if}
'                           // Case 3
                            -1 (S.L.ai_pre_cockpit_indicator_sw_timer)
                            (L.L.ai_pre_cockpit_indicator_sw_target_last_arrival) 1 =
                            {if}
                                2
                            {else}
                                1
                            {endif}
                            s3 (S.L.ai_pre_cockpit_indicator_sw_target_last_departure)
                            l2 (L.L.ai_pre_cockpit_indicator_pc_factor_moderate) <
                            {if}
                                2 (S.L.ai_pre_cockpit_indicator_sw_target_context)
                                5 10000 random 10000 / 20 * + 1000 /
                                    (S.L.ai_pre_cockpit_indicator_post_departure_distance_tracker)
                                10000 random 10000 / (L.L.ai_pre_cockpit_indicator_pc_factor_low) 0.9 * <
                                {if}
                                    l3
                                {else}
                                    0
                                {endif}
                            {else}
                                3 (S.L.ai_pre_cockpit_indicator_sw_target_context)
                                0 (S.L.ai_pre_cockpit_indicator_post_departure_distance_tracker)
                                10000 random 10000 / (L.L.ai_pre_cockpit_indicator_pc_factor_low) <
                                {if}
                                    l3 /-/ 1 -
                                {else}
                                    -1
                                {endif}
                            {endif}
                            s0
                        {endif}
                    {endif}
                {endif}
            {endif}
        {else}
            (L.L.ai_pre_cockpit_transmission_target) !
            {if}
'               // Case 2
                (L.L.ai_pre_cockpit_indicator_sw_target_context) -1 = !
                {if}
                    -1 (S.L.ai_pre_cockpit_indicator_sw_target_context)
                    l0
                    {if}
                        l2 (L.L.ai_pre_cockpit_indicator_pc_factor_moderate) <
                        {if}
                            2 10000 random 10000 / 10 * + (S.L.ai_pre_cockpit_indicator_sw_timer)
                            0
                        {else}
                            -1
                        {endif}
                        s0
                    {endif}
                {endif}
            {endif}
        {endif}
    {endif}

    l0 l7 = !
    {if}
        l0 (S.L.ai_pre_cockpit_indicator_sw_target)
    {else}
        (L.L.ai_pre_cockpit_indicator_sw_target) s0
    {endif}

'   // ----- Adjustment -----

    l0 0 >= l0 (L.L.lights_sw_blinker) = ! &&
    {if}
        (L.L.ai_pre_cockpit_indicator_sw_timer) -1 = (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) ! &&
        {if}
            l0 !
            {if}
                (L.L.ai_pre_cockpit_indicator_sw_target_context) ! 10000 random 10000 /
                    (L.L.ai_pre_cockpit_indicator_pc_factor_low) >= &&
                {if}
                    10000 random 10000 / (L.L.ai_pre_cockpit_indicator_pc_factor_low) <
                    {if}
                        15
                    {else}
                        90
                    {endif}
                {else}
                    3
                {endif}
            {else}
                1
            {endif}
            10000 random 10000 / * 0.15 + (S.L.ai_pre_cockpit_indicator_sw_timer)
        {endif}
        (L.L.ai_pre_cockpit_indicator_sw_timer) 0 >
        {if}
            (L.L.ai_pre_cockpit_indicator_sw_target_context) 3 =
                (L.L.ai_pre_cockpit_indicator_post_departure_distance_tracker) &&
            {if}
                (L.L.ai_pre_cockpit_indicator_post_departure_distance_tracker)
                    (L.L.velocity) 3 10000 random 10000 / 7 * + max
                    (L.S.Timegap) 3600 / * - 0 max (S.L.ai_pre_cockpit_indicator_post_departure_distance_tracker)
            {else}
                (L.L.ai_pre_cockpit_indicator_sw_timer) (L.S.Timegap) - 0 max (S.L.ai_pre_cockpit_indicator_sw_timer)
            {endif}
        {endif}
        (L.L.ai_pre_cockpit_indicator_sw_timer) !
        {if}
            (L.L.ai_pre_cockpit_indicator_sw_target_context) 2 =
            {if}
                3 (S.L.ai_pre_cockpit_indicator_sw_target_context)
                l0 !
                {if}
                    (L.L.ai_pre_cockpit_indicator_sw_target_last_departure) /-/ 1 -
                        (S.L.ai_pre_cockpit_indicator_sw_target)
                {endif}
            {else}
                (L.L.ai_pre_cockpit_indicator_sw_target_context) 3 =
                {if}
                    0 (S.L.ai_pre_cockpit_indicator_sw_target_context)
                {endif}
            {endif}
            l0 (S.L.lights_sw_blinker)
        {endif}
    {else}
        -1 (S.L.ai_pre_cockpit_indicator_sw_timer)
    {endif}
{end}

'------------------------------------------------------------------------------
' 12. Passenger window usage by driver
'------------------------------------------------------------------------------

{macro:ai_pre_cockpit_passenger_windows}
'   // ----- Passenger windows (driver) adjustment scheduling -----

'   // Passenger windows are adjusted by the driver upon arrival at prolonged/2 (engine-off) stops, once any other
'   // pending cockpit adjustments have taken place.
'   // Preference-wise:
'   // - Windows are only opened when the environment is deemed "dry"; otherwise they are closed.
'   // - Under conditions perceived as "chilly" and "daytime", 0~2 windows are opened.
'   // - Under conditions perceived as "ideal", 0~4 windows are opened.
'   // - Under "warm" conditions, 0 or all 4 windows are opened.
'   // - Under hot conditions, windows are generally shut. Some drivers may exceptionally retain all of them open,
'   //   however.
'   // - Under any other case windows remain shut.
'   // - The same windows chosen to be opened under lower temperature ranges, or more, are (retained) opened under
'   //   higher temperature ranges, as long as conditions remain "dry", except, potentially, when transitioning from
'   //   "warm" to "hot" (where windows are likely closed).
'   // - Drivers will typically choose a window in the rear first (it tends to get warmer in the rear due to the
'   //   engine). For choosing the second window there are currently two implemented "strategies": Either the window
'   //   directly opposing the first, or the one diagonally opposing it gets selected. The same logic is applied for
'   //   picking the remaining two windows.
'   // - Drivers will lock windows under certain conditions. The average driver will however only do so under the
'   //   extreme ends of the temperature spectrum. Nevertheless some drivers will always lock windows when not in use,
'   //   while others will opt to never lock them.
'   // - Preferences are static.
'   // Adjustment-wise:
'   // - It should appear _as if_ the driver walked over to each window and adjusted it. Of course the actual AI driver
'   //   figure can't be animated. First the driver cubicle door will be dragged open. Then at 5~15 second intervals
'   //   one or more windows will be adjusted. Lastly the driver door will be dragged closed again. This whole
'   //   adjustment cycle takes roughly a minute or two to complete, depending on the number of windows pending
'   //   adjustment. From the point in time the driver door gets opened, until the instant it gets closed again, any
'   //   other pending adjustments (e.g., opening a door to allow passenger boarding) are postponed / rescheduled
'   //   -- the driver cannot be both "outside" and "inside" their cubicle at the same time, after all.
'   // - As usual with long-running adjustments, passenger windows will "automagically" (instantly) get adjusted
'   //   whenever AI vehicles exit hibernation and their adjustment tolerance has elapsed, as well as at the time of
'   //   their initial spawning, to give the casual observer the impression that "they adjusted in the meantime".

    (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_env_perception_changed) ||
    {if}
        0 s0 s1 s2 s3
        (L.L.ai_pre_cockpit_env_perception_wet) ! (L.L.cp_cti_has_openable_passenger_windows) &&
        {if}
            (L.L.ai_pre_cockpit_env_perception_chilly) (L.L.ai_pre_cockpit_env_perception_nighttime) ! &&
            {if}
                (L.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_chilly_dry_daytime) s0
                (L.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_chilly_dry_daytime) s1
                (L.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_chilly_dry_daytime) s2
                (L.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_chilly_dry_daytime) s3
            {else}
                (L.L.ai_pre_cockpit_env_perception_ideal)
                {if}
                    (L.L.ai_pre_cockpit_env_perception_nighttime)
                    {if}
                        (L.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_ideal_dry_nighttime) s0
                        (L.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_ideal_dry_nighttime) s1
                        (L.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_ideal_dry_nighttime) s2
                        (L.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_ideal_dry_nighttime) s3
                    {else}
                        (L.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_ideal_dry_daytime) s0
                        (L.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_ideal_dry_daytime) s1
                        (L.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_ideal_dry_daytime) s2
                        (L.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_ideal_dry_daytime) s3
                    {endif}
                {else}
                    (L.L.ai_pre_cockpit_env_perception_warm)
                    {if}
                        (L.L.ai_pre_cockpit_env_perception_nighttime)
                        {if}
                            (L.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_warm_dry_nighttime) s0
                            (L.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_warm_dry_nighttime) s1
                            (L.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_warm_dry_nighttime) s2
                            (L.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_warm_dry_nighttime) s3
                        {else}
                            (L.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_warm_dry_daytime) s0
                            (L.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_warm_dry_daytime) s1
                            (L.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_warm_dry_daytime) s2
                            (L.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_warm_dry_daytime) s3
                        {endif}
                    {else}
                        (L.L.ai_pre_cockpit_env_perception_hot)
                        {if}
                            (L.L.ai_pre_cockpit_env_perception_nighttime)
                            {if}
                                (L.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_hot_dry_nighttime) s0
                                (L.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_hot_dry_nighttime) s1
                                (L.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_hot_dry_nighttime) s2
                                (L.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_hot_dry_nighttime) s3
                            {else}
                                (L.L.ai_pre_cockpit_opening_passenger_window_1_l_when_env_hot_dry_daytime) s0
                                (L.L.ai_pre_cockpit_opening_passenger_window_1_r_when_env_hot_dry_daytime) s1
                                (L.L.ai_pre_cockpit_opening_passenger_window_2_l_when_env_hot_dry_daytime) s2
                                (L.L.ai_pre_cockpit_opening_passenger_window_2_r_when_env_hot_dry_daytime) s3
                            {endif}
                        {endif}
                    {endif}
                {endif}
            {endif}
        {endif}
        l0 (S.L.ai_pre_cockpit_passenger_window_1_l_target)
        l1 (S.L.ai_pre_cockpit_passenger_window_1_r_target)
        l2 (S.L.ai_pre_cockpit_passenger_window_2_l_target)
        l3 (S.L.ai_pre_cockpit_passenger_window_2_r_target)
    {endif}

    (L.L.ai_pre_cockpit_passenger_window_usage_scope) 1 =
    {if}
        0
    {else}
        (L.L.ai_pre_cockpit_passenger_window_usage_scope) 2 =
        {if}
            (L.L.ai_pre_cockpit_env_perception) 300 < (L.L.ai_pre_cockpit_env_perception) 600 >= ||
        {else}
            1
        {endif}
    {endif}
    s4

'   // ----- Adjustment -----

    (L.L.ai_pre_cockpit_initialized) 5 < (L.L.ai_pre_cockpit_initial_spawn_as_ai_vehicle) 1 = &&
        (L.L.ai_pre_cockpit_stop_phase) 4 = (L.L.ai_pre_cockpit_env_perception_changed) && ||
    {if}
'       // Initialization (initial spawn) or post-hibernation: Instant adjustment
        (L.L.cp_cti_has_openable_passenger_windows)
        {if}
            l0 (S.L.cp_passenger_window_1_l) ! l4 && (S.L.cp_passenger_window_1_l_locked)
            l1 (S.L.cp_passenger_window_1_r) ! l4 && (S.L.cp_passenger_window_1_r_locked)
            l2 (S.L.cp_passenger_window_2_l) ! l4 && (S.L.cp_passenger_window_2_l_locked)
            l3 (S.L.cp_passenger_window_2_r) ! l4 && (S.L.cp_passenger_window_2_r_locked)
        {endif}
        0 (S.L.ai_pre_cockpit_passenger_window_adjustment_phase)
        -1 (S.L.ai_pre_cockpit_passenger_window_adjustment_timer)
    {else}
        (L.L.cp_cti_has_openable_passenger_windows)
        {if}
'           // Non-initialization / non-post-hibernation: Delayed / realistic adjustment

            (L.L.ai_pre_cockpit_stop_brake_sw_timer) -1 = (L.L.ai_pre_cockpit_door_lock_sw_timer) -1 = &&
                (L.L.ai_pre_cockpit_door_01_sw_timer) -1 = && (L.L.ai_pre_cockpit_door_23_sw_timer) -1 = &&
                (L.L.ai_pre_cockpit_driver_window_sw_timer) -1 = && (L.L.cp_dummy_sw08) ! &&
                (L.L.ai_pre_cockpit_hatch_sw_timer) -1 = && (L.L.ai_pre_cockpit_engine_timer) -1 = &&
                (L.L.ai_pre_cockpit_transmission_timer) -1 = && (L.L.ai_pre_cockpit_handbrake_timer) -1 = &&
                (L.L.bremse_feststell) && (L.L.ai_pre_cockpit_driver_ac_activation_sw_timer) -1 = &&
                (L.L.ai_pre_cockpit_driver_ac_temperature_sw_timer) -1 = &&
                (L.L.ai_pre_cockpit_driver_ac_fan_sw_timer) -1 = &&
                (L.L.ai_pre_cockpit_driver_ac_air_flow_dispensation_sw_timer) -1 = &&
                (L.L.ai_pre_cockpit_passenger_ac_activation_sw_timer) -1 = &&
                (L.L.ai_pre_cockpit_cabin_heater_activation_sw_timer) -1 = &&
                (L.L.ai_pre_cockpit_main_sun_blind_adjustment_timer) -1 = &&
                (L.L.ai_pre_cockpit_side_sun_blind_adjustment_timer) -1 = &&
                (L.L.ai_pre_cockpit_wiper_sw_timer) -1 = && (L.L.ai_pre_cockpit_indicator_sw_timer) -1 = &&
                (L.L.lights_ai_ext_lighting_on_timer) (L.L.lights_ai_ext_lighting_darkness_tolerance) 120 min >= &&
                (L.L.lights_ai_ext_lighting_off_timer) (L.L.lights_ai_ext_lighting_brightness_tolerance) 120 min >= &&
                (L.L.lights_ai_int_lighting_darker_or_on_timer)
                (L.L.lights_ai_int_lighting_darkness_tolerance) 120 min >= &&
                (L.L.lights_ai_int_lighting_brighter_or_off_timer)
                (L.L.lights_ai_int_lighting_brightness_tolerance) 120 min >= &&
                (L.L.ai_pre_cockpit_stop_prolonging_heuristic) &&
                (L.L.ai_pre_cockpit_stop_parking_maneuver_heuristic) 1 = ! &&
                (L.L.ai_pre_cockpit_stop_phase) d 4 = ! && && s0

            (L.L.ai_pre_cockpit_passenger_window_adjustment_timer) 0 >
            {if}
                (L.L.ai_pre_cockpit_passenger_window_adjustment_timer) (L.S.Timegap) - 0 max
                    (S.L.ai_pre_cockpit_passenger_window_adjustment_timer)
            {endif}

            (L.L.ai_pre_cockpit_passenger_window_1_l_target) (S.L.r10) (L.L.cp_passenger_window_1_l) (S.L.r11)
                (L.L.cp_passenger_window_1_l_locked) (S.L.r12)
                (M.L.ai_pre_cockpit_passenger_windows_establish_window_target) (L.L.r13) s1
            (L.L.ai_pre_cockpit_passenger_window_1_r_target) (S.L.r10) (L.L.cp_passenger_window_1_r) (S.L.r11)
                (L.L.cp_passenger_window_1_r_locked) (S.L.r12)
                (M.L.ai_pre_cockpit_passenger_windows_establish_window_target) (L.L.r13) s2
            (L.L.ai_pre_cockpit_passenger_window_2_l_target) (S.L.r10) (L.L.cp_passenger_window_2_l) (S.L.r11)
                (L.L.cp_passenger_window_2_l_locked) (S.L.r12)
                (M.L.ai_pre_cockpit_passenger_windows_establish_window_target) (L.L.r13) s3
            (L.L.ai_pre_cockpit_passenger_window_2_r_target) (S.L.r10) (L.L.cp_passenger_window_2_r) (S.L.r11)
                (L.L.cp_passenger_window_2_r_locked) (S.L.r12)
                (M.L.ai_pre_cockpit_passenger_windows_establish_window_target) (L.L.r13) s5

            l1 l2 || l3 || l5 || (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) || l0 &&
            {if}
                (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) !
                {if}
                    (L.L.ai_pre_cockpit_passenger_window_adjustment_timer) -1 =
                    {if}
                        (M.L.ai_pre_cockpit_passenger_windows_initial_delay)
                    {endif}
                    (L.L.ai_pre_cockpit_passenger_window_adjustment_timer) !
                    {if}
                        1 (S.L.ai_pre_cockpit_passenger_window_adjustment_phase)
                        (M.L.ai_pre_cockpit_passenger_windows_initial_delay)
                    {endif}
                {else}
                    (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) 1 =
                    {if}
                        (L.L.ai_pre_cockpit_passenger_window_adjustment_timer) !
                        {if}
                            (L.L.cp_fahrertuer_pos) 0.9 <
                            {if}
                                l0 (S.L.r10) l1 (S.L.r11) l2 (S.L.r12)
                                (L.L.cp_fahrertuer_pos) s0 0.9 s1 1 10000 random 10000 / + s2
                                    (M.L.utils_gradual_constant_update) l0 (S.L.cp_fahrertuer_pos)
                                    (S.L.cp_fahrertuer_lastpos)
                                (L.L.r10) s0 (L.L.r11) s1 (L.L.r12) s2
                            {endif}
                            (L.L.cp_fahrertuer_pos) 0.9 >=
                            {if}
                                2 (S.L.ai_pre_cockpit_passenger_window_adjustment_phase)
                                (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                            {endif}
                        {endif}
                    {else}
                        (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) 2 =
                        {if}
                            (L.L.ai_pre_cockpit_passenger_window_adjustment_timer) !
                            {if}
                                l1 1 =
                                {if}
                                    1 (S.L.cp_passenger_window_1_l)
                                    (T.L.ev_klappfenster_opn)
                                    (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                {else}
                                    l1 2 = l1 3 = ||
                                    {if}
                                        0 (S.L.cp_passenger_window_1_l_locked)
                                        (T.L.ev_cp_passenger_window_unlock)
                                        l1 2 =
                                        {if}
                                            (M.L.ai_pre_cockpit_passenger_windows_lock_unlock_delay)
                                        {else}
                                            (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                        {endif}
                                    {else}
                                        l1 4 = l1 5 = ||
                                        {if}
                                            0 (S.L.cp_passenger_window_1_l)
                                            (T.L.ev_klappfenster_cls)
                                            l1 4 =
                                            {if}
                                                (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                            {else}
                                                (M.L.ai_pre_cockpit_passenger_windows_lock_unlock_delay)
                                            {endif}
                                        {else}
                                            l1 6 =
                                            {if}
                                                1 (S.L.cp_passenger_window_1_l_locked)
                                                (T.L.ev_cp_passenger_window_lock)
                                                (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                            {else}
                                                3 (S.L.ai_pre_cockpit_passenger_window_adjustment_phase)
                                            {endif}
                                        {endif}
                                    {endif}
                                {endif}
                            {endif}
                        {else}
                            (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) 3 =
                            {if}
                                (L.L.ai_pre_cockpit_passenger_window_adjustment_timer) !
                                {if}
                                    l2 1 =
                                    {if}
                                        1 (S.L.cp_passenger_window_1_r)
                                        (T.L.ev_klappfenster_opn)
                                        (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                    {else}
                                        l2 2 = l2 3 = ||
                                        {if}
                                            0 (S.L.cp_passenger_window_1_r_locked)
                                            (T.L.ev_cp_passenger_window_unlock)
                                            l2 2 =
                                            {if}
                                                (M.L.ai_pre_cockpit_passenger_windows_lock_unlock_delay)
                                            {else}
                                                (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                            {endif}
                                        {else}
                                            l2 4 = l2 5 = ||
                                            {if}
                                                0 (S.L.cp_passenger_window_1_r)
                                                (T.L.ev_klappfenster_cls)
                                                l2 4 =
                                                {if}
                                                    (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                                {else}
                                                    (M.L.ai_pre_cockpit_passenger_windows_lock_unlock_delay)
                                                {endif}
                                            {else}
                                                l2 6 =
                                                {if}
                                                    1 (S.L.cp_passenger_window_1_r_locked)
                                                    (T.L.ev_cp_passenger_window_lock)
                                                    (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                                {else}
                                                    l1
                                                    {if}
                                                        2
                                                    {else}
                                                        4
                                                    {endif}
                                                    (S.L.ai_pre_cockpit_passenger_window_adjustment_phase)
                                                {endif}
                                            {endif}
                                        {endif}
                                    {endif}
                                {endif}
                            {else}
                                (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) 4 =
                                {if}
                                    (L.L.ai_pre_cockpit_passenger_window_adjustment_timer) !
                                    {if}
                                        l3 1 =
                                        {if}
                                            1 (S.L.cp_passenger_window_2_l)
                                            (T.L.ev_klappfenster_opn)
                                            (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                        {else}
                                            l3 2 = l3 3 = ||
                                            {if}
                                                0 (S.L.cp_passenger_window_2_l_locked)
                                                (T.L.ev_cp_passenger_window_unlock)
                                                l3 2 =
                                                {if}
                                                    (M.L.ai_pre_cockpit_passenger_windows_lock_unlock_delay)
                                                {else}
                                                    (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                                {endif}
                                            {else}
                                                l3 4 = l3 5 = ||
                                                {if}
                                                    0 (S.L.cp_passenger_window_2_l)
                                                    (T.L.ev_klappfenster_cls)
                                                    l3 4 =
                                                    {if}
                                                        (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                                    {else}
                                                        (M.L.ai_pre_cockpit_passenger_windows_lock_unlock_delay)
                                                    {endif}
                                                {else}
                                                    l3 6 =
                                                    {if}
                                                        1 (S.L.cp_passenger_window_2_l_locked)
                                                        (T.L.ev_cp_passenger_window_lock)
                                                        (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                                    {else}
                                                        l2 l1 ||
                                                        {if}
                                                            3
                                                        {else}
                                                            5
                                                        {endif}
                                                        (S.L.ai_pre_cockpit_passenger_window_adjustment_phase)
                                                    {endif}
                                                {endif}
                                            {endif}
                                        {endif}
                                    {endif}
                                {else}
                                    (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) 5 =
                                    {if}
                                        (L.L.ai_pre_cockpit_passenger_window_adjustment_timer) !
                                        {if}
                                            l5 1 =
                                            {if}
                                                1 (S.L.cp_passenger_window_2_r)
                                                (T.L.ev_klappfenster_opn)
                                                (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                            {else}
                                                l5 2 = l5 3 = ||
                                                {if}
                                                    0 (S.L.cp_passenger_window_2_r_locked)
                                                    (T.L.ev_cp_passenger_window_unlock)
                                                    l5 2 =
                                                    {if}
                                                        (M.L.ai_pre_cockpit_passenger_windows_lock_unlock_delay)
                                                    {else}
                                                        (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                                    {endif}
                                                {else}
                                                    l5 4 = l5 5 = ||
                                                    {if}
                                                        0 (S.L.cp_passenger_window_2_r)
                                                        (T.L.ev_klappfenster_cls)
                                                        l5 4 =
                                                        {if}
                                                            (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                                        {else}
                                                            (M.L.ai_pre_cockpit_passenger_windows_lock_unlock_delay)
                                                        {endif}
                                                    {else}
                                                        l5 6 =
                                                        {if}
                                                            1 (S.L.cp_passenger_window_2_r_locked)
                                                            (T.L.ev_cp_passenger_window_lock)
                                                            (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                                        {else}
                                                            l3 l2 || l1 ||
                                                            {if}
                                                                4
                                                            {else}
                                                                (M.L.ai_pre_cockpit_passenger_windows_terminal_delay)
                                                                6
                                                            {endif}
                                                            (S.L.ai_pre_cockpit_passenger_window_adjustment_phase)
                                                        {endif}
                                                    {endif}
                                                {endif}
                                            {endif}
                                        {endif}
                                    {else}
                                        (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) 6 =
                                        {if}
                                            (L.L.ai_pre_cockpit_passenger_window_adjustment_timer) !
                                            {if}
                                                l5 l3 || l2 || l1 ||
                                                {if}
                                                    (M.L.ai_pre_cockpit_passenger_windows_next_window_delay)
                                                    5 (S.L.ai_pre_cockpit_passenger_window_adjustment_phase)
                                                {else}
                                                    0 (S.L.ai_pre_cockpit_passenger_window_adjustment_phase)
                                                        (S.L.ai_pre_cockpit_driver_cubicle_door_closed_initially)
                                                    -1 (S.L.ai_pre_cockpit_passenger_window_adjustment_timer)
                                                {endif}
                                            {endif}
                                        {endif}
                                    {endif}
                                {endif}
                            {endif}
                        {endif}
                    {endif}
                {endif}
            {else}
                (L.L.ai_pre_cockpit_passenger_window_adjustment_phase) (L.L.cp_fahrertuer_open) &&
                {if}
                    0 (S.L.ai_pre_cockpit_driver_cubicle_door_closed_initially)
                {endif}
                0 (S.L.ai_pre_cockpit_passenger_window_adjustment_phase)
                -1 (S.L.ai_pre_cockpit_passenger_window_adjustment_timer)
            {endif}
        {endif}
    {endif}
{end}

{macro:ai_pre_cockpit_passenger_windows_establish_window_target}
    (L.L.humans_count)
    {if}
        0
    {else}
        (L.L.r10)
        {if}
            (L.L.r11)
            {if}
                0
            {else}
                (L.L.r12)
                {if}
                    2
                {else}
                    1
                {endif}
            {endif}
        {else}
            (L.L.r11)
            {if}
                l4
                {if}
                    5
                {else}
                    4
                {endif}
            {else}
                l4
                {if}
                    (L.L.r12)
                    {if}
                        0
                    {else}
                        6
                    {endif}
                {else}
                    (L.L.r12)
                    {if}
                        3
                    {else}
                        0
                    {endif}
                {endif}
            {endif}
        {endif}
    {endif}
    (S.L.r13)
{end}

{macro:ai_pre_cockpit_passenger_windows_initial_delay}
    20 10000 random 10000 / 15 * + (S.L.ai_pre_cockpit_passenger_window_adjustment_timer)
{end}

{macro:ai_pre_cockpit_passenger_windows_lock_unlock_delay}
    0.6 10000 random 10000 / 0.9 * + (S.L.ai_pre_cockpit_passenger_window_adjustment_timer)
{end}

{macro:ai_pre_cockpit_passenger_windows_next_window_delay}
    3 10000 random 10000 / 5 * + (S.L.ai_pre_cockpit_passenger_window_adjustment_timer)
{end}

{macro:ai_pre_cockpit_passenger_windows_terminal_delay}
    5 10000 random 10000 / 15 * + (S.L.ai_pre_cockpit_passenger_window_adjustment_timer)
{end}
